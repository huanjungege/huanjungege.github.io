<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>apply与call、bind的区别</title>
    <url>/2019/07/04/2019-02-03-apply%E4%B8%8Ecall%E3%80%81bind%E7%9A%84%E5%8C%BA%E5%88%AB/</url>
    <content><![CDATA[<h1 id="apply和call"><a href="#apply和call" class="headerlink" title="apply和call()"></a>apply和call()</h1><h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><ul>
<li>作用都可以改变this对象的指向</li>
<li>第一个参数都是this要指向的对象(thisArg//函数执行时this的指向,args//传入的实参)</li>
</ul>
<a id="more"></a>

<h2 id="call与apply的区别"><a href="#call与apply的区别" class="headerlink" title="call与apply的区别"></a>call与apply的区别</h2><figure class="hljs highlight javascript"><table><tr><td class="code"><pre><code class="hljs javascript"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">f1</span>(<span class="hljs-params">x,y</span>)</span>&#123;<br><span class="hljs-built_in">console</span>.log(<span class="hljs-string">"结果："</span>+(x+y)+<span class="hljs-keyword">this</span>);<br>&#125;<br>f1(<span class="hljs-number">10</span>,<span class="hljs-number">20</span>);<br>obj=&#123;<br>    name=<span class="hljs-string">"小米"</span>,<br>    age=<span class="hljs-number">20</span><br>&#125;<br>f1.apply(obj,[<span class="hljs-number">10</span>,<span class="hljs-number">20</span>]);<br>f1.call(obj,<span class="hljs-number">10</span>,<span class="hljs-number">20</span>);<br></code></pre></td></tr></table></figure>

<p> <code>apply()</code>与<code>call()</code>方法都可以将实参在对象之后传递，但是<code>apply()</code>方法需要将实参封装到一个数组中统一转递，即使只有一个实参。</p>
<p>简单理解</p>
<ol>
<li><code>apply()</code>把参数打包成<code>Array</code>再传入</li>
<li><code>call()</code>把参数按顺序传入</li>
</ol>
<h2 id="第一个参数的传递"><a href="#第一个参数的传递" class="headerlink" title="第一个参数的传递"></a>第一个参数的传递</h2><ol>
<li>thisObj不传或者为null，undefined时，函数中的this会指向window对象（非严格模式）</li>
<li>传递一个别的函数名时，函数中的this将指向这个函数的引用</li>
<li>传递的值为数字、布尔、字符串时，this会指向这些基本类型的包装对象Number、Boolean、String</li>
<li>传递一个对象时，函数中的this将指向传递的这个对象。</li>
</ol>
<h3 id="call-和apply-并不在实例对象中，那么对象是如何调用的"><a href="#call-和apply-并不在实例对象中，那么对象是如何调用的" class="headerlink" title="call()和apply()并不在实例对象中，那么对象是如何调用的"></a><code>call()</code>和<code>apply()</code>并不在实例对象中，那么对象是如何调用的</h3><figure class="hljs highlight javascript"><table><tr><td class="code"><pre><code class="hljs javascript">&lt;script&gt;<br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">f1</span>(<span class="hljs-params"></span>)</span>&#123;<br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-keyword">this</span>+<span class="hljs-string">":被调用了"</span>);<br>&#125;<br><span class="hljs-built_in">console</span>.log(f1.__proto__==<span class="hljs-built_in">Function</span>.prototype);<span class="hljs-comment">//true</span><br>&lt;<span class="hljs-regexp">/script&gt;</span><br></code></pre></td></tr></table></figure>

<p>可以看到<code>apply()</code>和<code>call()</code>不在实例对象中，而在对象的原型中</p>
<h2 id="bind"><a href="#bind" class="headerlink" title="bind()"></a>bind()</h2><ul>
<li>可以改变this的指向</li>
<li><code>call()</code>和<code>apply()</code>在调用函数时改变</li>
<li>bind是将函数返回，相当于复制了一份。</li>
</ul>
]]></content>
      <categories>
        <category>前端</category>
        <category>JavaScript</category>
      </categories>
      <tags>
        <tag>javascript</tag>
      </tags>
  </entry>
  <entry>
    <title>vue后台管理系统</title>
    <url>/2020/07/16/2019-01-02vue%E5%90%8E%E5%8F%B0%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F/</url>
    <content><![CDATA[<h2 id="使用VueElementUI-thinkJS搭建后台管理系统"><a href="#使用VueElementUI-thinkJS搭建后台管理系统" class="headerlink" title="使用VueElementUI+thinkJS搭建后台管理系统"></a>使用VueElementUI+thinkJS搭建后台管理系统</h2><p>后台的核心就是提供数据，封装操作数据库的接口提供给前端调用。使用了Vue-element-admin的模板加thinkJS+Mysql快速的搭建起项目,</p>
<p>主要练习前端登录验证，数据列表，获取用户信息和elementUi组件。</p>
<a id="more"></a>

<h3 id="前端的登录过程"><a href="#前端的登录过程" class="headerlink" title="前端的登录过程"></a>前端的登录过程</h3><h4 id="首先在后台创建接口来处理前端的登录的相关请求。"><a href="#首先在后台创建接口来处理前端的登录的相关请求。" class="headerlink" title="首先在后台创建接口来处理前端的登录的相关请求。"></a>首先在后台创建接口来处理前端的登录的相关请求。</h4><p>1、创建登录接口</p>


<p>2、使用JWT保持用户的登录状态，可以实现跨域的身份验证</p>
<figure class="hljs highlight javascript"><table><tr><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">//在config中配置jwt的加密和cookie</span><br><span class="hljs-attr">jwt</span>:&#123;<br>    <span class="hljs-attr">secret</span>:<span class="hljs-string">"passwordss"</span>,<br>    <span class="hljs-attr">cookie</span>:<span class="hljs-string">'jwt-token'</span>,<span class="hljs-comment">//cookie中字段的设置</span><br>    <span class="hljs-attr">expire</span>:<span class="hljs-number">3000</span><span class="hljs-comment">//秒，口令的有效时间</span><br>  &#125;,<br></code></pre></td></tr></table></figure>

<figure class="hljs highlight javascript"><table><tr><td class="code"><pre><code class="hljs javascript"><br>checkAuth()&#123;<br>    <span class="hljs-keyword">let</span> token = <span class="hljs-keyword">this</span>.ctx.headers[<span class="hljs-string">'x-token'</span>];<br>    <span class="hljs-comment">//sercet加密，exipre时间，this.config('jwt')获取config中的jwt配置</span><br>    <span class="hljs-keyword">const</span> &#123;secret,cookie,exipre&#125; = <span class="hljs-keyword">this</span>.config(<span class="hljs-string">'jwt'</span>)<br><br>    <span class="hljs-keyword">try</span> &#123;<br>      <span class="hljs-keyword">var</span> tokenObj = token ? jsonwebtoken.verify(token,secret):&#123;&#125;;<br>      <span class="hljs-keyword">this</span>.ctx.state.username = tokenObj.name;<br>    &#125; <span class="hljs-keyword">catch</span> (error) &#123;<br>      <span class="hljs-keyword">return</span> <span class="hljs-keyword">this</span>.authFail()<br>    &#125;<br><br>    <span class="hljs-keyword">if</span>(!tokenObj.name)&#123;<br>      <span class="hljs-keyword">return</span> <span class="hljs-keyword">this</span>.authFail()<br>    &#125;<br><br>    <span class="hljs-keyword">this</span>.updateAuth(token.name)<br>  &#125;<br><span class="hljs-comment">//更新token</span><br>  updateAuth(userName)&#123;<br>    <span class="hljs-keyword">const</span> userInfo = &#123;<br>      <span class="hljs-attr">name</span>:userName<br>    &#125;;<br>    <span class="hljs-comment">// 获取jwt的配置信息</span><br>    <span class="hljs-keyword">const</span> &#123;secret,cookie,expire&#125; = <span class="hljs-keyword">this</span>.config(<span class="hljs-string">'jwt'</span>)<br>    <span class="hljs-keyword">const</span> token = jsonwebtoken.sign(userInfo,secret,&#123;<span class="hljs-attr">expiresIn</span>:expire&#125;);<br>    <span class="hljs-keyword">this</span>.cookie(cookie,token);<br> <span class="hljs-comment">//客户端收到服务器返回的 JWT，可以储存在 Cookie 里面，也可以储存在 localStorage。</span><br><span class="hljs-comment">//此后，客户端每次与服务器通信，都要带上这个 JWT。你可以把它放在 Cookie 里面自动发送，但是这样不能跨域，所以更好的做法是放在 HTTP 请求的头信息Authorization字段里面。</span><br>    <span class="hljs-keyword">this</span>.header(<span class="hljs-string">'authoriztion'</span>,token);<br>    <span class="hljs-keyword">return</span> token;<br>  &#125;<br>&#125;;<br><span class="hljs-comment">// 失败处理</span><br>  authFail()&#123;<br>    <span class="hljs-keyword">this</span>.json(&#123;<span class="hljs-attr">error</span>:<span class="hljs-string">"JWT校验失败"</span>&#125;);<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>  &#125;<br></code></pre></td></tr></table></figure>

<p>随后在中间件中引入jwt</p>
<h5 id="JWT原理"><a href="#JWT原理" class="headerlink" title="JWT原理"></a>JWT原理</h5><p>JWT的原理是，服务器认证以后生成一个JSON对象，发回给用户，</p>
<figure class="hljs highlight json"><table><tr><td class="code"><pre><code class="hljs json">&#123;<br>    <span class="hljs-attr">"姓名"</span>: <span class="hljs-string">"小刘"</span>,<br>    <span class="hljs-attr">"角色"</span>: <span class="hljs-string">"管理员"</span>,<br>    <span class="hljs-attr">"到期时间"</span>: <span class="hljs-string">"2020年8月1日0点0分"</span><br>&#125;<br></code></pre></td></tr></table></figure>

<p>以后，用户与服务端通信的时候，都要发回这个 JSON 对象。服务器完全只靠这个对象认定用户身份。为了防止用户篡改数据，服务器在生成这个对象的时候，会加上签名；</p>
<p>JWT的三个部分依次如下。</p>
<p>Header(头部)、Payload(负载)、Signature(签名)</p>
<p>Header.payload.Signature</p>
<h5 id="JWT的使用方式"><a href="#JWT的使用方式" class="headerlink" title="JWT的使用方式"></a>JWT的使用方式</h5><p>客户端收到服务器返回的JWT，可以存储在Cookie里面，也可以存储在localStorage。</p>
<p>此后，客户端每次与服务器通信，都要带上这个 JWT。你可以把它放在 Cookie 里面自动发送，但是这样不能跨域，所以更好的做法是放在 HTTP 请求的头信息<code>Authorization</code>字段里面。</p>
<figure class="hljs highlight dts"><table><tr><td class="code"><pre><code class="hljs undefined"><span class="hljs-symbol">Authorization:</span>Bearer<span class="hljs-params">&lt;token&gt;</span><br></code></pre></td></tr></table></figure>

<p>另一种方式是，在跨域的时候，JWT就放在POST请求的数据体里面</p>
<h4 id="进入前端的登录逻辑"><a href="#进入前端的登录逻辑" class="headerlink" title="进入前端的登录逻辑"></a>进入前端的登录逻辑</h4><p>1、在login.vue中修改路由并在router中修改路由，在根目录时跳转到login页</p>
<p>2、前端中封装axios请求，同时设置baseurl,并设置跨域</p>
<figure class="hljs highlight javascript"><table><tr><td class="code"><pre><code class="hljs javascript">baseURL: process.env.VUE_APP_BASE_API, <span class="hljs-comment">// url = base url + request url</span><br><span class="hljs-comment">//在.env.development中将base设置</span><br>VUE_APP_BASE_API = <span class="hljs-string">'/api'</span><br><span class="hljs-comment">//在vue.config.js中设置代理服务器</span><br><span class="hljs-attr">proxy</span>:&#123;<br>      <span class="hljs-string">'/api'</span>:&#123;<br>        <span class="hljs-attr">target</span>:<span class="hljs-string">'http://127.0.0.1:8360'</span>,<br>        <span class="hljs-attr">pathRewrite</span>:&#123;<br>          <span class="hljs-string">'^/api'</span>:<span class="hljs-string">""</span><br>        &#125;<br>      &#125;<br>    &#125;<br></code></pre></td></tr></table></figure>

<p>3、编写登录请求</p>
<figure class="hljs highlight javascript"><table><tr><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">export</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">login</span>(<span class="hljs-params">data</span>) </span>&#123;<br>  <span class="hljs-keyword">return</span> request(&#123;<br>    <span class="hljs-attr">url</span>: <span class="hljs-string">'/user/login/login'</span>,<br>    <span class="hljs-attr">method</span>: <span class="hljs-string">'post'</span>,<br>    data<br>  &#125;)<br>&#125;<br><span class="hljs-keyword">export</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">getInfo</span>(<span class="hljs-params">token</span>) </span>&#123;<br>  <span class="hljs-keyword">return</span> request(&#123;<br>    <span class="hljs-attr">url</span>: <span class="hljs-string">'/admin/index/userInfo'</span>,<br>    <span class="hljs-attr">method</span>: <span class="hljs-string">'get'</span><br>  &#125;)<br>&#125;<br></code></pre></td></tr></table></figure>

<p>4、Vuex编写获取用户信息函数在数据库中获取用户名头像等</p>
<p>5、登出仅需删除token</p>
<figure class="hljs highlight javascript"><table><tr><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// user logout</span><br>logout(&#123; commit, state &#125;) &#123;<br>  <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-built_in">Promise</span>(<span class="hljs-function">(<span class="hljs-params">resolve, reject</span>) =&gt;</span> &#123;<br><br>      removeToken() <span class="hljs-comment">// must remove  token  first</span><br>      resetRouter()<br>      commit(<span class="hljs-string">'RESET_STATE'</span>)<br>      resolve()<br><br>  &#125;)<br>&#125;,<br></code></pre></td></tr></table></figure>

<h3 id="用户管理获取用户列表删除修改增加等"><a href="#用户管理获取用户列表删除修改增加等" class="headerlink" title="用户管理获取用户列表删除修改增加等"></a>用户管理获取用户列表删除修改增加等</h3><h4 id="后台创建用户管理接口"><a href="#后台创建用户管理接口" class="headerlink" title="后台创建用户管理接口"></a>后台创建用户管理接口</h4>{% asset_img 2.png %}

<p>编写从数据库获取用户列表和删除列表等接口</p>
<h4 id="前端用户列表增删改查"><a href="#前端用户列表增删改查" class="headerlink" title="前端用户列表增删改查"></a>前端用户列表增删改查</h4><p>用户列表使用table组件，模板中匹配对应数据，在点击增加用户时设置跳转路由，跳转到对应增加信息的页面。</p>
<h4 id="列表分页操作"><a href="#列表分页操作" class="headerlink" title="列表分页操作"></a>列表分页操作</h4><figure class="hljs highlight"><table><tr><td class="code"><pre><code class="hljs javascript">&lt;el-pagination<br>      background<br>      layout="prev, pager, next"<br>      :total="total" @current-change="getPageUsers"&gt;<br>    &lt;/el-pagination&gt;<br>//total总条数从后端获取<br>//下一页<br>getPageUsers(page) &#123;<br>        console.log(page);<br>        userlist(&#123;page&#125;).then(response =&gt; &#123;<br>          this.list = response.userlist;<br>          this.total = response.total;<br>          console.log(this.list)<br>          this.listLoading = false<br>        &#125;)<br>      &#125;,<br></code></pre></td></tr></table></figure>

<h4 id="在删除时通过弹框提示"><a href="#在删除时通过弹框提示" class="headerlink" title="在删除时通过弹框提示"></a>在删除时通过弹框提示</h4><figure class="hljs highlight javascript"><table><tr><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">async</span> del(id) &#123;<br>        <span class="hljs-comment">//弹框</span><br>        <span class="hljs-keyword">this</span>.$confirm(<span class="hljs-string">'是否需要删除$&#123;id&#125;的用户?, 确认删除'</span>, <span class="hljs-string">'提示'</span>, &#123;<br>          <span class="hljs-attr">confirmButtonText</span>: <span class="hljs-string">'确定'</span>,<br>          <span class="hljs-attr">cancelButtonText</span>: <span class="hljs-string">'取消'</span>,<br>          <span class="hljs-attr">type</span>: <span class="hljs-string">'warning'</span><br>        &#125;).then(<span class="hljs-keyword">async</span> () =&gt; &#123;<br>          <span class="hljs-keyword">this</span>.listLoading = <span class="hljs-literal">true</span>;<br>          <span class="hljs-keyword">let</span> res = <span class="hljs-keyword">await</span> deluser(&#123;id&#125;);<br>          <span class="hljs-keyword">this</span>.listLoading = <span class="hljs-literal">false</span>;<br>          <span class="hljs-keyword">this</span>.fetchData()<br>          &#125;);<br>      &#125;<br></code></pre></td></tr></table></figure>

<h4 id="添加权限操作"><a href="#添加权限操作" class="headerlink" title="添加权限操作"></a>添加权限操作</h4><p>后台编写添加权限接口</p>
{% asset_img 3.png %}

<p>前台导出调用后台接口的请求给页面调用</p>
<figure class="hljs highlight javascript"><table><tr><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">export</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">addrule</span>(<span class="hljs-params">data</span>) </span>&#123;<br>  <span class="hljs-keyword">return</span> request(&#123;<br>    <span class="hljs-attr">url</span>:<span class="hljs-string">'/admin/rule/addrule'</span>,<br>    <span class="hljs-attr">method</span>:<span class="hljs-string">'post'</span>,<br>    <span class="hljs-attr">data</span>:data<br>  &#125;)<br>&#125;<br></code></pre></td></tr></table></figure>

<p>addrule页面中调用方法，当提交表单时</p>
<figure class="hljs highlight javascript"><table><tr><td class="code"><pre><code class="hljs javascript">methods: &#123;<br>      onSubmit() &#123;<br>        <span class="hljs-keyword">this</span>.$message(<span class="hljs-string">'submit!'</span>)<br>        addrule(<span class="hljs-keyword">this</span>.form)<br>        <span class="hljs-keyword">this</span>.$router.push(<span class="hljs-string">'/user/rulelist'</span>)<br>      &#125;,<br>      onCancel() &#123;<br>        <span class="hljs-keyword">this</span>.$message(&#123;<br>          <span class="hljs-attr">message</span>: <span class="hljs-string">'cancel!'</span>,<br>          <span class="hljs-attr">type</span>: <span class="hljs-string">'warning'</span><br>        &#125;)<br>      &#125;<br>    &#125;<br></code></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>前端</category>
        <category>Vue</category>
      </categories>
      <tags>
        <tag>thinkJS</tag>
        <tag>框架</tag>
      </tags>
  </entry>
  <entry>
    <title>jQuery总结一</title>
    <url>/2019/07/26/2019-07-26-jQuery%E6%80%BB%E7%BB%93%E4%B8%80/</url>
    <content><![CDATA[<h1 id="jQuery总结"><a href="#jQuery总结" class="headerlink" title="jQuery总结"></a>jQuery总结</h1><h2 id="引入jQuery的原因"><a href="#引入jQuery的原因" class="headerlink" title="引入jQuery的原因"></a>引入jQuery的原因</h2><p>在用js写代码会出现的问题</p>
<ul>
<li>window.onload事件有事件覆盖的问题，因此只能写一个事件</li>
<li><strong>浏览器兼容问题</strong></li>
<li>书写繁琐，代码量多</li>
<li>动画效果实现复杂</li>
</ul>
<p>jQuery可以解决上述问题</p>
<a id="more"></a>

<h2 id="jQuery怎么使用"><a href="#jQuery怎么使用" class="headerlink" title="jQuery怎么使用"></a>jQuery怎么使用</h2><p>jQuery就是js的一个类库，jQuery的方法原生js都可以实现，所有使用jQuery就是使用jQuery封装好的API。</p>
<p>这些API的共同特点几乎都是方法。所以在使用jQuery都是方法的调用。</p>
<h2 id="jquery的特点"><a href="#jquery的特点" class="headerlink" title="jquery的特点"></a>jquery的特点</h2><ol>
<li>隐式迭代：在调用方法的内部会为匹配到的所有元素进行循环遍历，执行相应的方法，我们不需要再进行循环，简化我们的操作，方便我们的调用</li>
<li>链式编程：<strong>原理 jQuery节点在调用api后会返回自身节点（return this）</strong></li>
</ol>
<h3 id="使用步骤"><a href="#使用步骤" class="headerlink" title="使用步骤"></a>使用步骤</h3><ol>
<li>引入js文件</li>
<li>页面加载事件</li>
<li>功能代码</li>
</ol>
<h2 id="jQuery页面加载事件"><a href="#jQuery页面加载事件" class="headerlink" title="jQuery页面加载事件"></a>jQuery页面加载事件</h2><p>DOM</p>
<figure class="hljs highlight javascript"><table><tr><td class="code"><pre><code class="hljs javascript"><span class="hljs-built_in">window</span>.onlad=<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;&#125;;<span class="hljs-comment">//不仅要等文本加载完毕，而且要等图片也加载完毕才执行函数。</span><br></code></pre></td></tr></table></figure>

<p>jQuery的页面加载事件有以下几种</p>
<ol>
<li><figure class="hljs highlight javascript"><table><tr><td class="code"><pre><code class="hljs javascript">$(<span class="hljs-built_in">window</span>).load(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;&#125;) /  $(<span class="hljs-built_in">window</span>).ready(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;&#125;)<br><span class="hljs-comment">//这两种方式也都需要页面所有元素都加载完毕才能触发</span><br></code></pre></td></tr></table></figure>
</li>
<li><figure class="hljs highlight javascript"><table><tr><td class="code"><pre><code class="hljs javascript">$(<span class="hljs-built_in">document</span>).reday(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;&#125;)<span class="hljs-comment">//文档加载完毕，图片还没有加载的时候就可以触发</span><br></code></pre></td></tr></table></figure>
</li>
<li><figure class="hljs highlight javascript"><table><tr><td class="code"><pre><code class="hljs javascript">上一种方法的简洁版<br>$(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;&#125;)<br></code></pre></td></tr></table></figure>

</li>
</ol>
<h2 id="jQuery中的选择器"><a href="#jQuery中的选择器" class="headerlink" title="jQuery中的选择器"></a>jQuery中的选择器</h2><figure class="hljs highlight javascript"><table><tr><td class="code"><pre><code class="hljs javascript">id选择器   $(<span class="hljs-string">"#dev"</span>);<br>标签选择器  $(<span class="hljs-string">"p"</span>);<br>类选择器    $(<span class="hljs-string">".cls"</span>);<br><span class="hljs-comment">//层次选择器</span><br>$(<span class="hljs-string">"#dv span"</span>);  <span class="hljs-comment">//div这个父级元素中所有的span标签</span><br>$(<span class="hljs-string">"#dv&gt;span"</span>)   <span class="hljs-comment">//div这个父级元素的所有**直接子元素**span标签</span><br>$(<span class="hljs-string">"#dv~span"</span>)   <span class="hljs-comment">//div这个父级元素后面的兄弟元素</span><br></code></pre></td></tr></table></figure>

<p>基本过滤选择器</p>
<figure class="hljs highlight javascript"><table><tr><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// :odd奇数选择</span><br>$(<span class="hljs-string">"li:odd"</span>).css(<span class="hljs-string">"background"</span>, <span class="hljs-string">"red"</span>);<br><br><span class="hljs-comment">// :even偶数选择</span><br>$(<span class="hljs-string">"li:even"</span>).css(<span class="hljs-string">"background"</span>, <span class="hljs-string">"green"</span>);<br><br><span class="hljs-comment">// :eq(index)索引选择器</span><br>$(<span class="hljs-string">"ul li:eq(3)"</span>).css(<span class="hljs-string">"font-size"</span>, <span class="hljs-string">"30px"</span>);<span class="hljs-comment">//设置第四个li的字体</span><br><br><span class="hljs-comment">// :lt(index)小于索引</span><br>$(<span class="hljs-string">"li:lt(6)"</span>).css(<span class="hljs-string">"font-size"</span>, <span class="hljs-string">"30px"</span>);<br><br><span class="hljs-comment">// :gt(index)大于该索引</span><br>$(<span class="hljs-string">".ulList1 li:gt(7)"</span>).css(<span class="hljs-string">"font-size"</span>, <span class="hljs-string">"40px"</span>);<br><br><span class="hljs-comment">// :first第一个</span><br>$(<span class="hljs-string">".ulList li:first"</span>).css(<span class="hljs-string">"font-size"</span>, <span class="hljs-string">"40px"</span>);<br><br><span class="hljs-comment">// :last最后一个</span><br>$(<span class="hljs-string">"li:last"</span>).css(<span class="hljs-string">"font-size"</span>, <span class="hljs-string">"40px"</span>);<br></code></pre></td></tr></table></figure>

<h3 id="筛选选择器"><a href="#筛选选择器" class="headerlink" title="筛选选择器"></a>筛选选择器</h3><figure class="hljs highlight javascript"><table><tr><td class="code"><pre><code class="hljs javascript">.prev();      该元素前一个兄弟元素<br>.prevAll();   该元素前面所有兄弟元素<br>.next();      该元素后一个兄弟元素<br>.nextAll();   该元素后面所有兄弟元素<br>.parnet();    该元素的父级元素<br>.find();      后代寻找选择器（要指定参数）例：<br>jqul.find(<span class="hljs-string">"li"</span>).css(<span class="hljs-string">"background"</span>, <span class="hljs-string">"pink"</span>);<br>.sibling();   该元素所有兄弟元素<br></code></pre></td></tr></table></figure>

<h2 id="jQuery中的一些方法"><a href="#jQuery中的一些方法" class="headerlink" title="jQuery中的一些方法"></a>jQuery中的一些方法</h2><figure class="hljs highlight javascript"><table><tr><td class="code"><pre><code class="hljs javascript">jQuery对象.val();    <span class="hljs-comment">//表示获取元素的value属性值</span><br>jQuery对象.val(<span class="hljs-string">"值"</span>);    <span class="hljs-comment">//表示设置元素的value属性值</span><br><br>jQuery对象.css(<span class="hljs-string">"backgroundColor"</span>,<span class="hljs-string">"red"</span>)  设置css样式<br><br>jQuery对象.text()         <span class="hljs-comment">//获取元素的文本内容</span><br>jQuery对象.text(<span class="hljs-string">""</span>)       <span class="hljs-comment">//设置元素的文本内容</span><br><br>jQuery对象.html()         <span class="hljs-comment">//获取元素的html内容</span><br>jQuery对象.html(<span class="hljs-string">""</span>)       <span class="hljs-comment">//设置元素的html内容</span><br><br>jQuery对象.mouseenter()   <span class="hljs-comment">//鼠标进入事件</span><br>jQuery对象.mouseleave()   <span class="hljs-comment">//鼠标离开事件</span><br></code></pre></td></tr></table></figure>

<p>例子：</p>
<figure class="hljs highlight"><table><tr><td class="code"><pre><code class="hljs javascript">&lt;script src="jquery-1.12.1.min.js"&gt;&lt;/script&gt;<br>&lt;script&gt;<br>    //页面加载事件<br>      $(function () &#123; <br>          $("ul&gt;li").mouseenter(function()&#123;<br>           //鼠标进入背景颜色变为红色，其他兄弟元素没有颜色<br>              $(this).css("backgroundColor","red").siblings("li").css("backgroundColor","";<br>          &#125;).mouseleave(function()&#123;<br>$(this).parent().find("li").css("backgroundColor","");//鼠标离开都没有颜色<br>          &#125;).click(function()&#123;<br>       //添加点击事件鼠标点击上方变为黄色，下方变为蓝色<br>              $(this).prevAll().css("backgroundColor","yellow").end().nextAll().css("backgroundColor","blue");<br>          &#125;)<br>          <br>       &#125;)<br>//html<br>&lt;ul&gt;<br>        &lt;li&gt;青岛啤酒（TsingTao）&lt;/li&gt;<br>        &lt;li&gt;瓦伦丁（Wurenbacher）&lt;/li&gt;<br>        &lt;li&gt;雪花（SNOW）&lt;/li&gt;<br>        &lt;li&gt;奥丁格教士（Franziskaner）&lt;/li&gt;<br>        &lt;li&gt;科罗娜喜力柏龙（Paulaner）&lt;/li&gt;<br>        &lt;li&gt;嘉士伯Kaiserdom&lt;/li&gt;<br>        &lt;li&gt;罗斯福（Rochefort）&lt;/li&gt;<br>        &lt;li&gt;粉象（Delirium）&lt;/li&gt;<br>        &lt;li&gt;爱士堡（Eichbaum）&lt;/li&gt;<br>        &lt;li&gt;哈尔滨牌蓝带&lt;/li&gt;<br>      &lt;/ul&gt;<br></code></pre></td></tr></table></figure>

<figure class="hljs highlight"><table><tr><td class="code"><pre><code class="hljs javascript">.index();   //当前元素的索引<br>.hasClass()   //判断是否应用类样式<br>.addClass()    //添加类样式<br>.removeClass()  //删除类样式<br>.toggleClass()  //切换类样式<br><br>.show("1000","function")  //可不加参数，意为如果隐藏则显示该元素，参数1：秒数  2：添加函数<br>.hide("","")   //同上，隐藏该元素<br>例：<br>&lt;script src="jquery-1.12.1.min.js"&gt;&lt;/script&gt;<br>      &lt;script&gt;<br>          $(function()&#123;<br>    //按钮1添加点击事件，从后开始隐藏图片，利用了回调函数<br>            $("#btn1").click(function()&#123;<br>          $("div&gt;img:last").hide(1000,function f1()&#123;<br>              $(this).prev().hide(1000,f1)<br>          &#125;);<br>         <br>      &#125;);<br>    //按钮2添加点击事件，从第一张图片开始出现<br>      $("#btn2").click(function()&#123;<br>        $("div&gt;img:first").show(1000,function f2()&#123;<br>              $(this).next().show(1000,f2);<br>      &#125;);<br>    &#125;);<br>          &#125;);<br>&lt;body&gt;<br>    &lt;input type="button" value="隐藏动画" id="btn1"/&gt;<br>&lt;input type="button" value="显示动画" id="btn2"/&gt;<br>&lt;div&gt;<br>  &lt;img src="images/11.jpg"/&gt;<br>  &lt;img src="images/22.jpg"/&gt;<br>  &lt;img src="images/33.jpg"/&gt;<br>  &lt;img src="images/44.jpg"/&gt;<br>&lt;/div&gt;<br></code></pre></td></tr></table></figure>

<figure class="hljs highlight javascript"><table><tr><td class="code"><pre><code class="hljs javascript">动画相关方法<br>.slideUp();   <span class="hljs-comment">//滑入</span><br>.slideDown();  <span class="hljs-comment">//滑出</span><br>.slideToggle(); <span class="hljs-comment">//滑入滑出</span><br><br>.fadeIn(); <span class="hljs-comment">//淡入</span><br>.fadeOut(); <span class="hljs-comment">//淡出</span><br>.fadeToggle();淡入淡出<br><br>animate()自定义动画<br>$(selector).animate(&#123;params&#125;,[speed],[easing],[callback]);<br><span class="hljs-comment">// &#123;params&#125;：要执行动画的CSS属性，带数字（必选）</span><br><span class="hljs-comment">// speed：执行动画时长（可选）</span><br><span class="hljs-comment">// easing:执行效果，默认为swing（缓动）  可以是linear（匀速）</span><br><span class="hljs-comment">// callback：动画执行完后立即执行的回调函数（可选）</span><br></code></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>前端</category>
        <category>JQuery</category>
      </categories>
      <tags>
        <tag>javaScript</tag>
        <tag>jQuery</tag>
      </tags>
  </entry>
  <entry>
    <title>Nodejs入门介绍</title>
    <url>/2019/10/22/2019-10-22-node-01/</url>
    <content><![CDATA[<h1 id="Node"><a href="#Node" class="headerlink" title="Node"></a>Node</h1><h2 id="Node-js是什么"><a href="#Node-js是什么" class="headerlink" title="Node.js是什么?"></a><code>Node.js</code>是什么?</h2><p>在node官网的介绍中看到</p>
<ol>
<li><strong>Node.js® is a JavaScript runtime built on <a href="https://v8.dev/" target="_blank" rel="noopener">Chrome’s V8 JavaScript engine</a>.</strong></li>
</ol>
<ul>
<li>Nodejs不是一门语言，不是库和框架，是一个<code>Javascript</code>运行环境</li>
<li>以前只有浏览器可以解析执行Javascript代码，由于Node的出现现在js可以脱离浏览器运行</li>
<li>Node中没有BOM和DOM，在Ecmascript的基础上增加了一些服务器级别的操作API</li>
<li>例如：文件读写，网络服务的构建，网络通信，http服务器</li>
</ul>
<a id="more"></a>

<ol start="2">
<li><strong>Node.js uses an <code>event-driven</code>, <code>non-blocking I/O moedl</code>  that makes it <code>lightweight and efficent*</code></strong></li>
</ol>
<ul>
<li>event-driven:事件驱动</li>
<li>non-blocking I/O model： 非阻塞I/O类型（异步）</li>
<li>lightweight and efficent: 轻量和高效的</li>
</ul>
<p>这句话展现了Node.js的特性，在以后的学习中我们会慢慢理解</p>
<ol start="3">
<li><strong>Node.js package ecosytem ,<code>npm</code>,is the largest ecosystem of open source libraries in the world</strong></li>
</ol>
<ul>
<li>npm是世界上最大的开源库生态系统</li>
<li>绝大多数JavaScript相关的包都存放在npm上，这样可以让开发人员方便下载</li>
<li><code>npm install jquery</code></li>
</ul>
<h2 id="学习Node-js可以了解到"><a href="#学习Node-js可以了解到" class="headerlink" title="学习Node.js可以了解到"></a>学习Node.js可以了解到</h2><ul>
<li>B/S编程模型<ul>
<li>Browser-Sever</li>
<li>back-end</li>
</ul>
</li>
<li>模块化编程<ul>
<li>以前的JavaScript只能通过script标签加载，现在可以使用@import(‘文件路径’)</li>
</ul>
</li>
<li>Node常用API</li>
<li>异步编程<ul>
<li>回调函数</li>
<li>Promise</li>
<li>ES6(只是一种新语法)</li>
</ul>
</li>
</ul>
<h2 id="模块的导入与导出"><a href="#模块的导入与导出" class="headerlink" title="模块的导入与导出"></a>模块的导入与导出</h2><p>index1想要使用index2中的内容：index1中需要使用require()导入index2，index2中将需要被引用的内容使用module.exports()导出。</p>
<h2 id="Node中的包"><a href="#Node中的包" class="headerlink" title="Node中的包"></a>Node中的包</h2><p>包其实是一个存档文件。完全复合CommonJS规范的包目录最基本应该包含如下这些文件。</p>
<ol>
<li>package.json：包描述文件</li>
<li>bin：用于存放可执行二进制文件的目录</li>
<li>lib：用于存放JavaScript代码的目录</li>
<li>doc：用于存放文档的目录</li>
<li>test：用于存放单元测试用例的代码</li>
</ol>
]]></content>
      <categories>
        <category>后端</category>
        <category>Node</category>
      </categories>
      <tags>
        <tag>javaScript</tag>
        <tag>Nodejs</tag>
      </tags>
  </entry>
  <entry>
    <title>jQuery总结二</title>
    <url>/2019/07/29/2019-07-26-jQuery%E6%80%BB%E7%BB%93%E4%BA%8C/</url>
    <content><![CDATA[<h2 id="jQuery节点操作"><a href="#jQuery节点操作" class="headerlink" title="jQuery节点操作"></a>jQuery节点操作</h2><h3 id="创建节点"><a href="#创建节点" class="headerlink" title="创建节点"></a>创建节点</h3><figure class="hljs highlight javascript"><table><tr><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// $(htmlStr)</span><br><span class="hljs-comment">// htmlStr：html格式的字符串</span><br>$(<span class="hljs-string">'&lt;span-这是一个span元素&lt;/span-'</span>);<br></code></pre></td></tr></table></figure>

<a id="more"></a>

<h3 id="添加节点"><a href="#添加节点" class="headerlink" title="添加节点"></a>添加节点</h3><figure class="hljs highlight javascript"><table><tr><td class="code"><pre><code class="hljs javascript">append  appendTo	在被选元素的结尾插入内容<br>prepend prependTo	在被选元素的开头插入内容<br>before				在被选元素之后插入内容<br>after				在被选元素之前插入内容<br></code></pre></td></tr></table></figure>

<h3 id="清空节点与删除节点"><a href="#清空节点与删除节点" class="headerlink" title="清空节点与删除节点"></a>清空节点与删除节点</h3><ul>
<li>empty：清空指定节点的所有元素，自身保留(清理门户)</li>
</ul>
<figure class="hljs highlight javascript"><table><tr><td class="code"><pre><code class="hljs javascript">$(<span class="hljs-string">'div'</span>).empty(); <span class="hljs-comment">// 清空div的所有内容（推荐使用，会清除子元素上绑定的内容，源码）</span><br>$(<span class="hljs-string">'div'</span>).html(<span class="hljs-string">''</span>);<span class="hljs-comment">// 使用html方法来清空元素，不推荐使用，会造成内存泄漏，绑定的事件不会被清除。</span><br></code></pre></td></tr></table></figure>

<ul>
<li>remove：相比于empty，自身也删除（自杀）</li>
</ul>
<figure class="hljs highlight javascript"><table><tr><td class="code"><pre><code class="hljs javascript">$(<span class="hljs-string">'div'</span>).remove();<br></code></pre></td></tr></table></figure>

<h3 id="克隆节点"><a href="#克隆节点" class="headerlink" title="克隆节点"></a>克隆节点</h3><ul>
<li>作用：复制匹配的元素</li>
</ul>
<figure class="hljs highlight javascript"><table><tr><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// 复制$(selector)所匹配到的元素（深度复制）</span><br><span class="hljs-comment">// cloneNode(true)</span><br><span class="hljs-comment">// 返回值为复制的新元素，和原来的元素没有任何关系了。即修改新元素，不会影响到原来的元素。</span><br>$(selector).clone();<br></code></pre></td></tr></table></figure>

<h2 id="jQuery操作属性"><a href="#jQuery操作属性" class="headerlink" title="jQuery操作属性"></a>jQuery操作属性</h2><h3 id="attr操作"><a href="#attr操作" class="headerlink" title="attr操作"></a>attr操作</h3><ul>
<li>设置单个属性</li>
</ul>
<figure class="hljs highlight javascript"><table><tr><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// 第一个参数：需要设置的属性名</span><br><span class="hljs-comment">// 第二个参数：对应的属性值</span><br>$obj.attr(name, value);<br><span class="hljs-comment">// 用法举例</span><br>$(<span class="hljs-string">'img'</span>).attr(<span class="hljs-string">'title'</span>,<span class="hljs-string">'哎哟，不错哦'</span>);<br>$(<span class="hljs-string">'img'</span>).attr(<span class="hljs-string">'alt'</span>,<span class="hljs-string">'哎哟，不错哦'</span>);<br></code></pre></td></tr></table></figure>

<ul>
<li>设置多个属性</li>
</ul>
<figure class="hljs highlight javascript"><table><tr><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// 参数是一个对象，包含了需要设置的属性名和属性值</span><br>$obj.attr(obj)<br><span class="hljs-comment">// 用法举例</span><br>$(<span class="hljs-string">'img'</span>).attr(&#123;<br>    <span class="hljs-attr">title</span>:<span class="hljs-string">'哎哟，不错哦'</span>,<br>    <span class="hljs-attr">alt</span>:<span class="hljs-string">'哎哟，不错哦'</span>,<br>    <span class="hljs-attr">style</span>:<span class="hljs-string">'opacity:.5'</span><br>&#125;);<br></code></pre></td></tr></table></figure>

<ul>
<li>获取属性</li>
</ul>
<figure class="hljs highlight javascript"><table><tr><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// 传需要获取的属性名称，返回对应的属性值</span><br>$obj.attr(name)<br><span class="hljs-comment">// 用法举例</span><br><span class="hljs-keyword">var</span> oTitle = $(<span class="hljs-string">'img'</span>).attr(<span class="hljs-string">'title'</span>);<br>alert(oTitle);<br></code></pre></td></tr></table></figure>

<ul>
<li>移除属性</li>
</ul>
<figure class="hljs highlight javascript"><table><tr><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// 参数：需要移除的属性名，</span><br>$obj.removeAttr(name);<br><span class="hljs-comment">// 用法举例</span><br>$(<span class="hljs-string">'img'</span>).removeAttr(<span class="hljs-string">'title'</span>);<br></code></pre></td></tr></table></figure>

<h3 id="prop操作"><a href="#prop操作" class="headerlink" title="prop操作"></a>prop操作</h3><ul>
<li>在jQuery1.6之后，对于checked、selected、disabled这类boolean类型的属性来说，不能用attr方法，只能用prop方法。</li>
</ul>
<figure class="hljs highlight javascript"><table><tr><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// 设置属性</span><br>$(<span class="hljs-string">':checked'</span>).prop(<span class="hljs-string">'checked'</span>,<span class="hljs-literal">true</span>);<br><span class="hljs-comment">// 获取属性</span><br>$(<span class="hljs-string">':checked'</span>).prop(<span class="hljs-string">'checked'</span>);<span class="hljs-comment">// 返回true或者false</span><br></code></pre></td></tr></table></figure>

<h3 id="val-text-html"><a href="#val-text-html" class="headerlink" title="val()/text/()html()"></a>val()/text/()html()</h3><figure class="hljs highlight javascript"><table><tr><td class="code"><pre><code class="hljs javascript">$obj.val()		获取或者设置表单元素的value属性的值<br>$obj.html() 	对应innerHTML<br>$obj.text()		对应innerText/textContent，处理了浏览器的兼容性<br></code></pre></td></tr></table></figure>

<h2 id="jQuery尺寸和位置操作"><a href="#jQuery尺寸和位置操作" class="headerlink" title="jQuery尺寸和位置操作"></a>jQuery尺寸和位置操作</h2><h3 id="width方法与height方法"><a href="#width方法与height方法" class="headerlink" title="width方法与height方法"></a>width方法与height方法</h3><ul>
<li>设置或者获取高度，不包括内边距、边框和外边距</li>
</ul>
<figure class="hljs highlight javascript"><table><tr><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// 带参数表示设置高度</span><br>$(<span class="hljs-string">'img'</span>).height(<span class="hljs-number">200</span>);<br><span class="hljs-comment">// 不带参数获取高度</span><br>$(<span class="hljs-string">'img'</span>).height();<br></code></pre></td></tr></table></figure>

<p>获取网页的可视区宽高</p>
<figure class="hljs highlight javascript"><table><tr><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// 获取可视区宽度</span><br>$(<span class="hljs-built_in">window</span>).width();<br><span class="hljs-comment">// 获取可视区高度</span><br>$(<span class="hljs-built_in">window</span>).height();<br></code></pre></td></tr></table></figure>

<h3 id="innerWidth-innerHeight-outerWidth-outerHeight"><a href="#innerWidth-innerHeight-outerWidth-outerHeight" class="headerlink" title="innerWidth/innerHeight/outerWidth/outerHeight"></a><code>innerWidth</code>/<code>innerHeight</code>/<code>outerWidth</code>/<code>outerHeight</code></h3><figure class="hljs highlight javascript"><table><tr><td class="code"><pre><code class="hljs javascript">innerWidth()/innerHeight()	方法返回元素的宽度/高度（包括内边距）。<br>outerWidth()/outerHeight()  方法返回元素的宽度/高度（包括内边距和边框）。<br>outerWidth(<span class="hljs-literal">true</span>)/outerHeight(<span class="hljs-literal">true</span>)  方法返回元素的宽度/高度（包括内边距、边框和外边距）。<br></code></pre></td></tr></table></figure>

<h3 id="scrollTop与scrollLeft"><a href="#scrollTop与scrollLeft" class="headerlink" title="scrollTop与scrollLeft"></a><code>scrollTop</code>与<code>scrollLeft</code></h3><ul>
<li>设置或者获取垂直滚动条的位置</li>
</ul>
<figure class="hljs highlight javascript"><table><tr><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// 获取页面被卷曲的高度</span><br>$(<span class="hljs-built_in">window</span>).scrollTop();<br><span class="hljs-comment">// 获取页面被卷曲的宽度</span><br>$(<span class="hljs-built_in">window</span>).scrollLeft();<br></code></pre></td></tr></table></figure>

<h3 id="offset方法与position方法"><a href="#offset方法与position方法" class="headerlink" title="offset方法与position方法"></a>offset方法与position方法</h3><ul>
<li>offset方法获取元素距离document的位置，position方法获取的是元素距离有定位的父元素(<code>offsetParent</code>)的位置。</li>
</ul>
<figure class="hljs highlight javascript"><table><tr><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// 获取元素距离document的位置,返回值为对象：&#123;left:100, top:100&#125;</span><br>$(selector).offset();<br><span class="hljs-comment">// 获取相对于其最近的有定位的父元素的位置。</span><br>$(selector).position();<br></code></pre></td></tr></table></figure>

<p>案例：固定导航栏   [17-固定导航栏<code>.html</code>]<br>案例：电梯导航     [18-电梯导航<code>.html</code>]</p>
<h2 id="jQuery事件机制"><a href="#jQuery事件机制" class="headerlink" title="jQuery事件机制"></a><code>jQuery</code>事件机制</h2><ul>
<li>JavaScript中已经学习过了事件，<code>jQuery</code>对JavaScript事件进行了封装，增加并扩展了事件处理机制。<code>jQuery</code>不仅提供了更加优雅的事件处理语法，而且极大的增强了事件的处理能力。</li>
</ul>
<h3 id="jQuery事件发展历程-了解"><a href="#jQuery事件发展历程-了解" class="headerlink" title="jQuery事件发展历程(了解)"></a><code>jQuery</code>事件发展历程(了解)</h3><p>简单事件绑定–bind事件绑定–delegate事件绑定–on事件绑定(推荐)</p>
<ul>
<li>简单事件注册</li>
</ul>
<figure class="hljs highlight javascript"><table><tr><td class="code"><pre><code class="hljs javascript">click(handler)			单击事件<br>mouseenter(handler)		鼠标进入事件<br>mouseleave(handler)		鼠标离开事件<br></code></pre></td></tr></table></figure>

<p>缺点：不能同时注册多个事件</p>
<ul>
<li>bind方式注册事件</li>
</ul>
<figure class="hljs highlight javascript"><table><tr><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// 第一个参数：事件类型</span><br><span class="hljs-comment">// 第二个参数：事件处理程序</span><br>$(<span class="hljs-string">'p'</span>).bind(<span class="hljs-string">'click mouseenter'</span>, <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;<br>    <span class="hljs-comment">// 事件响应方法</span><br>&#125;);<br></code></pre></td></tr></table></figure>

<p>缺点：不支持动态事件绑定</p>
<ul>
<li>delegate注册委托事件</li>
</ul>
<figure class="hljs highlight javascript"><table><tr><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// 第一个参数：selector，要绑定事件的元素</span><br><span class="hljs-comment">// 第二个参数：事件类型</span><br><span class="hljs-comment">// 第三个参数：事件处理函数</span><br>$(<span class="hljs-string">'.parentBox'</span>).delegate(<span class="hljs-string">'p'</span>, <span class="hljs-string">'click'</span>, <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;<br>    <span class="hljs-comment">// 为 .parentBox下面的所有的p标签绑定事件</span><br>&#125;);<br></code></pre></td></tr></table></figure>

<p>缺点：只能注册委托事件，因此注册时间需要记得方法太多了</p>
<ul>
<li>on注册事件</li>
</ul>
<h3 id="on注册事件-重点"><a href="#on注册事件-重点" class="headerlink" title="on注册事件(重点)"></a>on注册事件(重点)</h3><ul>
<li><code>jQuery1.7</code>之后，<code>jQuery</code>用on统一了所有事件的处理方法。</li>
<li>最现代的方式，兼容<code>zepto</code>(移动端类似<code>jQuery</code>的一个库)，强烈建议使用。</li>
</ul>
<p>on注册简单事件</p>
<figure class="hljs highlight javascript"><table><tr><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// 表示给$(selector)绑定事件，并且由自己触发，不支持动态绑定。</span><br>$(selector).on( <span class="hljs-string">'click'</span>, <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>&#123;&#125;);<br></code></pre></td></tr></table></figure>

<p>on注册事件委托</p>
<figure class="hljs highlight javascript"><table><tr><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// 表示给$(selector)绑定代理事件，当必须是它的内部元素span才能触发这个事件，支持动态绑定</span><br>$(selector).on( <span class="hljs-string">'click'</span>,<span class="hljs-string">'span'</span>, <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>&#123;&#125;);<br></code></pre></td></tr></table></figure>

<p>事件委托原理</p>
<figure class="hljs highlight javascript"><table><tr><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// 事件委托的原理</span><br><span class="hljs-keyword">var</span> ul = <span class="hljs-built_in">document</span>.querySelector(<span class="hljs-string">'#ul'</span>);<br>ul.onclick = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">e</span>) </span>&#123;<br>  <span class="hljs-comment">// console.log(e.target.tagName);</span><br>  <span class="hljs-keyword">if</span> (e.target.tagName.toLowerCase() === <span class="hljs-string">'li'</span>) &#123;<br>    <span class="hljs-built_in">console</span>.log(e.target);<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure>

<p>on注册事件的语法：</p>
<figure class="hljs highlight javascript"><table><tr><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// 第一个参数：events，绑定事件的名称可以是由空格分隔的多个事件（标准事件或者自定义事件）</span><br><span class="hljs-comment">// 第二个参数：selector, 执行事件的后代元素（可选），如果没有后代元素，那么事件将有自己执行。</span><br><span class="hljs-comment">// 第三个参数：data，传递给处理函数的数据，事件触发的时候通过event.data来使用（不常使用）</span><br><span class="hljs-comment">// 第四个参数：handler，事件处理函数</span><br>$(selector).on(events[,selector][,data],handler);<br></code></pre></td></tr></table></figure>

<ul>
<li>通过源码查看 bind click delegate on 注册事件的区别</li>
</ul>
<h3 id="事件解绑"><a href="#事件解绑" class="headerlink" title="事件解绑"></a>事件解绑</h3><ul>
<li>unbind方式（不用）</li>
</ul>
<figure class="hljs highlight javascript"><table><tr><td class="code"><pre><code class="hljs javascript">$(selector).unbind(); <span class="hljs-comment">// 解绑所有的事件</span><br>$(selector).unbind(<span class="hljs-string">'click'</span>); <span class="hljs-comment">// 解绑指定的事件</span><br></code></pre></td></tr></table></figure>

<ul>
<li><code>undelegate</code>方式（不用）</li>
</ul>
<figure class="hljs highlight javascript"><table><tr><td class="code"><pre><code class="hljs javascript">$( selector ).undelegate(); <span class="hljs-comment">// 解绑所有的delegate事件</span><br>$( selector).undelegate( <span class="hljs-string">'click'</span> ); <span class="hljs-comment">// 解绑所有的click事件</span><br></code></pre></td></tr></table></figure>

<ul>
<li>off方式（推荐）</li>
</ul>
<figure class="hljs highlight javascript"><table><tr><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// 解绑匹配元素的所有事件</span><br>$(selector).off();<br><span class="hljs-comment">// 解绑匹配元素的所有click事件</span><br>$(selector).off(<span class="hljs-string">'click'</span>);<br></code></pre></td></tr></table></figure>

<h3 id="触发事件"><a href="#触发事件" class="headerlink" title="触发事件"></a>触发事件</h3><figure class="hljs highlight javascript"><table><tr><td class="code"><pre><code class="hljs javascript">$(selector).click(); <span class="hljs-comment">// 触发 click事件</span><br>$(selector).trigger(<span class="hljs-string">'click'</span>);<br></code></pre></td></tr></table></figure>

<h3 id="jQuery事件对象"><a href="#jQuery事件对象" class="headerlink" title="jQuery事件对象"></a><code>jQuery</code>事件对象</h3><p><code>jQuery</code>事件对象其实就是<code>js</code>事件对象的一个封装，处理了兼容性。</p>
<figure class="hljs highlight javascript"><table><tr><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// screenX和screenY	对应屏幕最左上角的值</span><br><span class="hljs-comment">// clientX和clientY	距离页面左上角的位置（忽视滚动条）</span><br><span class="hljs-comment">// pageX和pageY	距离页面最顶部的左上角的位置（会计算滚动条的距离）</span><br><br><span class="hljs-comment">// event.keyCode	按下的键盘代码</span><br><span class="hljs-comment">// event.data	存储绑定事件时传递的附加数据</span><br><br><span class="hljs-comment">// event.stopPropagation()	阻止事件冒泡行为</span><br><span class="hljs-comment">// event.preventDefault()	阻止浏览器默认行为</span><br><span class="hljs-comment">// return false:既能阻止事件冒泡，又能阻止浏览器默认行为。</span><br></code></pre></td></tr></table></figure>

<h3 id="案例"><a href="#案例" class="headerlink" title="案例"></a>案例</h3><ul>
<li>按键变色 [19-按键变色<code>.html</code>]</li>
</ul>
<h2 id="jQuery补充知识点"><a href="#jQuery补充知识点" class="headerlink" title="jQuery补充知识点"></a><code>jQuery</code>补充知识点</h2><h3 id="链式编程"><a href="#链式编程" class="headerlink" title="链式编程"></a>链式编程</h3><ul>
<li>通常情况下，只有设置操作才能把链式编程延续下去。因为获取操作的时候，会返回获取到的相应的值，无法返回 <code>jQuery</code>对象。</li>
</ul>
<figure class="hljs highlight javascript"><table><tr><td class="code"><pre><code class="hljs javascript">end(); <span class="hljs-comment">// 筛选选择器会改变jQuery对象的DOM对象，想要回复到上一次的状态，并且返回匹配元素之前的状态。</span><br></code></pre></td></tr></table></figure>

<h3 id="each方法"><a href="#each方法" class="headerlink" title="each方法"></a>each方法</h3><ul>
<li><code>jQuery</code>的隐式迭代会对所有的DOM对象设置相同的值，但是如果我们需要给每一个对象设置不同的值的时候，就需要自己进行迭代了。</li>
</ul>
<p>作用：遍历<code>jQuery</code>对象集合，为每个匹配的元素执行一个函数</p>
<figure class="hljs highlight javascript"><table><tr><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// 参数一表示当前元素在所有匹配元素中的索引号</span><br><span class="hljs-comment">// 参数二表示当前元素（DOM对象）</span><br>$(selector).each(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">index,element</span>)</span>&#123;&#125;);<br></code></pre></td></tr></table></figure>

<h3 id="多库共存"><a href="#多库共存" class="headerlink" title="多库共存"></a>多库共存</h3><ul>
<li><code>jQuery</code>使用$作为标示符，但是如果与其他框架中的$冲突时，<code>jQuery</code>可以释放$符的控制权.</li>
</ul>
<figure class="hljs highlight javascript"><table><tr><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> c = $.noConflict();<span class="hljs-comment">// 释放$的控制权,并且把$的能力给了c</span><br></code></pre></td></tr></table></figure>

<h2 id="插件"><a href="#插件" class="headerlink" title="插件"></a>插件</h2><h3 id="常用插件"><a href="#常用插件" class="headerlink" title="常用插件"></a>常用插件</h3><ul>
<li>弹出层插件 layer<ul>
<li><a href="https://github.com/sentsin/layer" target="_blank" rel="noopener">layer插件</a></li>
</ul>
</li>
<li>放大镜插件<ul>
<li><a href="http://www.jacklmoore.com/zoom/" target="_blank" rel="noopener">jQuery.zoom</a></li>
</ul>
</li>
<li>轮播图插件<ul>
<li><a href="http://sorgalla.com/jcarousel/" target="_blank" rel="noopener">http://sorgalla.com/jcarousel/</a></li>
<li><a href="https://github.com/OwlCarousel2/OwlCarousel2" target="_blank" rel="noopener">https://github.com/OwlCarousel2/OwlCarousel2</a></li>
</ul>
</li>
<li>图片懒加载插件<ul>
<li><a href="https://github.com/tuupola/jquery_lazyload" target="_blank" rel="noopener">jQuery.lazyload</a></li>
</ul>
</li>
</ul>
<h3 id="自己探索插件"><a href="#自己探索插件" class="headerlink" title="自己探索插件"></a>自己探索插件</h3><ul>
<li><a href="https://github.com/aui/artDialog" target="_blank" rel="noopener">artDialog</a></li>
<li><a href="https://github.com/fat/zoom.js" target="_blank" rel="noopener">图片放大</a></li>
<li><a href="http://www.github.com" target="_blank" rel="noopener">github上搜索</a></li>
</ul>
<h2 id="jQuery插件开发"><a href="#jQuery插件开发" class="headerlink" title="jQuery插件开发"></a><code>jQuery</code>插件开发</h2><ul>
<li>给<code>jQuery</code>增加方法的两种方式</li>
</ul>
<figure class="hljs highlight javascript"><table><tr><td class="code"><pre><code class="hljs javascript">$.method = fn		静态方法<br>$.fn.method = fn	实例方法<br></code></pre></td></tr></table></figure>

<ul>
<li>增加一个静态方法，实现两个数的和，插件</li>
</ul>
<figure class="hljs highlight javascript"><table><tr><td class="code"><pre><code class="hljs javascript">(<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">$</span>) </span>&#123;<br>  $.add = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">a, b</span>) </span>&#123;<br>    <span class="hljs-keyword">return</span> a + b;<br>  &#125;<br>&#125;(jQuery))<br><br>$.add(<span class="hljs-number">5</span>, <span class="hljs-number">6</span>);<br></code></pre></td></tr></table></figure>

<ul>
<li>tab栏插件 [21-tab栏插件.html]</li>
</ul>
<figure class="hljs highlight javascript"><table><tr><td class="code"><pre><code class="hljs javascript">(<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">$</span>) </span>&#123;<br>  <span class="hljs-comment">// &#123;tabMenu: '#aa'&#125;</span><br>  $.tab = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">options</span>) </span>&#123;<br>    <span class="hljs-comment">// 默认参数</span><br>    <span class="hljs-keyword">var</span> defaults = &#123;<br>      <span class="hljs-attr">tabMenu</span>: <span class="hljs-string">'#tab'</span>,<br>      <span class="hljs-attr">activeClass</span>: <span class="hljs-string">'active'</span>,<br>      <span class="hljs-attr">tabMain</span>: <span class="hljs-string">'#tab-main'</span>,<br>      <span class="hljs-attr">tabMainSub</span>: <span class="hljs-string">'.main'</span>,<br>      <span class="hljs-attr">selectedClass</span>: <span class="hljs-string">'selected'</span><br>    &#125;<br>    <span class="hljs-comment">// 把options中的属性，把对应属性的值赋给defaults对应的属性</span><br>    <span class="hljs-comment">// defaults.tabMenu = options.tabMenu || defaults.tabMenu;</span><br>    <span class="hljs-comment">// for(var key in options) &#123;</span><br>    <span class="hljs-comment">//   defaults[key] = options[key];</span><br>    <span class="hljs-comment">// &#125;</span><br>    $.extend(defaults, options);<br><br>    $(defaults.tabMenu).on(<span class="hljs-string">'click'</span>, <span class="hljs-string">'li'</span>, <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<br>      $(<span class="hljs-keyword">this</span>)<br>        .addClass(defaults.activeClass)<br>        .siblings()<br>        .removeClass(defaults.activeClass);<br><br>      <span class="hljs-comment">//</span><br>      <span class="hljs-keyword">var</span> index = $(<span class="hljs-keyword">this</span>).index();<br>      <span class="hljs-comment">//</span><br>      $(defaults.tabMain + <span class="hljs-string">' '</span> + defaults.tabMainSub)<br>        .eq(index)<br>        .addClass(defaults.selectedClass)<br>        .siblings()<br>        .removeClass(defaults.selectedClass);<br>    &#125;)<br>  &#125;<br>&#125;(<span class="hljs-built_in">window</span>.jQuery))<br></code></pre></td></tr></table></figure>

<ul>
<li>表格插件  [22-表格插件<code>.html</code>]</li>
</ul>
<figure class="hljs highlight javascript"><table><tr><td class="code"><pre><code class="hljs javascript">(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">$</span>) </span>&#123;<br>  <span class="hljs-comment">// 内部的变量，外部无法访问，防止变量名冲突</span><br>  <span class="hljs-keyword">var</span> a = <span class="hljs-number">0</span>;<br>  <span class="hljs-comment">// 给$增加了一个实例方法</span><br>  $.fn.table = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">header, data</span>) </span>&#123;<br>    <span class="hljs-keyword">var</span> array = [];<br>    array.push(<span class="hljs-string">'&lt;table&gt;'</span>);<br>    array.push(<span class="hljs-string">'&lt;tr&gt;'</span>);<br><br>    <span class="hljs-comment">// 生成表头</span><br>    $.each(header, <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<br>      array.push(<span class="hljs-string">'&lt;th&gt;'</span> + <span class="hljs-keyword">this</span> + <span class="hljs-string">'&lt;/th&gt;'</span>);<br>    &#125;)<br>    array.push(<span class="hljs-string">'&lt;/tr&gt;'</span>);<br><br><br>    <span class="hljs-comment">// 生成数据行</span><br>    $.each(data, <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">index</span>) </span>&#123;<br>      <span class="hljs-comment">// this是当前遍历到的数组中的每一个对象</span><br>      <span class="hljs-comment">// 拼数据行</span><br>      array.push(<span class="hljs-string">'&lt;tr&gt;'</span>);<br>      array.push(<span class="hljs-string">'&lt;td&gt;'</span> + (index + <span class="hljs-number">1</span>) + <span class="hljs-string">'&lt;/td&gt;'</span>);<br><br>      <span class="hljs-comment">// 遍历对象，拼表格</span><br>      <span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> key <span class="hljs-keyword">in</span> <span class="hljs-keyword">this</span>) &#123;<br>        array.push(<span class="hljs-string">'&lt;td&gt;'</span> + <span class="hljs-keyword">this</span>[key] + <span class="hljs-string">'&lt;/td&gt;'</span>);<br>      &#125;<br><br>      array.push(<span class="hljs-string">'&lt;/tr&gt;'</span>);<br>    &#125;)<br>    array.push(<span class="hljs-string">'&lt;/table&gt;'</span>);<br><br>    <span class="hljs-keyword">this</span>.append(array.join(<span class="hljs-string">''</span>));<br>  &#125;<br><br>&#125;(<span class="hljs-built_in">window</span>.jQuery))<br></code></pre></td></tr></table></figure>

<ul>
<li>插件开发的原理</li>
</ul>
]]></content>
      <categories>
        <category>前端</category>
        <category>JQuery</category>
      </categories>
      <tags>
        <tag>javaScript</tag>
        <tag>jQuery</tag>
      </tags>
  </entry>
  <entry>
    <title>Js中的Array类型总结</title>
    <url>/2019/10/28/2019-10-28-Array/</url>
    <content><![CDATA[<h1 id="Js中的Array类型"><a href="#Js中的Array类型" class="headerlink" title="Js中的Array类型"></a>Js中的Array类型</h1><p>序：除了Object类型之外，Array类型恐怕是ECAMAScript中最常用的类型了，特点：有序列表，并且数组的每一项都可以保存任意数据类型的数据，数组的大小可以动态的调整。</p>
<h2 id="创建数组的方式"><a href="#创建数组的方式" class="headerlink" title="创建数组的方式"></a>创建数组的方式</h2><h3 id="第一种"><a href="#第一种" class="headerlink" title="第一种"></a>第一种</h3><p>使用Array构造函数:</p>
<figure class="hljs highlight javascript"><table><tr><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> arr = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Array</span>();<br></code></pre></td></tr></table></figure>

<ol>
<li>如果预先知道数组保存项的数量，可以给数组传递数量</li>
</ol>
<figure class="hljs highlight javascript"><table><tr><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> arr = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Array</span>(<span class="hljs-number">20</span>);  <span class="hljs-comment">//创建数组项数为20的数组</span><br></code></pre></td></tr></table></figure>

<p>2.直接 向数组传递要传入的值</p>
<figure class="hljs highlight javascript"><table><tr><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> arr = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Array</span>(<span class="hljs-string">"1"</span>,<span class="hljs-string">"2"</span>);<br></code></pre></td></tr></table></figure>

<h3 id="第二种"><a href="#第二种" class="headerlink" title="第二种"></a>第二种</h3><a id="more"></a>

<p>在实际开发中通常使用数组字面量法</p>
<figure class="hljs highlight javascript"><table><tr><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> colors = [<span class="hljs-string">"green"</span>,<span class="hljs-string">"red"</span>,<span class="hljs-string">"blue"</span>];<br><span class="hljs-keyword">var</span> colors = []; <span class="hljs-comment">//空数组</span><br></code></pre></td></tr></table></figure>

<p><strong>数组的<code>length</code>很有特点，它不是只读的，我们可以直接控制数组的<code>length</code>值，控制数组的末尾移除项或者添加新项</strong></p>
<figure class="hljs highlight javascript"><table><tr><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> colors = [<span class="hljs-string">"green"</span>,<span class="hljs-string">"red"</span>,<span class="hljs-string">"blue"</span>];<br>colors.length = <span class="hljs-number">4</span>;<br><span class="hljs-built_in">console</span>.log(colors[<span class="hljs-number">3</span>]); <span class="hljs-comment">//undefined</span><br></code></pre></td></tr></table></figure>

<p>由于将colors的length值增加了1，所以当我们访问到3号索引，数组动态的添加了undefined值</p>
<h2 id="数组中的方法"><a href="#数组中的方法" class="headerlink" title="数组中的方法"></a>数组中的方法</h2><h3 id="find"><a href="#find" class="headerlink" title="find()"></a><code>find()</code></h3><p>用于找出第一个符合条件的数组成员，它的参数是一个回调函数，所有数组成员依次执行该回调函数，直到找出第一个返回值为<code>true</code>的成员，然后返回该成员。如果没有符合条件的成员，则返回<code>undefined</code></p>
<figure class="hljs highlight javascript"><table><tr><td class="code"><pre><code class="hljs javascript">[<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">-4</span>,<span class="hljs-number">8</span>].find(<span class="hljs-function"><span class="hljs-params">n</span> =&gt;</span> n &lt; <span class="hljs-number">0</span>)<span class="hljs-comment">//-4</span><br></code></pre></td></tr></table></figure>

<h3 id="includes"><a href="#includes" class="headerlink" title="includes()"></a><code>includes()</code></h3><p><code>Array.prototype.includes</code>方法返回一个布尔值，表示某个数组是否包含给定的值，与字符串的<code>includes</code>方法类似。</p>
<figure class="hljs highlight javascript"><table><tr><td class="code"><pre><code class="hljs javascript">[<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>].includes(<span class="hljs-number">2</span>)     <span class="hljs-comment">// true</span><br>[<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>].includes(<span class="hljs-number">4</span>)     <span class="hljs-comment">// false</span><br>[<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-literal">NaN</span>].includes(<span class="hljs-literal">NaN</span>) <span class="hljs-comment">// true</span><br></code></pre></td></tr></table></figure>

<h3 id="检测方法"><a href="#检测方法" class="headerlink" title="检测方法"></a>检测方法</h3><figure class="hljs highlight javascript"><table><tr><td class="code"><pre><code class="hljs javascript"><span class="hljs-built_in">Array</span>.isArray([<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>]); <span class="hljs-comment">//true</span><br><span class="hljs-built_in">Array</span>.isarray(&#123;<span class="hljs-attr">foo</span>:<span class="hljs-number">123</span>&#125;)<span class="hljs-comment">// false</span><br></code></pre></td></tr></table></figure>

<h3 id="转换方法"><a href="#转换方法" class="headerlink" title="转换方法"></a>转换方法</h3><p>转换方法一共有三种<code>tostring()</code>、<code>tolocaleString()</code>、<code>valueOf()</code>作用返回数组中的每个值的字符串形式拼接而成的一个以逗号分隔的字符串</p>
<figure class="hljs highlight javascript"><table><tr><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> arr = [<span class="hljs-string">'liu'</span>, <span class="hljs-string">'xiao'</span>, <span class="hljs-string">'jun'</span>]<br><span class="hljs-built_in">console</span>.log(arr.valueOf()) <span class="hljs-comment">//返回数组本身</span><br><span class="hljs-built_in">console</span>.log(arr.toString()) <span class="hljs-comment">// 把数组转为字符串，并返回结果，每一项以逗号分割</span><br><span class="hljs-built_in">console</span>.log(arr.toLocaleString()) <span class="hljs-comment">//数组转为本字符串</span><br><span class="hljs-comment">// [ 'liu', 'xiao', 'jun' ]</span><br><span class="hljs-comment">// liu,xiao,jun</span><br><span class="hljs-comment">// liu,xiao,jun</span><br></code></pre></td></tr></table></figure>

<p><code>join()</code>方法则可以使用不同的分隔符来构建字符串</p>
<figure class="hljs highlight javascript"><table><tr><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> colors = [<span class="hljs-string">"green"</span>,<span class="hljs-string">"red"</span>,<span class="hljs-string">"blue"</span>];<br>alert(colors.join(<span class="hljs-string">"||"</span>)); <span class="hljs-comment">//green||red||blue</span><br>alert(colors.join(<span class="hljs-string">":"</span>));<span class="hljs-comment">//geren:red:blue</span><br></code></pre></td></tr></table></figure>

<p><em>如果数组中的某一项为null或undefined，那么以上方法返回的结果中以空字符串表示</em></p>
<h3 id="栈方法（后进先出）"><a href="#栈方法（后进先出）" class="headerlink" title="栈方法（后进先出）"></a>栈方法（后进先出）</h3><p>ECMAScript中数组也提供了让数组的行为类似于其它数据结构的方法</p>
<p><code>push()</code>方法：接收任意数量的值，将他们逐个添加到数组末尾</p>
<p><code>pop()</code>方法:删除数组末尾最后一项，减少length值</p>
<h3 id="队列方法（先进先出）"><a href="#队列方法（先进先出）" class="headerlink" title="队列方法（先进先出）"></a>队列方法（先进先出）</h3><p><code>unshift()</code>方法：从数组前端添加任意项</p>
<p><code>shift()</code>方法：从数组前端减少任意项</p>
<h3 id="重排序方法"><a href="#重排序方法" class="headerlink" title="重排序方法"></a>重排序方法</h3><h4 id="reverse-方法：会反转数组的顺序"><a href="#reverse-方法：会反转数组的顺序" class="headerlink" title="reverse()方法：会反转数组的顺序"></a><code>reverse()</code>方法：会反转数组的顺序</h4><figure class="hljs highlight javascript"><table><tr><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> arr = [<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>];<br>alert(arr.reverse()); <span class="hljs-comment">//5,4,3,2,1</span><br></code></pre></td></tr></table></figure>

<h4 id="sort-方法"><a href="#sort-方法" class="headerlink" title="sort()方法"></a><code>sort()</code>方法</h4><p><code>sort()</code>以字母顺序排列数组，sort会调用每个数组的<code>toString()</code>方法，比较得到的字符串</p>
<figure class="hljs highlight javascript"><table><tr><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> arr = [<span class="hljs-number">0</span>,<span class="hljs-number">1</span>,<span class="hljs-number">5</span>,<span class="hljs-number">10</span>,<span class="hljs-number">15</span>];<br>arr.sort()<br><span class="hljs-built_in">console</span>.log(arr); <span class="hljs-comment">//0,1,10,15,5</span><br></code></pre></td></tr></table></figure>

<p>这种情况是数值5虽然小于10，但是字符串进行比较时却位于10的前面。这时可以使用一个比较函数</p>
<figure class="hljs highlight javascript"><table><tr><td class="code"><pre><code class="hljs javascript"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">compare</span>(<span class="hljs-params">value1,value2</span>) </span>&#123;<br>    <span class="hljs-keyword">if</span>(value1 &gt; value2) &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br>    &#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(varlue1 &lt; value2) &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>    &#125;<span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>    &#125;<br>&#125;<br>比较两个参数，如果第一个值在第二个值之后则返回<span class="hljs-number">-1</span>，如果在第二个值之前返回<span class="hljs-number">1</span>；<br>简化<br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">compare2</span>(<span class="hljs-params">a,b</span>) </span>&#123;<br>    <span class="hljs-keyword">return</span> a-b;<br>&#125;<br>arr.sort(compare2)<br></code></pre></td></tr></table></figure>

<h3 id="自定义排序"><a href="#自定义排序" class="headerlink" title="自定义排序"></a>自定义排序</h3><p>我们可以对任何对象类型的数组排序，也可以创建compareFunction来比较元素。例如对象的名字和年龄排序</p>
<figure class="hljs highlight javascript"><table><tr><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> friends = [<br>  &#123; <span class="hljs-attr">name</span>: <span class="hljs-string">'John'</span>, <span class="hljs-attr">age</span>: <span class="hljs-number">30</span>&#125;,<br>  &#123; <span class="hljs-attr">name</span>: <span class="hljs-string">'Ana'</span>, <span class="hljs-attr">age</span>: <span class="hljs-number">20</span>&#125;,<br>  &#123; <span class="hljs-attr">name</span>: <span class="hljs-string">'Chris'</span>, <span class="hljs-attr">age</span>: <span class="hljs-number">25</span>&#125;,<br>]<br><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">comparePerson</span>(<span class="hljs-params">a, b</span>) </span>&#123;<br>  <span class="hljs-keyword">if</span> (a.age &gt; b.age) &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span><br>  &#125;<br>  <span class="hljs-keyword">if</span> (a.age &lt; b.age) &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">1</span><br>  &#125;<br>  <span class="hljs-keyword">return</span> <span class="hljs-number">0</span><br>&#125;<br><span class="hljs-comment">// 在b大于a时，这段代码会返回负数，反之则返回正数。如果相等的话，就会返回0。也就是说返回的是负数，就说明a比b小，这样sort就能根据返回值的情况对数组进行排序。</span><br><span class="hljs-built_in">console</span>.log(friends.sort(comparePerson))<br></code></pre></td></tr></table></figure>

<h3 id="操作方法"><a href="#操作方法" class="headerlink" title="操作方法"></a>操作方法</h3><h4 id="concat-方法"><a href="#concat-方法" class="headerlink" title="concat()方法"></a>concat()方法</h4><p><code>concat()</code>可以基于当前数组中的所有项来创建一个新数组。具体来说这个方法会创建当前数组的副本，然后将接收到的参数添加到数组末尾，最后返回到新创建的数组。</p>
<figure class="hljs highlight javascript"><table><tr><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> arr = [<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>];<br><span class="hljs-keyword">var</span> arr2 = arr.concat(<span class="hljs-number">5</span>,[<span class="hljs-number">6</span>,<span class="hljs-number">7</span>]);<br>alert(arr2); <span class="hljs-comment">//1,2,3,4,5,6,7;</span><br></code></pre></td></tr></table></figure>

<h4 id="slice-方法"><a href="#slice-方法" class="headerlink" title="slice()方法"></a><code>slice()</code>方法</h4><p>它能够基于当前数组中的一项或者多项创建新的数组（对数组进行截取），可以接收一个或两个参数</p>
<h5 id="一个参数时："><a href="#一个参数时：" class="headerlink" title="一个参数时："></a>一个参数时：</h5><p>截取参数位到末尾的所有项</p>
<figure class="hljs highlight javascript"><table><tr><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> colors = [<span class="hljs-string">"green"</span>,<span class="hljs-string">"red"</span>,<span class="hljs-string">"blue"</span>,<span class="hljs-string">"orange"</span>];<br><span class="hljs-keyword">var</span> result = colors.slice(<span class="hljs-number">2</span>);<br>alert(result) <span class="hljs-comment">//blue,orange</span><br></code></pre></td></tr></table></figure>

<h5 id="两个参数时："><a href="#两个参数时：" class="headerlink" title="两个参数时："></a>两个参数时：</h5><p>截取第一个参数位到第二个参数位之前一位的所有项</p>
<figure class="hljs highlight javascript"><table><tr><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> colors = [<span class="hljs-string">"green"</span>,<span class="hljs-string">"red"</span>,<span class="hljs-string">"blue"</span>,<span class="hljs-string">"orange"</span>];<br><span class="hljs-keyword">var</span> result = colors.slice(<span class="hljs-number">0</span>,<span class="hljs-number">2</span>);<br>alert(result) <span class="hljs-comment">//green red</span><br></code></pre></td></tr></table></figure>

<h4 id="splice-方法"><a href="#splice-方法" class="headerlink" title="splice()方法"></a><code>splice()</code>方法</h4><p><code>splice()</code>方法恐怕要算最强大的数组方法了，它有很多中用法</p>
<ul>
<li><p>删除：可以删除任意数组的项，输入两个参数，要删除的第一项位置和删除的个数</p>
<figure class="hljs highlight javascript"><table><tr><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> colors = [<span class="hljs-string">"red"</span>,<span class="hljs-string">"green"</span>,<span class="hljs-string">"blue"</span>];<br>colors.splice(<span class="hljs-number">0</span>,<span class="hljs-number">1</span>); <span class="hljs-comment">//green,blue   第一个开始删除一个</span><br></code></pre></td></tr></table></figure>
</li>
<li><p>替换：在指定位置插入任意数量的项，且同时删除任意数量的项，三个参数：起始位置、要删除的个数、要插入的项</p>
<figure class="hljs highlight javascript"><table><tr><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> colors = [<span class="hljs-string">"red"</span>,<span class="hljs-string">"green"</span>,<span class="hljs-string">"blue"</span>];<br>colors.splice(<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-string">"red"</span>,<span class="hljs-string">"purple"</span>) <span class="hljs-comment">// 从第二哥开始删除一个，插入'red','purple'</span><br>alert(colors); <span class="hljs-comment">//red,red,purple,green,blue</span><br></code></pre></td></tr></table></figure>
</li>
<li><p>插入：在指定位置插入任意数量的项，三个参数：起始位置、0、插入的项</p>
<figure class="hljs highlight javascript"><table><tr><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">//插入可以理解为在替换过程中不删除数组的元素而直接添加元素，那么第二个参数便为0；</span><br><span class="hljs-keyword">var</span> colors = [<span class="hljs-string">"red"</span>,<span class="hljs-string">"green"</span>,<span class="hljs-string">"blue"</span>];<br>colors.splice(<span class="hljs-number">1</span>,<span class="hljs-number">0</span>,<span class="hljs-string">"orange"</span>); <span class="hljs-comment">// 从第二项开始，删除0个 ， 插入'orange'</span><br>alert(colors); <span class="hljs-comment">// red,green,orange,blue</span><br></code></pre></td></tr></table></figure>

<h3 id="位置方法"><a href="#位置方法" class="headerlink" title="位置方法"></a>位置方法</h3><p><code>indexOf()</code>和<code>lastIndexOf()</code>方法。一个从数组开头开始查找，一个从数组末尾开始查找</p>
<h4 id="一个参数时-参数为要查找的项"><a href="#一个参数时-参数为要查找的项" class="headerlink" title="一个参数时:参数为要查找的项"></a>一个参数时:参数为要查找的项</h4><figure class="hljs highlight actionscript"><table><tr><td class="code"><pre><code class="hljs undefined"><span class="hljs-keyword">var</span> fruits = [<span class="hljs-string">"banana"</span>,<span class="hljs-string">"apple"</span>,<span class="hljs-string">"mango"</span>,<span class="hljs-string">"orange"</span>,<span class="hljs-string">"apple"</span>];<br>fruits.indexOf(apple);<span class="hljs-comment">//0</span><br></code></pre></td></tr></table></figure>

<h4 id="两个参数时：参数为要查找的项，和起始位置，如果找不到返回-1"><a href="#两个参数时：参数为要查找的项，和起始位置，如果找不到返回-1" class="headerlink" title="两个参数时：参数为要查找的项，和起始位置，如果找不到返回-1"></a>两个参数时：参数为要查找的项，和起始位置，如果找不到返回-1</h4><figure class="hljs highlight javascript"><table><tr><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> fruits = [<span class="hljs-string">"banana"</span>,<span class="hljs-string">"apple"</span>,<span class="hljs-string">"mango"</span>,<span class="hljs-string">"orange"</span>,<span class="hljs-string">"apple"</span>];<br>fruits.indexOf(<span class="hljs-string">"apple"</span>,<span class="hljs-number">3</span>) <span class="hljs-comment">//4</span><br></code></pre></td></tr></table></figure>

<h3 id="迭代方法"><a href="#迭代方法" class="headerlink" title="迭代方法"></a>迭代方法</h3><h4 id="map-方法：对数组中的每一项进行给定函数，返回每次函数调用结果组成数组"><a href="#map-方法：对数组中的每一项进行给定函数，返回每次函数调用结果组成数组" class="headerlink" title="map()方法：对数组中的每一项进行给定函数，返回每次函数调用结果组成数组"></a><code>map()</code>方法：对数组中的每一项进行给定函数，返回每次函数调用结果组成数组</h4><figure class="hljs highlight javascript"><table><tr><td class="code"><pre><code class="hljs javascript">  <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">pow</span>(<span class="hljs-params">x</span>) </span>&#123;<br>      <span class="hljs-keyword">return</span> x*x;<br>  &#125;<br>  <span class="hljs-keyword">var</span> arr = [<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>,<span class="hljs-number">6</span>];<br>  <span class="hljs-keyword">var</span> result = arr.map(pow);<br>  alert(result); <span class="hljs-comment">//1,4,9,16,25,36</span><br>  <span class="hljs-comment">//将数组转为字符串</span><br>  <span class="hljs-keyword">var</span> result2 = arr.map(toString)<br>  alert(result2);<span class="hljs-comment">//"1","2","3","4","5","6"</span><br>  <span class="hljs-comment">// 提取对象数组中的值</span><br><span class="hljs-keyword">var</span> arr = [&#123;<span class="hljs-attr">name</span>:<span class="hljs-string">'li'</span>, <span class="hljs-attr">age</span>: <span class="hljs-number">13</span>, <span class="hljs-attr">sex</span>: <span class="hljs-number">1</span>&#125;, &#123;<span class="hljs-attr">name</span>: <span class="hljs-string">'wang'</span>, <span class="hljs-attr">age</span>: <span class="hljs-number">89</span>, <span class="hljs-attr">sex</span>: <span class="hljs-number">1</span>&#125;, &#123;<span class="hljs-attr">name</span>:<span class="hljs-string">'liu'</span>, <span class="hljs-attr">age</span>: <span class="hljs-number">17</span>, <span class="hljs-attr">sex</span>: <span class="hljs-number">2</span>&#125;]<br>  <span class="hljs-comment">// 提取arr 中的姓名形成一个新的数组</span><br><span class="hljs-keyword">var</span> arr2 = arr.map(<span class="hljs-function"><span class="hljs-params">item</span> =&gt;</span> item.name)<br>  <span class="hljs-built_in">console</span>.log(arr2)<br></code></pre></td></tr></table></figure>


</li>
</ul>
<h4 id="every-和some-方法"><a href="#every-和some-方法" class="headerlink" title="every()和some()方法"></a><code>every()</code>和<code>some()</code>方法</h4><p>  every方法会迭代数组中的每个元素，直到返回false</p>
  <figure class="hljs highlight javascript"><table><tr><td class="code"><pre><code class="hljs javascript"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">isEven</span>(<span class="hljs-params">x</span>) </span>&#123;<br>  <span class="hljs-comment">//如果x是2的倍数，就返回true</span><br>  <span class="hljs-built_in">console</span>.log(x)<br>  <span class="hljs-keyword">return</span> x % <span class="hljs-number">2</span> === <span class="hljs-number">0</span> ? <span class="hljs-literal">true</span> : <span class="hljs-literal">false</span><br>&#125;<br><span class="hljs-keyword">let</span> numbers = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>, <span class="hljs-number">6</span>, <span class="hljs-number">7</span>, <span class="hljs-number">8</span>, <span class="hljs-number">9</span>, <span class="hljs-number">9</span>, <span class="hljs-number">10</span>]<br>numbers.every(isEven) <span class="hljs-comment">// 1</span><br><span class="hljs-comment">// numbers第一项就为1不是2的倍数所以返回false</span><br></code></pre></td></tr></table></figure>


<p>  some方法会迭代数组的每个元素，知道返回true</p>
  <figure class="hljs highlight javascript"><table><tr><td class="code"><pre><code class="hljs javascript"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">isEven</span>(<span class="hljs-params">x</span>) </span>&#123;<br>  <span class="hljs-comment">//如果x是2的倍数，就返回true</span><br>  <span class="hljs-built_in">console</span>.log(x)<br>  <span class="hljs-keyword">return</span> x % <span class="hljs-number">2</span> === <span class="hljs-number">0</span> ? <span class="hljs-literal">true</span> : <span class="hljs-literal">false</span><br>&#125;<br><span class="hljs-keyword">let</span> numbers = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>, <span class="hljs-number">6</span>, <span class="hljs-number">7</span>, <span class="hljs-number">8</span>, <span class="hljs-number">9</span>, <span class="hljs-number">9</span>, <span class="hljs-number">10</span>]<br>numbers.some(isEven) <span class="hljs-comment">// 1 2</span><br></code></pre></td></tr></table></figure>




<h4 id="filter-方法"><a href="#filter-方法" class="headerlink" title="filter()方法"></a><code>filter()</code>方法</h4><p>  把传入的函数依次作用于每个元素，根据返回值是true还是false决定保留还是丢弃该元素</p>
  <figure class="hljs highlight javascript"><table><tr><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> numbers = [<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">5</span>,<span class="hljs-number">6</span>,<span class="hljs-number">3</span>]<br><span class="hljs-keyword">var</span> results = numbers.filter(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">items,index,array</span>) </span>&#123;<br>  <span class="hljs-keyword">return</span> (items &gt; <span class="hljs-number">2</span>);<br> &#125;)<br>alert(results)<span class="hljs-comment">//3,5,6,3</span><br><br><span class="hljs-comment">//删除掉偶数</span><br><span class="hljs-keyword">var</span> numbers = [<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">5</span>,<span class="hljs-number">6</span>,<span class="hljs-number">3</span>];<br><span class="hljs-keyword">var</span> results = numbers.filter(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">items,index,array</span>) </span>&#123;<br>  <span class="hljs-keyword">return</span> (items % <span class="hljs-number">2</span>!== <span class="hljs-number">0</span>);<br> &#125;)<br>alert(results)<span class="hljs-comment">//1,3,5,3</span><br></code></pre></td></tr></table></figure>


<p>  <code>filter()</code>方法接收的回调函数可以有多个参数，通常我们使用第一个参数表示Array的某个元素，另两个参数表示元素的位置和数组本身</p>
  <figure class="hljs highlight javascript"><table><tr><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">//去掉重复的元素</span><br><span class="hljs-keyword">var</span> arr = [<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>,<span class="hljs-number">5</span>];<br><span class="hljs-keyword">var</span> result = arr.filter(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">element,index,self</span>) </span>&#123;<br>    <span class="hljs-keyword">return</span> arr.indexOf(element) === index;<br> &#125;)<br>alert(result)<span class="hljs-comment">//1,2,3,4,5</span><br><span class="hljs-comment">//indexOf总返回第一个元素的位置，后续重复元素位置与indexOf返回不相等</span><br></code></pre></td></tr></table></figure>


<h4 id="forEach-方法：本质与for循环迭代数组一样"><a href="#forEach-方法：本质与for循环迭代数组一样" class="headerlink" title="forEach()方法：本质与for循环迭代数组一样"></a><code>forEach()</code>方法：本质与for循环迭代数组一样</h4>  <figure class="hljs highlight javascript"><table><tr><td class="code"><pre><code class="hljs javascript">numbers.forEach(<span class="hljs-function"><span class="hljs-params">x</span> =&gt;</span> <span class="hljs-built_in">console</span>.log(x % <span class="hljs-number">2</span> === <span class="hljs-number">0</span>))<br><span class="hljs-comment">/*[<br>  false, true,  false,<br>  true,  false, true,<br>  false, true,  false,<br>  false, true<br> ] */</span><br></code></pre></td></tr></table></figure>




<h3 id="归并方法"><a href="#归并方法" class="headerlink" title="归并方法"></a>归并方法</h3><p>  <code>reduce()</code>方法和<code>reduceRight()</code>方法，这两个方法都会迭代数组的所有项，构建一个最终返回的值，四个参数：</p>
<p>  (Previousvalue\ currentValue、index、array)前一个值、当前值、项的索引和数组对象</p>
  <figure class="hljs highlight javascript"><table><tr><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">//使用reduce求数组所有值的和</span><br><span class="hljs-comment">// reduce会返回一个将被叠加到累加器的值，reduce方法停止执行后会返回这个累加器、这对数组中所有元素求和很有用</span><br><span class="hljs-keyword">var</span> value = [<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>];<br><span class="hljs-keyword">var</span> sum = value.reduce(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">prev,cur,index,array</span>) </span>&#123;<br>    <span class="hljs-keyword">return</span> prev + cur;<br>&#125;)<br>alert(sum); <span class="hljs-comment">//15</span><br></code></pre></td></tr></table></figure>


<p>  <strong>使用reduce还是reduceRight主要取决于要从哪头开始遍历数组，除此之外它们完全相同</strong></p>
<p>  <strong>map、filter、reduce</strong>是JavaScript函数式编程的基础</p>
<h3 id="includes-1"><a href="#includes-1" class="headerlink" title="includes"></a>includes</h3><p>  如果数组中存在某个元素，includes方法会返回true，否则返回false</p>
  <figure class="hljs highlight javascript"><table><tr><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> arr = [<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">34</span>]<br><span class="hljs-built_in">console</span>.log(arr.includes(<span class="hljs-number">1</span>)) <span class="hljs-comment">// true</span><br></code></pre></td></tr></table></figure>




]]></content>
      <categories>
        <category>前端</category>
        <category>JavaScript</category>
      </categories>
      <tags>
        <tag>javaScript</tag>
        <tag>Array</tag>
      </tags>
  </entry>
  <entry>
    <title>对象创建与继承</title>
    <url>/2019/10/29/2019-10-29-js%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/</url>
    <content><![CDATA[<h1 id="Object类型"><a href="#Object类型" class="headerlink" title="Object类型"></a>Object类型</h1><p>我们看到的大多数引用类型值都是Object类型的实例，它的主要作用是在应用程序中存储和传输数据。</p>
<p>本文提到的API</p>
<ol>
<li><p><code>hasOwnProperty()</code> 如果对象的属性来自实例返回true，否则false，可以用来判断属性来自实例对象还是原型对象</p>
</li>
<li><p><code>isPrototypeOf()</code>会在传入参数的Prototype指向调用它的对象时返回ture,返回true证明person1 的原型对象指向Person<br>console.log(Person.prototype.isPrototypeOf(person1)) // true</p>
</li>
<li><p><code>getPrototypeOf()</code>返回参数内部特性[[Prototype]]的值</p>
</li>
<li><p><code>instanceof</code>检测构造函数的 prototype 属性是否出现在某个实例对象的原型链上</p>
</li>
<li><p><code>in</code> 单独使用in 操作符时，会在可以通过访问对象指定属性时返回true</p>
</li>
<li><p><code>Object.keys</code>返回对象可枚举的属性</p>
</li>
</ol>
<h2 id="对象的创建方式"><a href="#对象的创建方式" class="headerlink" title="对象的创建方式"></a>对象的创建方式</h2><h3 id="构造函数方式创建"><a href="#构造函数方式创建" class="headerlink" title="构造函数方式创建"></a>构造函数方式创建</h3><figure class="hljs highlight javascript"><table><tr><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> smallDog = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Object</span>();<br><br>            smallDog.eat = <span class="hljs-string">"吃骨头"</span>;<br><br>            smallDog.walk = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<br><br>                <span class="hljs-built_in">console</span>.log(<span class="hljs-keyword">this</span>.name+<span class="hljs-string">"不想走路"</span>);<br><br>            &#125;<br></code></pre></td></tr></table></figure>

<a id="more"></a>

<h3 id="字面量的方式创建"><a href="#字面量的方式创建" class="headerlink" title="字面量的方式创建"></a>字面量的方式创建</h3><figure class="hljs highlight javascript"><table><tr><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> obj=&#123;&#125;;<br><br>obj.name=<span class="hljs-string">"小黑"</span>;<br><br>obj.age=<span class="hljs-number">10</span>;<br><br><span class="hljs-comment">//优化：</span><br><br><span class="hljs-keyword">var</span> obj2=&#123;<br><br>    <span class="hljs-attr">name</span>:<span class="hljs-string">"小小"</span>,<br><br>    <span class="hljs-attr">age</span>:<span class="hljs-number">10</span>,<br><br>    <span class="hljs-attr">sayHi</span>:<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;<br><br>        <span class="hljs-built_in">console</span>.log(<span class="hljs-string">"hello"</span>);<br><br>    &#125;<br><br>&#125;;<br><span class="hljs-comment">//缺陷：一次性对象，更改属性需要修改源代码</span><br></code></pre></td></tr></table></figure>

<h3 id="工厂模式"><a href="#工厂模式" class="headerlink" title="工厂模式"></a>工厂模式</h3><p>工厂模式是软件工程领域中一种广为人知的设计模式，这种模式抽象类创建具体对象的过程，通过封装一个函数，在函数中创建对象，对对象的属性进行赋值，在将对象return</p>
<p>函数createPerson()能够根据接受的参数来构建一个包含所有必要信息的Person对象，可以无数次的调用这个函数，而它每次都会返回一个包含两个属性一个方法的对象，虽然解决了创建多个相似对象的问题，但仍没有解决<strong>对象的识别</strong>问题。</p>
<figure class="hljs highlight javascript"><table><tr><td class="code"><pre><code class="hljs javascript"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">createObject</span>(<span class="hljs-params">name,age</span>) </span>&#123;<br><br>            <span class="hljs-keyword">var</span> o = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Object</span>();<br><br>            o.name = name;<br><br>            o.age = age;<br><br>            o.sayName = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<br><br>                alert(<span class="hljs-string">"this.name"</span>);<br><br>            &#125;;<br><br>            <span class="hljs-keyword">return</span> o;<br><br>        &#125;<br><br> <br><br>            <span class="hljs-keyword">var</span> person1 = createObject(<span class="hljs-string">"小刘"</span>,<span class="hljs-number">12</span>);<br></code></pre></td></tr></table></figure>

<h3 id="构造函数模式"><a href="#构造函数模式" class="headerlink" title="构造函数模式"></a>构造函数模式</h3><p>首先如果使用构造函数创建对象<strong>首字母要大写</strong>，这样其他程序员一看就会明白这个构造函数是创建对象的。</p>
<figure class="hljs highlight javascript"><table><tr><td class="code"><pre><code class="hljs javascript"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">Person</span>(<span class="hljs-params">name,age</span>) </span>&#123;<br>            <span class="hljs-keyword">this</span>.name = name;<br>            <span class="hljs-keyword">this</span>.age = age;<br>            <span class="hljs-keyword">this</span>.sayName = sayName;<br>  <br>            <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">sayName</span>(<span class="hljs-params"></span>)</span>&#123;<br>            	alert(<span class="hljs-keyword">this</span>.name);<br>        			&#125;<br>        &#125;<br><br>        <span class="hljs-keyword">var</span> person2=<span class="hljs-keyword">new</span> Person(<span class="hljs-string">"小刘"</span>,<span class="hljs-number">20</span>);<br></code></pre></td></tr></table></figure>

<p>Person函数来代替createObject函数，不同之处在于Person函数</p>
<ol>
<li>没有显式的创建对象</li>
<li>直接将属性和方法赋给来this对象</li>
<li>没有return语句</li>
</ol>
<p>这种创建对象的方式会经历四个步骤</p>
<p>1） 通过new创建一个新对象；</p>
<p>2）将构造函数的作用域赋给新对象（因此this就指向来这个新对象）</p>
<p>3）执行构造函数中的代码（为这个新对象添加属性）</p>
<p>4）返回新对象</p>
<p>两种方式创建的person1和person2分别保存着Person的一个不同的实例，这两个对象都有一个<code>constructor</code>属性，这个属性指向Person。</p>
<figure class="hljs highlight javascript"><table><tr><td class="code"><pre><code class="hljs javascript">alert(person1.constructor == Person) <span class="hljs-comment">// true</span><br>alert(person2.constructor == Person) <span class="hljs-comment">// true</span><br><span class="hljs-comment">// 使用instanceof操作符监测对象类型</span><br>alert(person1 <span class="hljs-keyword">instanceof</span> <span class="hljs-built_in">Object</span>) <span class="hljs-comment">// true</span><br>alert(person1 <span class="hljs-keyword">instanceof</span> Person) <span class="hljs-comment">// true</span><br>alert(person2 <span class="hljs-keyword">instanceof</span> <span class="hljs-built_in">Object</span>) <span class="hljs-comment">// true</span><br>alert(person2 <span class="hljs-keyword">instanceof</span> Person) <span class="hljs-comment">// true</span><br></code></pre></td></tr></table></figure>

<h3 id="原型模式"><a href="#原型模式" class="headerlink" title="原型模式"></a>原型模式</h3><figure class="hljs highlight javascript"><table><tr><td class="code"><pre><code class="hljs javascript"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">Person</span>(<span class="hljs-params"></span>) </span>&#123;&#125;<br>Person.prototype.name = <span class="hljs-string">'lhj'</span>;<br>Person.prototype.age = <span class="hljs-number">29</span>;<br>Person.prototype.sayName = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>&#123;<br>  <span class="hljs-built_in">console</span>.log(<span class="hljs-keyword">this</span>.name)<br>&#125;<br><span class="hljs-keyword">let</span> person1 = <span class="hljs-keyword">new</span> Person()<br>person1.sayName() <span class="hljs-comment">// lhj</span><br><span class="hljs-keyword">let</span> person2 = <span class="hljs-keyword">new</span> Person()<br><br><span class="hljs-built_in">console</span>.log(person1.sayName == person2.sayName) <span class="hljs-comment">// true</span><br></code></pre></td></tr></table></figure>

<p>js中创建构造函数时会自动创建为该构造函数创建一个原型对象，这个函数会创建一个<code>prototype</code><strong>构造函数的prototype属性引用原型对象，原型对象的constructor属性，引用这个构造函数，二者循环引用</strong>，原型对象获取的只有<code>constructor</code>属性，其他属性继承自Object对象。</p>
<p><strong>重要的是：实例与构造函数的原型之间有直接的联系，但实例与构造函数之间没有</strong></p>
<p>再通过对象访问属性时，会按照属性的名称开始搜索，如果发现了给定的名称，则返回该名称对应的值，如果没有找到，则会沿着指针进入原型对象，然后在原型对象找到属性后，在返回对应的值。</p>
<figure class="hljs highlight javascript"><table><tr><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// 声明一个构造函数</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">Person</span>(<span class="hljs-params"></span>)</span>&#123;&#125;<br><span class="hljs-comment">// 打印它的类型</span><br><span class="hljs-built_in">console</span>.log(<span class="hljs-keyword">typeof</span> Person) <span class="hljs-comment">// function</span><br><span class="hljs-comment">// 打印它的原型对象, 一个名字为Person的对象</span><br><span class="hljs-built_in">console</span>.log(Person.prototype) <span class="hljs-comment">// Person &#123;&#125;</span><br><span class="hljs-comment">// 构造函数的proyotype属性引用原型对象，原型对象的constructor属性，引用这个构造函数，二者循环引用</span><br><span class="hljs-built_in">console</span>.log(Person.prototype.constructor === Person)<span class="hljs-comment">// true</span><br><span class="hljs-comment">// Person的原型对象的原型属性与Object相同, Person.prototype ==&gt; &#123;constructor: f, __proto:&#123;hasOwnProperty...&#125;&#125;</span><br><span class="hljs-built_in">Object</span>.prototype对应Person中的__proto中的属性<br><span class="hljs-built_in">console</span>.log(Person.prototype.__proto === <span class="hljs-built_in">Object</span>.prototype) <span class="hljs-comment">// true</span><br><span class="hljs-comment">// 创建两个Person的实例，并为person的原型属性name赋值</span><br><span class="hljs-keyword">let</span> person1 = <span class="hljs-keyword">new</span> Person(), person2 = <span class="hljs-keyword">new</span> Person()<br>Person.prototype.name = <span class="hljs-string">'Nicholas'</span><br><br><span class="hljs-comment">// isPrototypeOF会在传入参数的Prototype指向调用它的对象时返回ture</span><br><span class="hljs-comment">// 返回true证明person1 的原型对象指向Person</span><br><span class="hljs-built_in">console</span>.log(Person.prototype.isPrototypeOf(person1)) <span class="hljs-comment">// true</span><br><br><span class="hljs-comment">// getPrototypeOf() 返回参数内部特性[[Prototype]]的值</span><br><span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">Object</span>.getPrototypeOf(person1) == Person.prototype) <span class="hljs-comment">// true</span><br><span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">Object</span>.getPrototypeOf(person1).name) <span class="hljs-comment">// Nicholas</span><br><span class="hljs-comment">//hasOwnProperty() 如果属性来自实例，返回true</span><br><span class="hljs-built_in">console</span>.log(person1.hasOwnProperty(<span class="hljs-string">'name'</span>)) <span class="hljs-comment">//fasle</span><br><span class="hljs-comment">// 单独使用in 操作符时，会在可以通过访问对象指定属性时返回true</span><br><span class="hljs-built_in">console</span>.log(<span class="hljs-string">'name'</span> <span class="hljs-keyword">in</span> person1) <span class="hljs-comment">// true</span><br><span class="hljs-comment">// 返回对象可枚举的属性</span><br><span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">Object</span>.keys(Person.prototype)) <span class="hljs-comment">// [ 'name', 'age', 'sayName' ]</span><br></code></pre></td></tr></table></figure>

<h2 id="面向对象与继承"><a href="#面向对象与继承" class="headerlink" title="面向对象与继承"></a>面向对象与继承</h2><p>原型模式</p>
<figure class="hljs highlight javascript"><table><tr><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> o = &#123;&#125;;<br>o.constructor === <span class="hljs-built_in">Object</span>; <span class="hljs-comment">//true</span><br></code></pre></td></tr></table></figure>

<figure class="hljs highlight javascript"><table><tr><td class="code"><pre><code class="hljs javascript"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">Person</span>(<span class="hljs-params"></span>) </span>&#123;<br>&#125;<br>Person.prototype.name = <span class="hljs-string">"mike"</span>;<br>Person.prototype.sayName = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>&#123;<br>    alert(<span class="hljs-keyword">this</span>.name);<br>&#125;<br><span class="hljs-keyword">var</span> person1 = <span class="hljs-keyword">new</span> Person();<br>preson1.sayName(); <span class="hljs-comment">//mike</span><br><span class="hljs-keyword">var</span> person2 = <span class="hljs-keyword">new</span> Person();<br>person2.sayName(); <span class="hljs-comment">//mike</span><br>alert(person1.sayName == person2.sayName) <span class="hljs-comment">// true</span><br></code></pre></td></tr></table></figure>

<h2 id="理解原型对象"><a href="#理解原型对象" class="headerlink" title="理解原型对象"></a>理解原型对象</h2><p><strong>事实上现在所展示的原型链还少一环，所有引用类型默认都继承了<code>Object</code>，而这个继承也是通过原型链实现的。因此默认原型内部还有一个指针，指向<code>Object.prototype</code></strong></p>
<p>虽然通过对象实例可以访问保存在原型中的值，但是却不能通过对象实例重写原型中的值。如果我们在实例中添加了一个属性与实例原型中的属性重名，那么会在实例中创建该属性以屏蔽原型中的那个属性</p>
<figure class="hljs highlight javascript"><table><tr><td class="code"><pre><code class="hljs javascript"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">Person</span>(<span class="hljs-params"></span>)</span>&#123;<br>&#125;<br>Person.prototype.name = <span class="hljs-string">"mike"</span>;<br><span class="hljs-keyword">var</span> person1 = <span class="hljs-keyword">new</span> Person();<br><span class="hljs-keyword">var</span> person2 = <span class="hljs-keyword">new</span> Person();<br>person1.name = <span class="hljs-string">"Greg"</span>;<br>alert(person1.name)<span class="hljs-comment">//Greg已经修改</span><br>alert(person2.name)<span class="hljs-comment">//mike 仍然访问原型数据</span><br><span class="hljs-keyword">delete</span> person1.name<br>alert(person1.name)<span class="hljs-comment">//mike</span><br></code></pre></td></tr></table></figure>

<h2 id="实现b继承a的方法"><a href="#实现b继承a的方法" class="headerlink" title="实现b继承a的方法"></a>实现b继承a的方法</h2><h3 id="原型链继承"><a href="#原型链继承" class="headerlink" title="原型链继承"></a>原型链继承</h3><figure class="hljs highlight javascript"><table><tr><td class="code"><pre><code class="hljs javascript"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">A</span>(<span class="hljs-params"></span>) </span>&#123;<br>    <span class="hljs-keyword">this</span>.name = name;<br>   <br>&#125;<br><span class="hljs-comment">//原型方法</span><br>A.prototype.sayHi = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>&#123;<br>    alert(<span class="hljs-string">"Hello"</span>);<br> &#125;<br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">B</span>(<span class="hljs-params"></span>)</span>&#123;&#125;<br><span class="hljs-comment">//将父类的实例作为子类的原型</span><br>B.prototype = <span class="hljs-keyword">new</span> A();<br><span class="hljs-keyword">var</span> b = <span class="hljs-keyword">new</span> B();<br>alert(b.sayHi()); <span class="hljs-comment">//Hello</span><br><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">SuperType</span>(<span class="hljs-params"></span>) </span>&#123;<br>  <span class="hljs-keyword">this</span>.colors = [<span class="hljs-string">'red'</span>, <span class="hljs-string">'blue'</span>, <span class="hljs-string">'pink'</span>]<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">SubType</span>(<span class="hljs-params"></span>) </span>&#123;&#125;<br><br>SubType.prototype = <span class="hljs-keyword">new</span> SuperType()<br><br><span class="hljs-keyword">let</span> sub1 = <span class="hljs-keyword">new</span> SubType()<br><span class="hljs-built_in">console</span>.log(sub1.colors) <span class="hljs-comment">// ['red', 'blue', 'pink']</span><br>sub1.colors.push(<span class="hljs-string">'orange'</span>)<br><span class="hljs-built_in">console</span>.log(sub1.colors) <span class="hljs-comment">// ['red', 'blue', 'pink', 'orange' ]</span><br><br><span class="hljs-keyword">let</span> sub2 = <span class="hljs-keyword">new</span> SuperType()<br><span class="hljs-built_in">console</span>.log(sub1.colors) <span class="hljs-comment">// ['red', 'blue', 'pink', 'orange' ]</span><br></code></pre></td></tr></table></figure>

<p>缺点：不能给父类构造函数传递参数，父子构造函数的原型对象有共享数据问题</p>
<h3 id="借用构造函数继承"><a href="#借用构造函数继承" class="headerlink" title="借用构造函数继承"></a>借用构造函数继承</h3><figure class="hljs highlight javascript"><table><tr><td class="code"><pre><code class="hljs javascript"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">A</span>(<span class="hljs-params">name</span>)</span>&#123;<br>    <span class="hljs-keyword">this</span>.name = name;<br>    <span class="hljs-keyword">this</span>.friends = [<span class="hljs-string">'jely'</span>,<span class="hljs-string">'bob'</span>]<br>    <span class="hljs-keyword">this</span>.sayName() = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>&#123;<br>    alert(<span class="hljs-keyword">this</span>.name);<br>  &#125;;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">B</span>(<span class="hljs-params">name</span>)</span>&#123;<br>    <span class="hljs-comment">//使用call借用A的构造函数</span><br>    A.call(<span class="hljs-keyword">this</span>,name);<br>&#125;<br><span class="hljs-keyword">var</span> b = <span class="hljs-keyword">new</span> B(<span class="hljs-string">"Tom"</span>);<br>b.sayName();<span class="hljs-comment">//Tom</span><br>b.friends;<span class="hljs-comment">// jely,bob</span><br></code></pre></td></tr></table></figure>

<p>组合继承</p>
<figure class="hljs highlight javascript"><table><tr><td class="code"><pre><code class="hljs javascript"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">A</span>(<span class="hljs-params">name</span>) </span>&#123;<br>           <span class="hljs-keyword">this</span>.name = name;<br>           <span class="hljs-keyword">this</span>.colors = [<span class="hljs-string">"red"</span>, <span class="hljs-string">"blue"</span>, <span class="hljs-string">"green"</span>];<br><br>       &#125;<br>       A.prototype.sayName = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>&#123;<br>           alert(<span class="hljs-keyword">this</span>.name);<br>       &#125;<br>       <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">B</span>(<span class="hljs-params">name,age</span>) </span>&#123;<br>           <span class="hljs-comment">//继承属性</span><br>           A.call(<span class="hljs-keyword">this</span>,name);<br>           <span class="hljs-keyword">this</span>.age = age;<br>       &#125;<br>       <span class="hljs-comment">//继承方法</span><br>       B.prototype = <span class="hljs-keyword">new</span> A();<br>       <span class="hljs-comment">//修复构造函数指向</span><br>       B.prototype.construnctor = B;<br>       <span class="hljs-keyword">var</span> b = <span class="hljs-keyword">new</span> B(<span class="hljs-string">"Greg"</span>,<span class="hljs-number">27</span>);<br></code></pre></td></tr></table></figure>

<h3 id="原型式继承"><a href="#原型式继承" class="headerlink" title="原型式继承"></a>原型式继承</h3><figure class="hljs highlight javascript"><table><tr><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> A = &#123;<br>            <span class="hljs-attr">name</span>: <span class="hljs-string">"Nicholas"</span>,<br>            <span class="hljs-attr">friends</span>: [<span class="hljs-string">"Shelby"</span>, <span class="hljs-string">"Court"</span>, <span class="hljs-string">"Van"</span>]<br>        &#125;;<br><br>        <span class="hljs-keyword">var</span> B = <span class="hljs-built_in">Object</span>.create(A);<br>        B.name = <span class="hljs-string">"Greg"</span>;<br>        B.friends.push(<span class="hljs-string">"Rob"</span>);<br>        <span class="hljs-keyword">var</span> C = <span class="hljs-built_in">Object</span>.create(person);<br>        C.name = <span class="hljs-string">"Linda"</span>;<br>        C.friends.push(<span class="hljs-string">"Barbie"</span>);<br><br>        alert(A.friends);      <span class="hljs-comment">//"Shelby,Court,Van,Rob,Barbie"</span><br></code></pre></td></tr></table></figure>

<h3 id="寄生式继承"><a href="#寄生式继承" class="headerlink" title="寄生式继承"></a>寄生式继承</h3><p>创建一个仅用于封装继承过程的函数，该 函数在内部以某种方式来增强对象，后再像真地是它做了所有工作一样返回对象</p>
<figure class="hljs highlight javascript"><table><tr><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">//封装函数</span><br>        <span class="hljs-comment">//original---&gt;原始的</span><br>        <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">create</span>(<span class="hljs-params">original</span>) </span>&#123;<br>            <span class="hljs-keyword">var</span> clone = object(original); <span class="hljs-comment">//通过调用函数创建一个新对象</span><br>            clone.sayHi = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>&#123; <span class="hljs-comment">//以某种方式增强这个对象</span><br>                alert(<span class="hljs-string">"hi"</span>)<br>            &#125;;<br>            <span class="hljs-keyword">return</span> clone;<span class="hljs-comment">//返回这个对象</span><br>        &#125;<br><br>        <span class="hljs-keyword">var</span> A =&#123;<br>            <span class="hljs-attr">name</span>: <span class="hljs-string">"mike"</span>,<br>            <span class="hljs-attr">friends</span>:[<span class="hljs-string">'1'</span>,<span class="hljs-string">'2'</span>,<span class="hljs-string">'3'</span>]<br>        &#125;;<br>        <span class="hljs-keyword">var</span> b = create(A);<br>        b.sayHi(); <span class="hljs-comment">//hi</span><br></code></pre></td></tr></table></figure>

<h3 id="寄生组合式继承"><a href="#寄生组合式继承" class="headerlink" title="寄生组合式继承"></a>寄生组合式继承</h3><figure class="hljs highlight javascript"><table><tr><td class="code"><pre><code class="hljs javascript"><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">inherit</span>(<span class="hljs-params">b,a</span>)</span>&#123;<br>   <span class="hljs-keyword">var</span> prototype = object(a.prototype)<span class="hljs-comment">//创建对象</span><br>    prototype.constructor = b;<br>    b.prototype = prototype;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">A</span>(<span class="hljs-params">name</span>) </span>&#123;<br>    <span class="hljs-keyword">this</span>.name = name;<br>    <span class="hljs-keyword">this</span>.colors = [<span class="hljs-string">"red"</span>,<span class="hljs-string">"blue"</span>,<span class="hljs-string">"green"</span>];<br>&#125;<br>A.prototype.sayName = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>&#123;<br>    alert(<span class="hljs-keyword">this</span>.name);<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">B</span>(<span class="hljs-params">name,age</span>)</span>&#123;<br>    A.call(<span class="hljs-keyword">this</span>.name);<br>&#125;<br>inherit(B,A);<br></code></pre></td></tr></table></figure>

<p>原型链的构建是通过将一个类型的实例赋值给另一个构造函 数的原型实现的。这样，子类型就能够访问超类型的所有属性和方法，这一点与基于类的继承很相似。 原型链的问题是对象实例共享所有继承的属性和方法，因此不适宜单独使用。解决这个问题的技术是借 用构造函数，即在子类型构造函数的内部调用超类型构造函数。这样就可以做到每个实例都具有自己的 属性，同时还能保证只使用构造函数模式来定义类型。使用多的继承模式是组合继承，这种模式使用 原型链继承共享的属性和方法，而通过借用构造函数继承实例属性</p>
]]></content>
      <categories>
        <category>前端</category>
        <category>JavaScript</category>
        <category>对象</category>
      </categories>
      <tags>
        <tag>javaScript</tag>
        <tag>Object</tag>
        <tag>原型</tag>
      </tags>
  </entry>
  <entry>
    <title>js作用域</title>
    <url>/2019/11/27/2019-11-27-js%E4%BD%9C%E7%94%A8%E5%9F%9F/</url>
    <content><![CDATA[<h1 id="关于函数作用域"><a href="#关于函数作用域" class="headerlink" title="关于函数作用域"></a>关于函数作用域</h1><p>几乎所有编程语言的基本功能之一就是<strong>能够存储变量当中的值</strong>，并且能在这之后进行访问和修改，那么变量存储在哪里？程序需要的时候如何找到他们。</p>
<p>事实上js也是一门编译语言，并且大部分情况下编译发生在代码执行前的几微秒（甚至更短）。</p>
<h2 id="关于编译原理"><a href="#关于编译原理" class="headerlink" title="关于编译原理"></a>关于编译原理</h2><p>传统编译语言的流程中，程序的一段源代码在执行之前会有三个步骤，统称为“编译”。</p>
<ol>
<li><p>分词/词法分析</p>
<p>这个过程会将由字符组成的字符串分解成（对编程语言来说）有意义的代码块，这些代 码块被称为词法单元（token）。例如，考虑程序 var a = 2;。这段程序通常会被分解成 为下面这些词法单元：var、a、=、2 、;。空格是否会被当作词法单元，取决于空格在 这门语言中是否具有意义。</p>
</li>
<li><p>解析/语法分析</p>
<p>这个过程是将词法单元流（数组）转换成一个由元素逐级嵌套所组成的代表了程序语法 结构的树。这个树被称为“抽象语法树”（Abstract Syntax Tree，AST）。</p>
</li>
<li><p>代码生成</p>
<p>将AST转换为可执行代码的过程被称为代码生成。</p>
<a id="more"></a>

</li>
</ol>
<h2 id="理解作用域"><a href="#理解作用域" class="headerlink" title="理解作用域"></a>理解作用域</h2><h3 id="进行工作的工作员"><a href="#进行工作的工作员" class="headerlink" title="进行工作的工作员"></a>进行工作的工作员</h3><ol>
<li><p>引擎</p>
<p>从头到尾负责整个JavaScript程序的编译及执行过程</p>
</li>
<li><p>编译器</p>
<p>负责语法分析及代码生成</p>
</li>
<li><p>作用域</p>
<p>负责收集并维护所有声明的变量组成的一系列查询，并实施非常严格的规则，确定当前执行的代码对这些标识符的访问权限</p>
</li>
</ol>
<h3 id="编译器"><a href="#编译器" class="headerlink" title="编译器"></a>编译器</h3><p>对于 var a = 2 ;</p>
<p>为变量分配内存，将其命名为a，然后将值2保存进这个变量，这句话并不完全正确</p>
<p>事实上编译器会进行如下处理：</p>
<ul>
<li>遇到 var a，编译器会询问作用域是否已经有一个该名称的变量存在于同一个作用域的 集合中。如果是，编译器会忽略该声明，继续进行编译；否则它会要求作用域在当前作 用域的集合中声明一个新的变量，并命名为 a。</li>
<li>接下来编译器会为引擎生成运行时所需的代码，这些代码被用来处理 a = 2 这个赋值 操作。引擎运行时会首先询问作用域，在当前的作用域集合中是否存在一个叫作 a 的 变量。如果是，引擎就会使用这个变量；如果否，引擎会继续查找该变量。</li>
</ul>
<p>如果引擎最终找到了 a 变量，就会将 2 赋值给它。否则引擎就会举手示意并抛出一个异 常！</p>
<h4 id="编译器的查询类型"><a href="#编译器的查询类型" class="headerlink" title="编译器的查询类型"></a>编译器的查询类型</h4><p>当变量出现在赋值操作的左侧时进行LHS查询，出现在右侧时进行RHS查询。讲得更准确一点，RHS 查询与简单地查找某个变量的值别无二致，而 LHS 查询则是试图 找到变量的容器本身，从而可以对其赋值。</p>
<figure class="hljs highlight javascript"><table><tr><td class="code"><pre><code class="hljs javascript"><span class="hljs-built_in">console</span>.log(a)<br></code></pre></td></tr></table></figure>

<p>其中对a的引用是一个RHS引用，因为这里 a 并没有赋予任何值。相应地，需要查找并取 得 a 的值，这样才能将值传递给 console.log(..)。</p>
<figure class="hljs highlight javascript"><table><tr><td class="code"><pre><code class="hljs javascript">a = <span class="hljs-number">2</span><br></code></pre></td></tr></table></figure>

<p>这里对 a 的引用则是 LHS 引用，因为实际上我们并不关心当前的值是什么，只是想要为 = 2 这个赋值操作找到一个目标。</p>
]]></content>
      <categories>
        <category>前端</category>
        <category>JavaScript</category>
      </categories>
      <tags>
        <tag>javaScript</tag>
      </tags>
  </entry>
  <entry>
    <title>Js函数表达式</title>
    <url>/2019/10/31/2019-10-31-%E5%87%BD%E6%95%B0%E8%A1%A8%E8%BE%BE%E5%BC%8F/</url>
    <content><![CDATA[<img src="/2019/10/31/2019-10-31-函数表达式/48.jpg">

<a id="more"></a>

<h1 id="函数表达式"><a href="#函数表达式" class="headerlink" title="函数表达式"></a>函数表达式</h1><h2 id="递归"><a href="#递归" class="headerlink" title="递归"></a>递归</h2><p>递归函数是在一个函数通过名字调用自身的情况下构成的</p>
<p>一个经典的递归阶乘函数</p>
<figure class="hljs highlight javascript"><table><tr><td class="code"><pre><code class="hljs javascript"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">f</span>(<span class="hljs-params">num</span>) </span>&#123;<br>    <span class="hljs-keyword">if</span>(num &lt;= <span class="hljs-number">1</span>)&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>    &#125;<span class="hljs-keyword">else</span>&#123;<br>        <span class="hljs-keyword">return</span> num * f(num<span class="hljs-number">-1</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>

<p><code>arguments.callee</code>是一个指向正在执行函数的指针，因此它可以实现对函数的递归调用</p>
<figure class="hljs highlight javascript"><table><tr><td class="code"><pre><code class="hljs javascript"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">f</span>(<span class="hljs-params">num</span>) </span>&#123;<br>    <span class="hljs-keyword">if</span>(num &lt;= <span class="hljs-number">1</span>)&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>    &#125;<span class="hljs-keyword">else</span>&#123;<br>        <span class="hljs-keyword">return</span> num * <span class="hljs-built_in">arguments</span>.callee(num<span class="hljs-number">-1</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>

<p><strong>通过使用<code>arguments.calee</code>代替函数名，可以确保无论怎样调用函数都不会出问题，因此，在编写递归函数时，使用<code>agruments.callee</code>总比使用函数名更保险</strong></p>
<h2 id="闭包"><a href="#闭包" class="headerlink" title="闭包"></a>闭包</h2><h3 id="执行环境与作用域"><a href="#执行环境与作用域" class="headerlink" title="执行环境与作用域"></a>执行环境与作用域</h3><p>想要理解闭包就要理解执行环境与作用域:</p>
<p>每个函数都有自己的执行环境，每个执行环境都有一个与之关联的变量对象，当代码在一个环境中执行的时候，会创建变量对象的一个作用域链，如果这个环境是函数的话，则将其活动对象作为变量对象，活动对象最开始只包含一个变量，即arguments对象。</p>
<p>变量的作用域：全局变量和局部变量，js语言中，函数内部可以直接读取全局变量</p>
<figure class="hljs highlight javascript"><table><tr><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> n=<span class="hljs-number">100</span>;<br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">f1</span>(<span class="hljs-params"></span>)</span>&#123;<br>alert(n);<br>&#125;<br>f1()<span class="hljs-comment">//100</span><br></code></pre></td></tr></table></figure>

<p>另一方面，在函数外部无法读取函数内的局部变量（注意这里内部声明变量要使用var，否则实际上声明 了一个全局变量）</p>
<figure class="hljs highlight javascript"><table><tr><td class="code"><pre><code class="hljs javascript"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">f1</span>(<span class="hljs-params"></span>)</span>&#123;<br><span class="hljs-keyword">var</span> n = <span class="hljs-number">999</span>;<br>&#125;<br>alert(n); <span class="hljs-comment">//error</span><br></code></pre></td></tr></table></figure>

<h3 id="那么什么是闭包呢？"><a href="#那么什么是闭包呢？" class="headerlink" title="那么什么是闭包呢？"></a>那么什么是闭包呢？</h3><p>闭包是指有权访问另一个函数作用域中的变量的函数</p>
<p><strong>理解：闭包就是能够读取其它函数内部变量的函数，他是函数内部与外部连接起来的一座桥梁</strong></p>
<p>作用：</p>
<ol>
<li>从外部读取局部变量</li>
<li>让变量的始终保存在内存中</li>
</ol>
<p>那么如何从外部读取局部变量</p>
<figure class="hljs highlight javascript"><table><tr><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">//那就是在函数内部在定义一个函数</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">f1</span>(<span class="hljs-params"></span>)</span>&#123;<br>    <span class="hljs-keyword">var</span> n = <span class="hljs-number">100</span>;<br>    <span class="hljs-comment">//局部变量n对外部不可见，对f2是可见的</span><br>    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">f2</span>(<span class="hljs-params"></span>)</span>&#123;<br>        alert(n); <span class="hljs-comment">//100</span><br>    &#125;<br>    <span class="hljs-comment">//将f2作为返回值</span><br>    <span class="hljs-keyword">return</span> f2;<span class="hljs-comment">//</span><br>&#125;<br><span class="hljs-keyword">var</span> result= f1();<br>result();<span class="hljs-comment">//100</span><br></code></pre></td></tr></table></figure>

<p>上述代码中<code>f2</code>函数，就是闭包。</p>
<p>2.将变量的值保存在内存中</p>
<figure class="hljs highlight javascript"><table><tr><td class="code"><pre><code class="hljs javascript"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">f1</span>(<span class="hljs-params"></span>)</span>&#123;<br>　　　　<span class="hljs-keyword">var</span> n=<span class="hljs-number">999</span>;<br>    <span class="hljs-comment">//nAdd没有使用var声明，它是一个全局变量，值为一个匿名函数</span><br>　　　　nAdd=<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;n+=<span class="hljs-number">1</span>&#125;<br>　　　　<span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">f2</span>(<span class="hljs-params"></span>)</span>&#123;<br>　　　　　　alert(n);<br>　　　　&#125;<br>　　　　<span class="hljs-keyword">return</span> f2;<br>　　&#125;<br>　　<span class="hljs-keyword">var</span> result=f1();<br>　　result(); <span class="hljs-comment">// 999</span><br>　　nAdd();<br>　　result(); <span class="hljs-comment">// 1000</span><br></code></pre></td></tr></table></figure>

<p>在这段代码中，result实际上就是闭包<code>f2</code>函数。它一共运行了两次，第一次的值是999，第二次的值是1000。这证明了，函数f1中的局部变量n一直保存在内存中，并没有在<code>f1</code>调用后被自动清除。</p>
<p>为什么会这样呢？原因就在于<code>f1</code>是<code>f2</code>的父函数，而<code>f2</code>被赋给了一个全局变量，这导致<code>f2</code>始终在内存中，而<code>f2</code>的存在依赖于<code>f1</code>，因此<code>f1</code>也始终在内存中，不会在调用结束后，被垃圾回收机制（garbage collection）回收。</p>
<p>这段代码中另一个值得注意的地方，就是”<code>nAdd=function(){n+=1}</code>“这一行，首先在<code>nAdd</code>前面没有使用var关键字，因此<code>nAdd</code>是一个全局变量，而不是局部变量。其次，<code>nAdd</code>的值是一个匿名函数（anonymous function），而这个匿名函数本身也是一个闭包，所以<code>nAdd</code>相当于是一个setter，可以在函数外部对函数内部的局部变量进行操作。</p>
<h3 id="关于this对象"><a href="#关于this对象" class="headerlink" title="关于this对象"></a>关于<code>this</code>对象</h3><p>我们需要理解两个例子</p>
<figure class="hljs highlight javascript"><table><tr><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> name = <span class="hljs-string">"The Window"</span>;<br><br>　　<span class="hljs-keyword">var</span> object = &#123;<br>　　　　<span class="hljs-attr">name</span> : <span class="hljs-string">"My Object"</span>,<br><br>　　　　<span class="hljs-attr">getNameFunc</span> : <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;<br>　　　　　　<span class="hljs-keyword">return</span> <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;<br>　　　　　　　　<span class="hljs-keyword">return</span> <span class="hljs-keyword">this</span>.name;<br>　　　　　　&#125;;<br><br>　　　　&#125;<br><br>　　&#125;;<br><br>　　alert(object.getNameFunc()());<span class="hljs-comment">//The window</span><br></code></pre></td></tr></table></figure>

<p>在全局函数中，this等于window,而匿名函数的执行环境具有全局性，因此this队形通常指向window</p>
<p>例2</p>
<figure class="hljs highlight javascript"><table><tr><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> name = <span class="hljs-string">"The Window"</span>;<br><br>　　<span class="hljs-keyword">var</span> object = &#123;<br>　　　　<span class="hljs-attr">name</span> : <span class="hljs-string">"My Object"</span>,<br><br>　　　　<span class="hljs-attr">getNameFunc</span> : <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;<br>　　　　　　<span class="hljs-keyword">var</span> that = <span class="hljs-keyword">this</span>;<br>　　　　　　<span class="hljs-keyword">return</span> <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;<br>　　　　　　　　<span class="hljs-keyword">return</span> that.name;<br>　　　　　　&#125;;<br><br>　　　　&#125;<br><br>　　&#125;;<br><br>　　alert(object.getNameFunc()());<br></code></pre></td></tr></table></figure>

<p>在定义匿名函数之前就将this对象赋值给了that，而在定义了闭包之后，闭包可以访问这个变量，此时的that正是引用着object的this。</p>
<h3 id="闭包与变量"><a href="#闭包与变量" class="headerlink" title="闭包与变量"></a>闭包与变量</h3><p>在作用域链这种配置机制下引出的指的注意的副作用，即闭包只能取得包含函数中任何的变量的最后一个值</p>
<p>所以当返回函数引入了循环变量时</p>
<figure class="hljs highlight javascript"><table><tr><td class="code"><pre><code class="hljs javascript"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">count</span>(<span class="hljs-params"></span>) </span>&#123;<br>    <span class="hljs-keyword">var</span> arr = [];<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> i=<span class="hljs-number">1</span>; i&lt;=<span class="hljs-number">3</span>; i++) &#123;<br>        arr.push(<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<br>            <span class="hljs-keyword">return</span> i * i;<br>        &#125;);<br>    &#125;<br>    <span class="hljs-keyword">return</span> arr;<br>&#125;<br><br><span class="hljs-keyword">var</span> results = count();<br><span class="hljs-keyword">var</span> f1 = results[<span class="hljs-number">0</span>];<span class="hljs-comment">//16</span><br><span class="hljs-keyword">var</span> f2 = results[<span class="hljs-number">1</span>];<span class="hljs-comment">//16</span><br><span class="hljs-keyword">var</span> f3 = results[<span class="hljs-number">2</span>];<span class="hljs-comment">//16</span><br></code></pre></td></tr></table></figure>

<p>全部都是<code>16</code>！原因就在于返回的函数引用了变量<code>i</code>，但它并非立刻执行。等到3个函数都返回时，它们所引用的变量<code>i</code>已经变成了<code>4</code>，因此最终结果为<code>16</code>。</p>
<p>解决：方法是再创建一个函数，用该函数的参数绑定循环变量当前的值，无论该循环变量后续如何更改，已绑定到函数参数的值不变：</p>
<figure class="hljs highlight javascript"><table><tr><td class="code"><pre><code class="hljs javascript"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">count</span>(<span class="hljs-params"></span>) </span>&#123;<br>    <span class="hljs-keyword">var</span> arr = [];<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> i=<span class="hljs-number">1</span>; i&lt;=<span class="hljs-number">3</span>; i++) &#123;<br>        arr.push((<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">n</span>) </span>&#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<br>                <span class="hljs-keyword">return</span> n * n;<br>            &#125;<br>        &#125;)(i));<br>    &#125;<br>    <span class="hljs-keyword">return</span> arr;<br>&#125;<br><br><span class="hljs-keyword">var</span> results = count();<br><span class="hljs-keyword">var</span> f1 = results[<span class="hljs-number">0</span>];<br><span class="hljs-keyword">var</span> f2 = results[<span class="hljs-number">1</span>];<br><span class="hljs-keyword">var</span> f3 = results[<span class="hljs-number">2</span>];<br><br>f1(); <span class="hljs-comment">// 1</span><br>f2(); <span class="hljs-comment">// 4</span><br>f3(); <span class="hljs-comment">// 9</span><br></code></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>前端</category>
        <category>JavaScript</category>
      </categories>
      <tags>
        <tag>javaScript</tag>
        <tag>闭包</tag>
        <tag>递归</tag>
      </tags>
  </entry>
  <entry>
    <title>HTTP请求参数</title>
    <url>/2020/11/08/2020-01-10-%E5%85%B3%E4%BA%8EHTTP%E8%AF%B7%E6%B1%82%E5%8F%82%E6%95%B0/</url>
    <content><![CDATA[<h2 id="HTTP请求参数的三种格式"><a href="#HTTP请求参数的三种格式" class="headerlink" title="HTTP请求参数的三种格式"></a>HTTP请求参数的三种格式</h2><p>记录关于<code>Query String Parameters</code>、<code>Form Data</code>、 <code>Request Payload</code>,三种格式的区别</p>
<h3 id="Query-String-Parameters"><a href="#Query-String-Parameters" class="headerlink" title="Query String Parameters"></a><code>Query String Parameters</code></h3><p>格式为?key=value&amp;key=value</p>
<p>参数通过url String的形式传递，常用在GET请求方式时使用，那么通过postman等测试工具测试接口时，要根据对应方式，对应类型去添加参数，</p>
<h3 id="Form-Data"><a href="#Form-Data" class="headerlink" title="Form Data"></a><code>Form Data</code></h3><p>当Content-Type为<code>application/x-www-form-urlencoded;charset=utf-8</code>时，参数以<code>Form Data</code>的形式传递给接口，但是不会显示在url上</p>
<h2 id="Request-Playload"><a href="#Request-Playload" class="headerlink" title="Request Playload"></a><code>Request Playload</code></h2><p>当Content-Type为<code>application/json;charset=utf-8</code>时，参数会以Request payload的形式，数据以json的形式传递给接口，并且不会显示在接口的url上</p>
]]></content>
      <categories>
        <category>网络</category>
      </categories>
      <tags>
        <tag>Http</tag>
      </tags>
  </entry>
  <entry>
    <title>写给自己看的flex布局</title>
    <url>/2020/02/20/2020-02-20-flex%E5%B8%83%E5%B1%80%E7%9A%84%E5%B1%9E%E6%80%A7%E8%AE%B0%E5%BD%95/</url>
    <content><![CDATA[<h5 id="flex布局"><a href="#flex布局" class="headerlink" title="flex布局"></a>flex布局</h5><p>flex布局相关的属性分两组，一组作用在flex容器上，还有一组作用在flex子项上</p>
<table>
<thead>
<tr>
<th align="center">作用在flex容器上</th>
<th align="center">作用在flex子项上</th>
</tr>
</thead>
<tbody><tr>
<td align="center">flex-direction</td>
<td align="center">order</td>
</tr>
<tr>
<td align="center">flex-wrap</td>
<td align="center">flex-grow</td>
</tr>
<tr>
<td align="center">flex-flow</td>
<td align="center">flex-shrink</td>
</tr>
<tr>
<td align="center">justify-content</td>
<td align="center">flex-basis</td>
</tr>
<tr>
<td align="center">align-items</td>
<td align="center">flex</td>
</tr>
<tr>
<td align="center">align-content</td>
<td align="center">align-self</td>
</tr>
</tbody></table>
<p>flex有很多属性，和平时使用的css不同的是它控制的是一个容器和容器内的所有子项，通常不是针对某一个子元素，所以在最开始的时候总是习惯的想要对某一个元素进行时会纠结不清到底使用哪个属性。</p>
<p>最后认为搞清楚flex布局最重要的也就是明白控制元素的主轴</p>


<p>也就是使用<code>flex-direction</code>控制主轴方向，通常默认主轴水平方向，那么使用<code>justify-content</code>去控制子项在水平方向的对齐方式是便是控制子项在X轴上的对齐方式。当<code>flex-direction</code>:column;时，主轴由原来的X轴变为Y轴，那么<code>justify-content</code>控制的便是纵向的布局，而不是一味的认为控制当前页面的横向布局。</p>
<a id="more"></a>

<ol>
<li>flex-direction`：用来控制子项的整体布局方向,<strong>也就是决定了子项的主轴</strong>。</li>
</ol>
<p>   <code>flex-direction</code>: <code>row</code>(显示为行，从左向右)|<code>row-reverse</code>(从右向左)|<code>column</code>(显示为列)|<code>column-reverse</code>(与column相反)</p>
<ol start="2">
<li><p><code>flex-wrap</code>：控制子项整体单行显示或换行显示</p>
<p><code>flex-wrap</code>: <code>nowrap</code>(单行显示不换行)|<code>wrap</code>(宽度不足换行显示)|<code>wrap-reverse</code>(宽度不足换行，下面的子项去上面)</p>
</li>
<li><p><strong><code>align-items</code>flex的子项们在（侧轴）主轴垂直方向上的对齐方式</strong></p>
<p><code>stretch</code>默认值。子项拉伸</p>
<p><code>flex-start</code>:逻辑CSS属性值，与文档流相关，默认表现为容器顶部对齐</p>
<p><code>flex-end</code>:逻辑CSS属性值，与文档流方向相关。默认表现为容器底部对齐。</p>
<p><code>center</code>:表现为垂直居中对齐</p>
<p><code>baseline</code>:表现为所有flex子项都对于flex容器的基线对齐</p>
</li>
<li><p><strong><code>justify-content</code>:决定主轴水平方向子项的对齐和分布方式</strong></p>
<p><code>justify-content</code>: <code>flex-start</code>(与文档流方向相关，默认为左对齐)|<code>flex-end</code>(右对齐)|<code>center</code>(表现为居中对齐)|<code>space-between</code>(两端对齐)|<code>space-around</code>(环绕，展现为边缘的空白只有中间空白的一半)|<code>space-evenly</code>(均等，每个子项两侧空白完全相等)</p>
</li>
<li><p><code>algin-content</code>可以看成与<code>justify-content</code>是相似的但是且对立的属性，前者指明水平方向flex子项的对齐和分布方式，而<code>align-content</code>则指明垂直方向每一项flex元素的对齐和分布方式哦。<strong>如果所有flex子项只有一行，则<code>aligi-content</code>属性是没有任何效果的</strong>；</p>
<p><code>stretch</code>默认值。每一行flex子元素都等比例拉伸。例如，如果共两行flex子元素，则每一行拉伸高度是50%。</p>
<p><code>flex-start</code>逻辑CSS属性值，与文档流方向相关。默认表现为顶部堆砌。</p>
<p><code>flex-end</code>逻辑CSS属性值，与文档流方向相关。默认表现为底部堆放。</p>
<p><code>center</code>表现为整体垂直居中对齐。</p>
<p><code>space-between</code>表现为上下两行两端对齐。剩下每一行元素等分剩余空间。</p>
<p><code>space-around</code>每一行元素上下都享有独立不重叠的空白空间。</p>
<p><code>space-evenly</code>每一行元素都完全上下等分。</p>
</li>
<li><p><code>flex-flow</code>: 为<code>flex-direction</code> 和<code>flex-wrap</code>两个属性的的缩写，例：flex-flow: row nowrap;</p>
<p>表示为子项从左向右排列，不换行</p>
</li>
</ol>
<h6 id="子项上的属性"><a href="#子项上的属性" class="headerlink" title="子项上的属性"></a>子项上的属性</h6><ol>
<li><code>order</code>: order:<integer>//整数值，控制子项的位置例如要子项在最前面只需要给一个-1就可以了</integer></li>
<li><code>flex-grow:</code>//数值默认0，可以是小数最大为1，控制占据剩余空间的比例</li>
<li><code>flex-shrink</code>: 当容器空间不足时单个元素的收缩比例</li>
<li><code>flex-basis</code>定义了在分配剩余空间之前元素的默认大小，默认auto，或指定尺寸</li>
<li><strong><code>flex</code>flex-grow,flex-shrink,flex-basis的缩写定义子项占多少份</strong></li>
<li><code>align-self</code>: 控制单独某一个flex子项的垂直对齐方式，与align-item类似，不过指定单个元素</li>
</ol>
<p>将一个父盒子中的两个子盒子左右居中对齐</p>
<figure class="hljs highlight css"><table><tr><td class="code"><pre><code class="hljs css"><span class="hljs-selector-id">#father</span>&#123;<br>            <span class="hljs-attribute">width</span>: <span class="hljs-number">500px</span>;<br>            <span class="hljs-attribute">height</span>: <span class="hljs-number">1000px</span>;<br>            <span class="hljs-attribute">border</span>: <span class="hljs-number">1px</span> solid orange;<br>            <span class="hljs-attribute">display</span>: flex;<br>            <span class="hljs-attribute">justify-content</span>:space-between;<br>            <span class="hljs-attribute">align-items</span>: center;<br>        &#125;<br>        <span class="hljs-selector-class">.son1</span>,<span class="hljs-selector-class">.son2</span>&#123;<br>            <span class="hljs-attribute">width</span>: <span class="hljs-number">100px</span>;<br>            <span class="hljs-attribute">height</span>: <span class="hljs-number">100px</span>;<br>            <span class="hljs-attribute">background-color</span>: red;<br>        &#125;<br></code></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>前端</category>
        <category>CSS</category>
      </categories>
      <tags>
        <tag>Flex</tag>
      </tags>
  </entry>
  <entry>
    <title>http的地基</title>
    <url>/2020/02/27/2020-02-27-HTTP%E5%90%84%E4%B8%AA%E4%BC%A0%E8%BE%93%E5%B1%82/</url>
    <content><![CDATA[<p>TCP/IP协议 族各层的作用</p>
<ul>
<li><p>应用层：决定了用户提供应用服务时 通信的活动，比如FTP(文件传输协议)，DNS(域名系统)，HTTP</p>
</li>
<li><p>传输层：传输层对应上层应用层，提供处于网络连接中两台计算机之间的数据传输，传输层有两个性质不同的协议，TCP(传输控制协议)，UDP(用户数据报协议)</p>
</li>
<li><p>网络层：用来处理网络上流动的数据包，数据包是网络传输的最小数据单位。该层规定了通过怎样的路径到达对方计算机，并把数据传给对方。</p>
</li>
<li><p>链路层：用来 处理连接网络的硬件部分，包括操作系统，网卡，硬件的设备驱动等</p>


<a id="more"></a>

<p>各层由下到上，越接近底层就越接近硬件，越靠近上层越靠近用户</p>
</li>
</ul>
<h2 id="第一层"><a href="#第一层" class="headerlink" title="第一层"></a>第一层</h2><ol>
<li><p>是将电脑连接起来的<strong>物理手段</strong>，（通过光缆、电缆、双绞线、无线电波）等方式，它主要规定了网络的一些电气特性，作用是负责传送0和1的电信号。链路层还确定了传送0和1的电信号的分组方式</p>
<p><strong>以太网协议</strong>：最初各家公司的电信号分组方式各不相同，由此以太网协议开始流行起来，并逐渐占据了主导地位，以太网规定：一组电信号构成一个数据包，叫做帧，每一帧分为两个部分，标头和数据</p>
<p>“标头”：包含数据包的一些说明项，比如发送者、接受者、数据类型等；”数据“则是数据包的具体内容</p>
<p>标头的长度，固定为18字节，“数据的长度”，最短为46字节，最长为1500字节，因此。整个帧最短为64字节，最长为1518字节，如果数据很长，就必须分割成多个帧发送。</p>
</li>
<li><p>MAC地址</p>
<p>虽然以太网的标头包含了发送者和接受者的信息，但是发送者和接受者又如何来区分和标示呢？</p>
<p>以太网规定所有连入网络的设备都必须具有网卡接口，数据包则是又一块网卡发送到另一块网卡，MAC地址就是<strong>网卡地址</strong></p>
<p>​                                MAC Address</p>
<p>​                                00-B0-D0-86-BB-F7</p>
<p>在同一个子网络内数据通过广播的方式像本网络内所有的计算机发送，让每台计算机自己判断是否为接收方</p>
</li>
</ol>
<h2 id="网络层"><a href="#网络层" class="headerlink" title="网络层"></a>网络层</h2><p>仅仅依靠MAC地址和在子网络内的广播效率低下，并且我们不能让所有国家的计算机都处在同一个子网络，所以需要判断：处于子网络内的计算机通过广播的方式传递数据，否则采用路由的方式，这样就产生了网络层，他的作用是引进一套新的地址，使得我们能够区分计算机是否处在同一个子网络，这套地址叫做“网络地址”，网络地址的协议叫做 <strong>IP协议</strong>。</p>
<p>”MAC地址“绑定在网卡上，“网络地址”由管理员分配，网络地址帮助确定计算机所处子网络（是不是在一个子网络），MAC地址则将数据包发送到该子网络的目标网卡，所以逻辑上先处理网络地址，后处理MAC地址。</p>
<p>规定网络地址的协议叫做“IP协议”，他所定的地址就叫做<strong>IP地址</strong></p>
<p>那么什么是IP地址：它长这样</p>


<p>习惯上，我们用四段十进制表示IP地址从0.0.0.0到255.255.255.255</p>
<p>互联网上每个计算机都会分配一个IP地址，前部分代表网络，后一部分代表主机，通过子网掩码可以判断两个IP地址是够处在同一个子网络。</p>
<p>所以总结来说IP地址的协议主要有两个，一个是为每台计算机分配IP地址，另一个是确定哪些地址处在同一个子网络</p>
<h3 id="IP数据包"><a href="#IP数据包" class="headerlink" title="IP数据包"></a>IP数据包</h3><p>前面所得以太网数据包包含标头和数据体两部分，只包含MAC地址，所以我门可以将IP数据包直接放进以太网数据包的数据部分，在前面在添加一个标头，那么到达网络层时数据包括以太网标头+IP标头+数据体（IP数据包在以太网数据包内部）</p>
<h2 id="传输层"><a href="#传输层" class="headerlink" title="传输层"></a>传输层</h2><p>有了MAC地址和IP协议我们已经可以通过互联网在任意两台主机上建立通信，发送数据。</p>
<p>但是现在我们的电脑一开机便同时运行着多个应用程序，比如你现在一边浏览着网页，一边听着歌，还在微信随时加入群聊。那么这么多程序，我们的数据包到底应该给哪个程序供给数据，这时候我们还需要一个参数，<strong>端口号（port）</strong>，每个数据包发送到主机特定的端口，不同的程序通过不同的端口取到自己所需的数据。</p>
<p>端口号时0到65535之间的一个整数，正好是一个16个二进制位，0到1023端口被系统占用。<strong>传输层的作用就是建立端口到端口的通信，相比之下，网络层的功能是建立主机到主机的通信，主要确定主机和端口，我们就能实现程序之间的交流</strong></p>
<h3 id="UDP协议"><a href="#UDP协议" class="headerlink" title="UDP协议"></a>UDP协议</h3><p>在数据包中加入端口信息我门就用到了UDP协议，他的格式就是在数据前面加上端口号，这一段数据的连接我们在加上UDP协议，如法炮制，我们将UDP的数据包放入以太网的数据包中的IP数据包中，那么形式看起来变成了：</p>
<p>以太网标头+IP标头+UDP标头+数据体（以太网-&gt;IP-&gt;UDP）</p>
<h2 id="应用层"><a href="#应用层" class="headerlink" title="应用层"></a>应用层</h2><p>应用程序收到传输层的数据。重要的就是<strong>要进行解读</strong>，由于互联网时开放架构，数据来源五花八门，必须事先规定好格式，否则根本无法解读。</p>
<p><strong>应用层的作用就是规定应用程序的数据格式。接下来便是了解应用层</strong>http**</p>
]]></content>
      <categories>
        <category>网络</category>
      </categories>
      <tags>
        <tag>TCP</tag>
        <tag>IP</tag>
        <tag>MAC</tag>
      </tags>
  </entry>
  <entry>
    <title>20-03-09vuex</title>
    <url>/2020/03/09/2020-03-09-%E4%BA%86%E8%A7%A3vuex/</url>
    <content><![CDATA[<h2 id="Vuex是什么？"><a href="#Vuex是什么？" class="headerlink" title="Vuex是什么？"></a>Vuex是什么？</h2><p>根据官网解释是一个专门为Vue.js应用程序开发的状态管理模式。（个人理解为数据管理，一个程序在刚开发阶段组件比较少，组件之间的传值解决也很方便，但是当程序越来越大，组件越来越多的时候数据越来越多的时候，组件传值变得复杂难以管理）。Vuex就是将多个组件都会用到的数据进行集中管理，哪个组件需要这些数据就在Vuex的存储库中提取，使数据的调用变得简单直接。</p>
<a id="more"></a>

<h3 id="Vuex的状态管理包含三个部分："><a href="#Vuex的状态管理包含三个部分：" class="headerlink" title="Vuex的状态管理包含三个部分："></a>Vuex的状态管理包含三个部分：</h3><ol>
<li>state，驱动应用的数据源；</li>
<li>view，以声明的方式将state映射到视图；</li>
<li>actions，响应在view上的用户输入导致的状态变化。</li>
</ol>


<p>这是一个单项数据流。</p>
<p>state中的数据渲染到view视图，用户通过actions交互事件更改state数据，数据再次渲染，形成一个单项数据流。</p>
<h2 id="正常情况下的数据管理"><a href="#正常情况下的数据管理" class="headerlink" title="正常情况下的数据管理"></a>正常情况下的数据管理</h2><p>通过官方文档实现一个计数器</p>
<figure class="hljs highlight"><table><tr><td class="code"><pre><code class="hljs javascript">&lt;template&gt;<br>&lt;h1&gt;点击数：&#123;&#123; count &#125;&#125;&lt;/h1&gt;<br>&lt;input type="button" value="点击增加" @click="addEvent" /&gt;<br>&lt;/template&gt;<br>export default &#123;<br>  name: "Store",<br>  data() &#123;<br>    return &#123;<br>      count: 0<br>    &#125;;<br>  &#125;,<br>  methods: &#123;<br>    addEvent:function()&#123;<br>        this.count++<br>    &#125;<br></code></pre></td></tr></table></figure>

{% asset_img 2.jpg %}

<p>那么Vuex的方式是</p>
<figure class="hljs highlight javascript"><table><tr><td class="code"><pre><code class="hljs javascript">&lt;!-- Vuex方式 --&gt;<br>    <span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>点击数：&#123;&#123; $store.state.num &#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span></span><br>    <span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"button"</span> <span class="hljs-attr">value</span>=<span class="hljs-string">"点击增加"</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">"emitAction"</span> /&gt;</span></span><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> &#123;<br>  <span class="hljs-attr">name</span>: <span class="hljs-string">"Store"</span>,<br>  <span class="hljs-attr">methods</span>: &#123;<br>  <span class="hljs-comment">//vuex中的mutation不能直接调用，我们需要调用store.commit方法</span><br>    <span class="hljs-attr">emitAction</span>:<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;<br>        <span class="hljs-keyword">this</span>.$store.commit(<span class="hljs-string">'addEvent2'</span>)<br>    &#125;<br>    &#125;<br></code></pre></td></tr></table></figure>



<p>当勾选了Vuex后，会自动创建一个store实例，在state中存储数据，mutations中 定义方法</p>


<p>Vuex中的state：</p>
<p>state可以称作Vuex存储数据的仓库，在组件中调用数据时我们发现在组件中的模板语法是这样的，$state.store.num,较为繁琐，我们可以这样写</p>


<p>这个时候发现下面也很繁琐所以Vuex提供了<code>mapState</code>辅助函数帮助我们生成计算属性</p>
<figure class="hljs highlight javascript"><table><tr><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">//第一种方式</span><br><span class="hljs-attr">computed</span>:mapSate([<span class="hljs-string">'age'</span>,<span class="hljs-string">'gender'</span>,<span class="hljs-string">'num'</span>]);<br><span class="hljs-comment">//第二种</span><br>computed:mapState(&#123;<br>    <span class="hljs-attr">age</span>: <span class="hljs-string">'age'</span>,<br>    <span class="hljs-comment">//或者箭头函数方式</span><br>    <span class="hljs-attr">gender</span>:<span class="hljs-function">(<span class="hljs-params">state</span>) =&gt;</span>state.gender,<br>    <span class="hljs-attr">num</span>:<span class="hljs-function">(<span class="hljs-params">state</span>) =&gt;</span> state.num<br>&#125;)<br><span class="hljs-attr">computed</span>: &#123;<br>    ...mapState([<span class="hljs-string">"username"</span>, <span class="hljs-string">"age"</span>, <span class="hljs-string">"list"</span>]),<br>    ...mapGetters([<span class="hljs-string">'xuAge'</span>])<br>  &#125;,<br>  <span class="hljs-attr">methods</span>: &#123;<br>    <span class="hljs-comment">// addAge: function() &#123;</span><br>    <span class="hljs-comment">//   this.$store.commit("addAge");</span><br>    <span class="hljs-comment">// &#125;,</span><br>    ...mapMutations([<span class="hljs-string">'addAge'</span>,<span class="hljs-string">'getList'</span>]),<br>    ...mapActions([<span class="hljs-string">'getJoke'</span>])<br></code></pre></td></tr></table></figure>

<p>Vuex中的Getter：</p>
<p>刚开始想组件中有计算属性，那么为什么要使用getter，组件中的计算属性只能在该组件中使用而：</p>
<p>Getter相当于全局的computed(计算属性)</p>
<figure class="hljs highlight javascript"><table><tr><td class="code"><pre><code class="hljs javascript">getters:&#123;<br><span class="hljs-attr">reverseMSg</span>:<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">state</span>)</span>&#123;<br><span class="hljs-comment">//返回它的颠倒值</span><br>  <span class="hljs-keyword">return</span> state.msg.split(<span class="hljs-string">''</span>).reverse().join(<span class="hljs-string">''</span>)<br>   &#125;<br>&#125;<br></code></pre></td></tr></table></figure>

<p>VueX中的mutations相当于组件中的methods</p>
<figure class="hljs highlight javascript"><table><tr><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">//修改数据/状态的方法--methods</span><br>  <span class="hljs-attr">mutations</span>: &#123;<br>    addAge(state,payload)&#123;<br>      <span class="hljs-comment">// console.log(state)</span><br>      state.age += payload<br>    &#125;,<br>    getList(state,payload)&#123;<br>      state.list = payload<br>    &#125;<br>  &#125;,<br></code></pre></td></tr></table></figure>

<p>VueX中的actions则是异步的修改数据</p>
<figure class="hljs highlight javascript"><table><tr><td class="code"><pre><code class="hljs javascript">actions: &#123;<br>    getJoke(context)&#123;<br>      <span class="hljs-keyword">let</span> httpUrl = <span class="hljs-string">'https://api.apiopen.top/getJoke?page=1&amp;count10&amp;type=text'</span><br>      fetch(httpUrl).then(<span class="hljs-function">(<span class="hljs-params">res</span>)=&gt;</span>&#123;<br>        <span class="hljs-keyword">return</span> res.json()<br>      &#125;).then(<span class="hljs-function">(<span class="hljs-params">res</span>)=&gt;</span>&#123;<br>        <span class="hljs-built_in">console</span>.log(res)<br>        context.commit(<span class="hljs-string">'getList'</span>,res.result)<br>      &#125;)<br>    &#125;<br>  &#125;<br>      <span class="hljs-comment">//将异步请求到的数据渲染到列表中</span><br>      &lt;ul&gt;<br>      <span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">li</span> <span class="hljs-attr">v-for</span>=<span class="hljs-string">"(item, i) in $store.state.list"</span> <span class="hljs-attr">:key</span>=<span class="hljs-string">"i"</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">h3</span>&gt;</span>&#123;&#123; item.name &#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">h3</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>&#123;&#123; item.text &#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>      <span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span></span><br>    &lt;<span class="hljs-regexp">/ul&gt;</span><br></code></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>前端</category>
        <category>Vue</category>
      </categories>
      <tags>
        <tag>Vuex</tag>
      </tags>
  </entry>
  <entry>
    <title>6-19CSS相关问题</title>
    <url>/2020/06/19/2020-06-19-CSS%E5%B0%8F%E9%97%AE%E9%A2%98/</url>
    <content><![CDATA[<ul>
<li><p>text-indent:-999px;当做一个a链接的图片按钮时，可以用于在添加完图片时将原本的字隐藏，只显示图片作为链接按钮</p>


<a id="more"></a>
</li>
<li><p>content用于在元素的::before和::after伪元素中插入内容。例如在自定义复选框样式时，</p>


<p>使用label覆盖input，设置label的样式通过content设置在点击状态时显示背景图片</p>
</li>
<li><p>label标签表示用户界面中某个元素的说明。将一个 <code>&lt;label&gt;</code> 和一个 <a href="https://developer.mozilla.org/zh-CN/docs/Web/HTML/Element/input" target="_blank" rel="noopener">``</a> 元素相关联主要有这些优点：</p>
<ul>
<li>标签文本不仅与其相应的文本输入元素在视觉上相关联，程序中也是如此。 这意味着，当用户聚焦到这个表单输入元素时，屏幕阅读器可以读出标签，让使用辅助技术的用户更容易理解应输入什么数据。</li>
<li>你可以点击关联的标签来聚焦或者激活这个输入元素，就像直接点击输入元素一样。这扩大了元素的可点击区域，让包括使用触屏设备在内的用户更容易激活这个元素。</li>
</ul>
<p>将一个 <code>&lt;label&gt;</code> 和一个 <code>&lt;input&gt;</code> 元素匹配在一起，你需要给 <code>&lt;input&gt;</code> 一个 <code>id</code> 属性。而 <code>&lt;label&gt;</code> 需要一个 <code>for</code> 属性，其值和  <code>&lt;input&gt;</code> 的 <code>id</code> 一样。</p>
<p>另外，你也可以将 <code>&lt;input&gt;</code> 直接放在 <code>&lt;label&gt;</code> 里，此时则不需要 <code>for</code> 和 <code>id</code> 属性，因为关联已隐含存在</p>
</li>
<li><p>给父元素overflow：hidden；zoom：1；清除浮动。</p>
</li>
<li><p>移动端布局</p>
<ol>
<li>做移动端的两种方式，一个项目分为PC端适配和移动端布局，判断设备进行切换</li>
<li>一种PC移动端同时适配的响应式页面，适应pc页面和移动端页面，@media</li>
<li>@media screen and(max-width:300px)当页面宽度小于300像素时，使用此内容中的样式</li>
<li>宽度设为100%，盒子自动继承父盒子宽度</li>
</ol>
<p>轮播图</p>
<figure class="hljs highlight"><table><tr><td class="code"><pre><code class="hljs css">&lt;div class="btnList"&gt;<br>            &lt;div class="btn pre"&gt;&lt;&lt;/div&gt;<br>            &lt;div class="btn next"&gt;&gt;&lt;/div&gt;<br>        &lt;/div&gt;<br>.swiper .btn.pre&#123;width: 100px;height: 60px;line-height: 60px;text-align: center;background-color: rgba(0,0, 0, 0.6);color: #ffffff;position: absolute;top: calc(50% - 30px);font-size: 35px;&#125;<br><br>.swiper .btn.next&#123;width: 100px;height: 60px;line-height: 60px;text-align: center;background-color: rgba(0,0, 0, 0.6);color: #ffffff;position: absolute;right: 0;;top: calc(50% - 30px);font-size: 35px;&#125;<br></code></pre></td></tr></table></figure>

<figure class="hljs highlight js"><table><tr><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> preBtn = <span class="hljs-built_in">document</span>.querySelector(<span class="hljs-string">".swiper .pre"</span>);<br>        <span class="hljs-keyword">var</span> nextBtn = <span class="hljs-built_in">document</span>.querySelector(<span class="hljs-string">".swiper .next"</span>);<br>        <span class="hljs-keyword">var</span> imgListDivs = <span class="hljs-built_in">document</span>.querySelectorAll(<span class="hljs-string">".swiper .imgItems"</span>);<br>        <span class="hljs-comment">// 图片数组的索引</span><br>        <span class="hljs-keyword">var</span> currentImg = <span class="hljs-number">0</span>;<br>        <span class="hljs-comment">// 点击事件</span><br>        nextBtn.onclick=<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;<br>            currentImg = currentImg + <span class="hljs-number">1</span>;<br>            <span class="hljs-comment">// 点击到最后一张图片，回到起点</span><br>            <span class="hljs-keyword">if</span>(currentImg&gt;=imgListDivs.length)&#123;<br>                currentImg= <span class="hljs-number">0</span>;<br>            &#125;<br>            <span class="hljs-comment">// 初始化，将所有的img列表的active去掉</span><br>            imgListDivs.forEach(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">item,i</span>)</span>&#123;<br>                item.classList.remove(<span class="hljs-string">"active"</span>)<br>            &#125;)<br>            <span class="hljs-comment">// 点击后索引加1，active移动到下一个元素显示下一张图片</span><br>            imgListDivs[currentImg].classList.add(<span class="hljs-string">"active"</span>)<br>            <br>        &#125;<br>        preBtn.onclick=<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;<br>            currentImg = currentImg - <span class="hljs-number">1</span>;<br>            <span class="hljs-keyword">if</span>(currentImg&lt;<span class="hljs-number">0</span>)&#123;<br>                currentImg= imgListDivs.length<span class="hljs-number">-1</span>;<br>            &#125;<br>            <span class="hljs-comment">// 初始化，将所有的img列表的active去掉</span><br>            imgListDivs.forEach(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">item,i</span>)</span>&#123;<br>                item.classList.remove(<span class="hljs-string">"active"</span>)<br>            &#125;)<br>            imgListDivs[currentImg].classList.add(<span class="hljs-string">"active"</span>)<br>            <br>        &#125;<br></code></pre></td></tr></table></figure>

</li>
</ul>
]]></content>
      <categories>
        <category>前端</category>
        <category>CSS</category>
      </categories>
      <tags>
        <tag>CSS3</tag>
      </tags>
  </entry>
  <entry>
    <title>Js中的函数</title>
    <url>/2019/05/16/2020-05-16%E5%87%BD%E6%95%B0/</url>
    <content><![CDATA[<h1 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h1><h2 id="函数定义方式如下："><a href="#函数定义方式如下：" class="headerlink" title="函数定义方式如下："></a>函数定义方式如下：</h2><a id="more"></a>

<figure class="hljs highlight javascript"><table><tr><td class="code"><pre><code class="hljs javascript"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">abs</span>(<span class="hljs-params">x</span>) </span>&#123;<br>    <span class="hljs-keyword">if</span> (x &gt;= <span class="hljs-number">0</span>) &#123;<br>        <span class="hljs-keyword">return</span> x;<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-keyword">return</span> -x;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>

<p>上述abs()函数的定义如下：</p>
<ul>
<li>function指出这是一个函数定义；</li>
<li>abs是函数的名称；</li>
<li>(x)括号内列出函数的参数，多个参数以，分割；</li>
<li>{…}之间的代码是函数体，可以包含若干语句，甚至可以没有任何语句。</li>
</ul>
<p>函数体内部的语句在执行时，一旦执行到return时，函数就执行完毕，并将结果返回。所以，函数内部通过条件判断可以实现非常复杂的逻辑。如果没有return语句，函数执行完毕也会返回结果，只是结果为undefined。</p>
<p>例：</p>
<figure class="hljs highlight javascript"><table><tr><td class="code"><pre><code class="hljs javascript"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">f1</span>(<span class="hljs-params">x,y</span>)</span>&#123;<br><span class="hljs-keyword">var</span> sum=x+y;<span class="hljs-comment">//没有返回值</span><br>&#125;<br><span class="hljs-keyword">var</span> result=f1(<span class="hljs-number">10</span>,<span class="hljs-number">20</span>);<br><span class="hljs-built_in">console</span>.log(result);<span class="hljs-comment">//undefined</span><br></code></pre></td></tr></table></figure>

<p>由于函数也是也是一个对象，上述定义的abs()函数实际上是一个函数对象，而函数名abs可以视为指向该函数的变量</p>
<p>第二种定义函数的方式：</p>
<figure class="hljs highlight javascript"><table><tr><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> abs = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">x</span>) </span>&#123;<br>    <span class="hljs-keyword">if</span> (x &gt;= <span class="hljs-number">0</span>) &#123;<br>        <span class="hljs-keyword">return</span> x;<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-keyword">return</span> -x;<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure>

<p>这种方式下，function(x){}是一个匿名函数，它没有函数名。但是，这个函数赋值给了变量abs，所以，通过变量abs就可以调用该函数，这种方法需要在函数体末尾加一个；，表示赋值语句结束。</p>
<h2 id="函数的arguments"><a href="#函数的arguments" class="headerlink" title="函数的arguments"></a>函数的arguments</h2><p><code>JavasScript</code>函数有一个名为<code>arguments</code>对象的内置对象，arguments 对象包含函数调用时使用的参数数组</p>
<h3 id="Call"><a href="#Call" class="headerlink" title="Call()"></a>Call()</h3><p>通过<code>call()</code>能够使用属于另一个对象的方法</p>
<figure class="hljs highlight javascript"><table><tr><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> person = &#123;<br>    <span class="hljs-attr">fullName</span>: <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">this</span>.firstName + <span class="hljs-string">" "</span> + <span class="hljs-keyword">this</span>.lastName;<br>    &#125;<br>&#125;<br><span class="hljs-keyword">var</span> person1 = &#123;<br>    <span class="hljs-attr">firstName</span>:<span class="hljs-string">"Bill"</span>,<br>    <span class="hljs-attr">lastName</span>: <span class="hljs-string">"Gates"</span>,<br>&#125;<br><span class="hljs-keyword">var</span> person2 = &#123;<br>    <span class="hljs-attr">firstName</span>:<span class="hljs-string">"Steve"</span>,<br>    <span class="hljs-attr">lastName</span>: <span class="hljs-string">"Jobs"</span>,<br>&#125;<br>person.fullName.call(person1);  <span class="hljs-comment">// 将返回 "Bill Gates"</span><br></code></pre></td></tr></table></figure>

<p>call的第一个参数指定了<code>this</code>的指向，往后的参数被依次传入函数</p>
<figure class="hljs highlight javascript"><table><tr><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> func = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"> a, b, c </span>)</span>&#123; <br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-keyword">this</span> === <span class="hljs-built_in">window</span>); <span class="hljs-comment">// 输出:true</span><br>&#125;;<br>func.apply( <span class="hljs-literal">null</span>, [ <span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span> ] );<br></code></pre></td></tr></table></figure>

<p>如果第一个参数传<code>null</code>,函数体内的 this 会指 向默认的宿主对象,在浏览器中则是 window</p>
<p><strong>所以call的第一个作用就是改变this的指向</strong></p>
<figure class="hljs highlight javascript"><table><tr><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> obj1=&#123; <br>    <span class="hljs-attr">name</span>: <span class="hljs-string">'sven'</span><br>&#125;;<br><span class="hljs-keyword">var</span> obj2=&#123; <br>    <span class="hljs-attr">name</span>: <span class="hljs-string">'anne'</span><br>&#125;;<br><span class="hljs-built_in">window</span>.name = <span class="hljs-string">'window'</span>;<br><span class="hljs-keyword">var</span> getName = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123; <br>    <span class="hljs-built_in">console</span>.log ( <span class="hljs-keyword">this</span>.name );<br>&#125;;<br>getName(); <span class="hljs-comment">// 输出: window</span><br>getName.call( obj1 );<span class="hljs-comment">// 输出: sven</span><br>getName.call(obj2 ); <span class="hljs-comment">// 输出: anne</span><br></code></pre></td></tr></table></figure>

<p>箭头函数的几个使用注意点。</p>
<p>（1）函数体内的<code>this</code>对象，就是定义时所在的对象，而不是使用时所在的对象。</p>
<p>（2）不可以当作构造函数，也就是说，不可以使用<code>new</code>命令，否则会抛出一个错误。</p>
<p>（3）不可以使用<code>arguments</code>对象，该对象在函数体内不存在。如果要用，可以用 rest 参数代替。</p>
<p>（4）不可以使用<code>yield</code>命令，因此箭头函数不能用作 Generator 函数。</p>
<p>冒泡排序</p>
<figure class="hljs highlight javascript"><table><tr><td class="code"><pre><code class="hljs javascript"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">sortArray</span>(<span class="hljs-params">arr</span>) </span>&#123;<br>            <span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> i = <span class="hljs-number">0</span>; i &lt; arr.length - <span class="hljs-number">1</span>; i++) &#123;<br>                <span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> j = <span class="hljs-number">0</span>; j &lt; arr.length - <span class="hljs-number">1</span> - i; j++) &#123;<br>                    <span class="hljs-keyword">if</span> (arr[j] &gt; arr[j + <span class="hljs-number">1</span>]) &#123;<br>                        <span class="hljs-keyword">var</span> temp = arr[j + <span class="hljs-number">1</span>];<br>                        arr[j + <span class="hljs-number">1</span>] = arr[j];<br>                        arr[j] = temp;<br>                    &#125;<br><br>                &#125;<br>            &#125;<br>            <span class="hljs-keyword">return</span> arr;<br>        &#125;<br>        <span class="hljs-built_in">console</span>.log(sortArray([<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">33</span>,<span class="hljs-number">44</span>,<span class="hljs-number">12</span>,<span class="hljs-number">32</span>,<span class="hljs-number">12</span>,<span class="hljs-number">21</span>]));<br></code></pre></td></tr></table></figure>

<p>斐波那契数列</p>
<figure class="hljs highlight javascript"><table><tr><td class="code"><pre><code class="hljs javascript"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">fb</span>(<span class="hljs-params">n</span>)</span>&#123;<br>            <span class="hljs-keyword">var</span> first=<span class="hljs-number">1</span>,second=<span class="hljs-number">1</span>,result=<span class="hljs-number">0</span>;<br>            <span class="hljs-keyword">for</span>(<span class="hljs-keyword">var</span> i=<span class="hljs-number">3</span>;i&lt;=n;i++)&#123;<br>                result=first+second;<br>                first=second;<br>                second=result;<br>            &#125;<br>            <span class="hljs-keyword">return</span> result;<br>        &#125;<br><span class="hljs-number">2.</span><br>&lt;script&gt;<br>    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">fb</span>(<span class="hljs-params">n</span>)</span>&#123;<br>        <span class="hljs-keyword">if</span>(n=<span class="hljs-number">1</span>||n==<span class="hljs-number">2</span>)&#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>        &#125;<br>        <span class="hljs-keyword">return</span> fb(n<span class="hljs-number">-1</span>)+fb(n<span class="hljs-number">-2</span>);<br>    &#125;<br>    &lt;<span class="hljs-regexp">/script&gt;</span><br></code></pre></td></tr></table></figure>

<p>arguments对象伪数组，可以获得调用者传入的所有参数。也就是说，即使函数不定义任何参数，还是可以拿到参数的值。</p>
<figure class="hljs highlight javascript"><table><tr><td class="code"><pre><code class="hljs javascript"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">abs</span>(<span class="hljs-params"></span>) </span>&#123;<br>    <span class="hljs-keyword">if</span> (<span class="hljs-built_in">arguments</span>.length === <span class="hljs-number">0</span>) &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>    &#125;<br>    <span class="hljs-keyword">var</span> x = <span class="hljs-built_in">arguments</span>[<span class="hljs-number">0</span>];<br>    <span class="hljs-keyword">return</span> x &gt;= <span class="hljs-number">0</span> ? x : -x;<br>&#125;<br><br>abs(); <span class="hljs-comment">// 0</span><br>abs(<span class="hljs-number">10</span>); <span class="hljs-comment">// 10</span><br>abs(<span class="hljs-number">-9</span>); <span class="hljs-comment">// 9</span><br><span class="hljs-comment">//求几个数的和可以这样</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">f1</span>(<span class="hljs-params"></span>)</span>&#123;<br>    sum=<span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">var</span> i=<span class="hljs-number">0</span>;i&lt;=<span class="hljs-built_in">arguments</span>.length;i++)&#123;<br>sum+=<span class="hljs-built_in">arguments</span>[i];<br>    &#125;<br>    <span class="hljs-keyword">return</span> sum;<br>&#125;<br></code></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>前端</category>
        <category>JavaScript</category>
      </categories>
      <tags>
        <tag>javascript</tag>
      </tags>
  </entry>
  <entry>
    <title>深入解析CSS层叠、优先级、继承</title>
    <url>/2020/07/02/2020-07-02-CSS%E7%BB%A7%E6%89%BF%E4%B8%8E%E4%BC%98%E5%85%88%E7%BA%A7%E7%AD%89/</url>
    <content><![CDATA[<h2 id="层叠"><a href="#层叠" class="headerlink" title="层叠"></a>层叠</h2><p>对统一元素应用多个规则（样式）时，可能会包含冲突的声明，类似我们通过标签选择器，id选择器，类选择器分别为h1，指定不同字体，那么这个h1最终会采用哪种字体呢。</p>
<p>层叠就这一系列的规则，它决定了当不同选择器为元素设置样式时如何解决冲突。</p>
<a id="more"></a>

<p>层叠会依据三种条件来解决冲突，</p>
<ol>
<li>样式表的来源：样式是从哪里来的，包含我们自己写的样式和浏览器的样式等。</li>
<li>选择器的优先级：在多种选择器中，哪种选择器更重要。</li>
<li>源码的顺序：样式在样式表中出现的顺序。</li>
</ol>
<p>浏览器的默认样式被称作用户代理样式，也就是说让我们不设置样式时，浏览器会自动给元素添加一些样式，它的优先级很低，当我们设置样式时，会覆盖掉浏览器样式。</p>
<h3 id="同时浏览器将优先级分为两部分：HTML的行内样式和选择器样式。"><a href="#同时浏览器将优先级分为两部分：HTML的行内样式和选择器样式。" class="headerlink" title="同时浏览器将优先级分为两部分：HTML的行内样式和选择器样式。"></a>同时浏览器将优先级分为两部分：<strong>HTML的行内样式和选择器样式</strong>。</h3><p>如果使用HTML的style属性写样式，会覆盖掉任何来自样式表的样式</p>
<p>选择器的优先级</p>
<ul>
<li>id选择器的优先级要大于类选择器，那么当我们使用id选择器为h1设置颜色为红色，类选择器设置为黑色，浏览器就会将h1设置为红色，因为id选择器的优先级要高</li>
<li>如果选择器的id选择器更多，比如h1设置了三个id选择器，那么使用两个id选择器的样式会胜出</li>
<li>如果id选择器的数量一致，那么拥有更多类选择器的样式会胜出。</li>
</ul>
<p><strong>如果我们在CSS中写了一个声明，但是没有生效，一般就是被更高的优先级规则覆盖了，所以在大型项目中，通常让优先级尽可能低，这样当我们需要覆盖一些样式时才有更多的选择空间</strong></p>
<p><strong>浏览器遵循三个步骤,即来源、优先级、源码顺序来解析网页上每个元素和每个属性</strong></p>
<p>处理层叠的一些经验</p>
<ol>
<li>尽量不使用ID选择器，就算只使用一个ID也会大幅提高有心计，当需要覆盖这个优先级时，通常找不到另一个有意义的ID</li>
<li>尽量不适用！imporant，它比ID更难覆盖。</li>
</ol>
<h2 id="继承"><a href="#继承" class="headerlink" title="继承"></a>继承</h2><p>将CSS的样式声明叫做层叠值，那么当一个元素没有层叠值时，则可能继承某个祖先元素的值，比如通常给<body>加上一个<code>font-family</code>,那么页面中的<code>祖先元素</code>，都会继承这个字体，就不必给页面的每个元素明确指定字体了。</body></p>
<p>不是所有属性都会继承，通常使一些我们希望被继承的属性，它们主要都是与文本相关的属性<code>color</code>、<code>font</code>、<code>font-family</code>、<code>font-size</code>、<code>font-weight</code>、<code>font-variant、font-style、line-height、letter-spacing、text-align、text-indent</code>、<code>text-transform</code>、<code>white-space</code>以及<code>word-spacing</code>。</p>
<p>使用浏览器开发者工具追踪元素样式信息</p>


<h2 id="特殊值inherit"><a href="#特殊值inherit" class="headerlink" title="特殊值inherit"></a>特殊值inherit</h2><p>当想要用继承替代一个层叠值便可以使用inherit</p>
<p>当body中设置了a链接的全局颜色时，footer的背景颜色为灰色，我们想要footer中链接的颜色继承自footer那么便可使用inherit</p>
<figure class="hljs highlight"><table><tr><td class="code"><pre><code class="hljs css">body a&#123;<br>  color: blue;<br>&#125;<br>footer: &#123;<br>  color: #666;<br>&#125;<br>footer a&#123;<br>  color: inherit; //#666<br>&#125;<br></code></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>前端</category>
        <category>CSS</category>
      </categories>
      <tags>
        <tag>层叠</tag>
        <tag>继承</tag>
      </tags>
  </entry>
  <entry>
    <title>记this的指向</title>
    <url>/2020/08/01/2020-08-01%E8%AE%B0this%E7%9A%84%E6%8C%87%E5%90%91/</url>
    <content><![CDATA[<h2 id="this的指向"><a href="#this的指向" class="headerlink" title="this的指向"></a>this的指向</h2><p>this的指向在函数的定义的时候是确定不了的，只有函数执行的时候才能确定this到底指向谁，所以this的最终指向的是调用它的对象（理论上）</p>
<p>第一个例子</p>
<figure class="hljs highlight javascript"><table><tr><td class="code"><pre><code class="hljs javascript"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">app</span>(<span class="hljs-params"></span>)</span>&#123;<br>    <span class="hljs-keyword">var</span> user = <span class="hljs-string">"bpp"</span>; <br>    <span class="hljs-built_in">console</span>.log(user);<span class="hljs-comment">//undefined</span><br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-keyword">this</span>);<span class="hljs-comment">//window</span><br>&#125;<br>app()在全局作用域<span class="hljs-built_in">window</span>中调用app()<br></code></pre></td></tr></table></figure>

<p>此时this最终指向的是调用它的对象window，相当于<code>window.app()</code></p>
<a id="more"></a>

<p>第二个例子</p>
<figure class="hljs highlight javascript"><table><tr><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> temp = &#123;<br>    <span class="hljs-attr">user</span>: <span class="hljs-string">'name'</span>,<br>    <span class="hljs-attr">fn</span>:<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;<br>        <span class="hljs-built_in">console</span>.log(<span class="hljs-keyword">this</span>.user);<span class="hljs-comment">//name</span><br>    &#125;<br>&#125;<br>temp.fn()<br></code></pre></td></tr></table></figure>

<p>此时因为是对象temp调用了fn，所以this指向它的调用者temp</p>
<p>例子三证明了我们的this指向它的调用者是一个理论上的说法</p>
<figure class="hljs highlight javascript"><table><tr><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> temp = &#123;<br>    <span class="hljs-attr">user</span>: <span class="hljs-string">'name'</span>,<br>    <span class="hljs-attr">fn</span>:<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;<br>        <span class="hljs-built_in">console</span>.log(<span class="hljs-keyword">this</span>.user);<span class="hljs-comment">//name</span><br>    &#125;<br>&#125;<br><span class="hljs-built_in">window</span>.temp.fn()<br></code></pre></td></tr></table></figure>

<p><strong>通过window调用发现this没有指向window</strong></p>
<p>例子四</p>
<figure class="hljs highlight pgsql"><table><tr><td class="code"><pre><code class="hljs undefined">var <span class="hljs-keyword">temp</span> = &#123;<br><span class="hljs-keyword">user</span>:<span class="hljs-string">'yy'</span><br>temp2：&#123;<br> <span class="hljs-keyword">user</span>: <span class="hljs-string">'name'</span>,<br>    fn:<span class="hljs-keyword">function</span>()&#123;<br>        console.log(this.<span class="hljs-keyword">user</span>);//<span class="hljs-type">name</span><br>  &#125;<br> &#125;  <br>&#125;<br><span class="hljs-keyword">temp</span>.temp2.fn()<br></code></pre></td></tr></table></figure>

<p>这里的temp2是通过temp点出来的，this同样没有指向它说明</p>
<ol>
<li>如果一个函数中有this没有通过上一级对象调用，那么它指向window</li>
<li>如果有上一级对象调用，那么this指向它的上一级对象</li>
<li>如果这个函数被多个对象嵌套，那么尽管这个函数被最外层的对象调用，this也指向它的上一级对象。</li>
</ol>
<p><strong>特殊情况</strong></p>
<figure class="hljs highlight javascript"><table><tr><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> temp1 = &#123;<br>    <span class="hljs-attr">b</span>:&#123;<br>        a = <span class="hljs-number">10</span>,<br>        <span class="hljs-attr">fn</span>:<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;<br>        <span class="hljs-built_in">console</span>.log(<span class="hljs-keyword">this</span>.a);<span class="hljs-comment">//undefined</span><br>        <span class="hljs-built_in">console</span>.log(<span class="hljs-keyword">this</span>);<span class="hljs-comment">//window</span><br>  &#125;<br>   &#125;<br>  <br>&#125;<br><span class="hljs-keyword">var</span> j = temp1.b.fn;<br>j()<br></code></pre></td></tr></table></figure>

<p>此时的this没有指向最后调用它的b，因为在fn赋值给变量j的时候函数并没有运行，最终指向的是window</p>
<p>构造函数的this</p>
<figure class="hljs highlight javascript"><table><tr><td class="code"><pre><code class="hljs javascript"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">fn</span>(<span class="hljs-params"></span>)</span>&#123;<br>    <span class="hljs-keyword">this</span>.user= <span class="hljs-string">"aaa"</span>;<br>&#125;<br><span class="hljs-keyword">var</span> a = <span class="hljs-keyword">new</span> fn();<br><span class="hljs-built_in">console</span>.log(a.user);<span class="hljs-comment">//aaa</span><br></code></pre></td></tr></table></figure>

<p>这里之所以对象a可以点出函数Fn里面的user是因为new关键字可以改变this的指向，将这个this指向对象a，为什么我说a是对象，因为用了new关键字就是创建一个对象实例，理解这句话可以想想我们的例子3，我们这里用变量a创建了一个Fn的实例（相当于复制了一份Fn到对象a里面），此时仅仅只是创建，并没有执行，而调用这个函数Fn的是对象a，那么this指向的自然是对象a，那么为什么对象a中会有user，因为你已经复制了一份Fn函数到对象a中，用了new关键字就等同于复制了一份。</p>
<p>　　除了上面的这些以外，我们还可以自行改变this的指向，关于自行改变this的指向请看<a href="http://www.cnblogs.com/pssp/p/5215621.html" target="_blank" rel="noopener">JavaScript中call,apply,bind方法的总结</a>这篇文章，详细的说明了我们如何手动更改this的指向。</p>
<p>当this碰到return时</p>
<figure class="hljs highlight javascript"><table><tr><td class="code"><pre><code class="hljs javascript"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">fn</span>(<span class="hljs-params"></span>)</span>&#123;<br>    <span class="hljs-keyword">this</span>.uer=<span class="hljs-string">"aaa"</span>;<br>    <span class="hljs-keyword">return</span> &#123;&#125;<br>&#125;<br><span class="hljs-keyword">var</span> a = <span class="hljs-keyword">new</span> fn();<br><span class="hljs-built_in">console</span>.log(a.user); <span class="hljs-comment">//undefined</span><br></code></pre></td></tr></table></figure>

<figure class="hljs highlight javascript"><table><tr><td class="code"><pre><code class="hljs javascript"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">fn</span>(<span class="hljs-params"></span>)  <br></span>&#123;  <br>    <span class="hljs-keyword">this</span>.user = <span class="hljs-string">'aaaa'</span>;  <br>    <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>&#125;<br><span class="hljs-keyword">var</span> a = <span class="hljs-keyword">new</span> fn;  <br><span class="hljs-built_in">console</span>.log(a.user); <span class="hljs-comment">//aaaa</span><br></code></pre></td></tr></table></figure>

<p><strong>如果返回值是一个对象，那么this指向的就是那个返回的对象，如果返回值不是一个对象那么this还是指向函数的实例。</strong></p>
<h2 id="补充"><a href="#补充" class="headerlink" title="补充"></a>补充</h2><p>在严格模式中默认的this不再时window，而是undefined</p>
<p>new操作符会改变this的指向问题</p>
<figure class="hljs highlight javascript"><table><tr><td class="code"><pre><code class="hljs javascript"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">fn</span>(<span class="hljs-params"></span>)</span>&#123;<br>    <span class="hljs-keyword">this</span>.user= <span class="hljs-string">"aaa"</span>;<br>&#125;<br><span class="hljs-keyword">var</span> a = <span class="hljs-keyword">new</span> fn();<br><span class="hljs-built_in">console</span>.log(a.user);<span class="hljs-comment">//aaa</span><br></code></pre></td></tr></table></figure>

<p>为什么this会指向a？首先new关键字会创建一个空的对象，然后会自动调用一个函数（比如apply）方法，将this指向这个空对象，这样的化函数内部的this就会被这个空的对象替代</p>
<h2 id="Vue中的this"><a href="#Vue中的this" class="headerlink" title="Vue中的this"></a>Vue中的this</h2><p>我们可以看到在vue的组件中，我们调用了某个ui组件，使用的使用都会用到this，并且在获取数据的时候也会用到this</p>


<p>获取用户列表数据</p>


<p>使用elementui框架的弹框组件</p>
<p>Vue中的this指向当前组件的实例</p>
<p>使用箭头函数没有自己的this，所以指向组件当前的实例</p>
]]></content>
      <categories>
        <category>前端</category>
        <category>JavaScript</category>
      </categories>
      <tags>
        <tag>JS</tag>
      </tags>
  </entry>
  <entry>
    <title>Session&amp;&amp;cookie</title>
    <url>/2020/10/14/2020-10-14Sessioncookie/</url>
    <content><![CDATA[<p>Session和Cookie产生的原因：</p>
<p>因为Http的一个显著特征为无状态！无状态意味着它不记录请求它的用户信息，无法区分是否来自同一个用户。</p>
<a id="more"></a>

<h2 id="Session"><a href="#Session" class="headerlink" title="Session"></a>Session</h2><h3 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h3><p>在计算机中，尤其是在网络应用中，称为“会话控制”。Session 对象存储特定用户会话所需的属性及配置信息。这样，当用户在应用程序的 Web 页之间跳转时，存储在 Session 对象中的变量将不会丢失，而是在整个用户会话中一直存在下去。当用户请求来自应用程序的 Web 页时，如果该用户还没有会话，则 Web 服务器将自动创建一个 Session 对象。当会话过期或被放弃后，服务器将终止该会话。</p>
<p>session是另一种记录服务器和客户端会话状态的机制。</p>
<ol>
<li>用户第一次请求服务器时，服务器端会生成一个sessionid</li>
<li>服务器端将生成的sessionid返回给客户端，通过set-cookie</li>
<li>客户端收到sessionid会将它保存在cookie中，当客户端再次访问服务端时会带上这个sessionid</li>
<li>当服务端再次接收到来自客户端的请求时，会先去检查是否存在sessionid，不存在就新建一个sessionid重复1,2的流程，如果存在就去遍历服务端的session文件，找到与这个sessionid相对应的文件，文件中的键值便是sessionid，值为当前用户的一些信息</li>
<li>此后的请求都会交换这个 Session ID，进行有状态的会话。</li>
</ol>


<h2 id="Session的实现方式"><a href="#Session的实现方式" class="headerlink" title="Session的实现方式"></a>Session的实现方式</h2><p>1、借助Cookie的sessionId发送的方式</p>
<p>2、通过LocalStorage的方式</p>
<p>3、URL回写的方式，这是客户端禁止接收Cookie之后的方法。</p>
<p>4、隐藏表单字段（hidden）</p>
<h2 id="Cookie"><a href="#Cookie" class="headerlink" title="Cookie"></a>Cookie</h2><p>HTTP Cookie（也叫Web Cookie或浏览器Cookie）是服务器发送到用户浏览器并保存在本地的一小块数据，它会在浏览器下次向同一服务器再发起请求时被携带并发送到服务器上。通常，它用于告知服务端两个请求是否来自同一浏览器，如保持用户的登录状态。Cookie使基于<a href="https://link.zhihu.com/?target=https%3A//developer.mozilla.org/en-US/docs/Web/HTTP/Overview%23HTTP_is_stateless_but_not_sessionless" target="_blank" rel="noopener">无状态</a>的HTTP协议记录稳定的状态信息成为了可能。</p>
<p>可以看到上面实现Session的方式第一项就是借助Cookie去携带Sessionid，所以可以说Cookie也是实现Session的一种方式</p>
<h2 id="Session与Cookie的区别"><a href="#Session与Cookie的区别" class="headerlink" title="Session与Cookie的区别"></a>Session与Cookie的区别</h2><ul>
<li><strong>安全性：</strong> Session 比 Cookie 安全，Session 是存储在服务器端的，Cookie 是存储在客户端的。</li>
<li><strong>存取值的类型不同</strong>：Cookie 只支持存字符串数据，想要设置其他类型的数据，需要将其转换成字符串，Session 可以存任意数据类型。</li>
<li><strong>有效期不同：</strong> Cookie 可设置为长时间保持，比如我们经常使用的默认登录功能，Session 一般失效时间较短，客户端关闭（默认情况下）或者 Session 超时都会失效。</li>
<li><strong>存储大小不同：</strong> 单个 Cookie 保存的数据不能超过 4K，Session 可存储数据远高于 Cookie，但是当访问量过多，会占用过多的服务器资源。</li>
</ul>
]]></content>
      <categories>
        <category>网络</category>
      </categories>
      <tags>
        <tag>Cookie</tag>
        <tag>session</tag>
      </tags>
  </entry>
  <entry>
    <title>迭代器Iterator</title>
    <url>/2020/08/26/2020-08-26-%E8%BF%AD%E4%BB%A3%E5%99%A8Iterator/</url>
    <content><![CDATA[<h1 id="迭代器"><a href="#迭代器" class="headerlink" title="迭代器"></a>迭代器</h1><p>迭代器（Iterator）是一种接口，为各种不同的数据结构提供统一的访问机制，任何数据结构只要部署Iterator接口，就可以完成遍历操作。</p>
<p>1、ES6创造了一种新的遍历命令for…of循环，Iterator接口主要供for…of循环使用</p>
<p>2、原生具备Iterator接口的数据可使用for of遍历</p>
<a id="more"></a>

<p>生成一个数组使用for…of遍历</p>
<figure class="hljs highlight javascript"><table><tr><td class="code"><pre><code class="hljs javascript">&lt;script&gt;<br>       <span class="hljs-keyword">const</span> Arr = [<span class="hljs-string">'唐僧'</span>, <span class="hljs-string">'猪八戒'</span>, <span class="hljs-string">'孙悟空'</span>, <span class="hljs-string">'沙僧'</span>]<br>       <span class="hljs-keyword">for</span>(<span class="hljs-keyword">let</span> i <span class="hljs-keyword">of</span> Arr) &#123;<br>           <span class="hljs-built_in">console</span>.log(i)<span class="hljs-comment">//唐僧 猪八戒 孙悟空 沙僧</span><br>       &#125;<br>   &lt;<span class="hljs-regexp">/script&gt;</span><br></code></pre></td></tr></table></figure>

<p>生成一个数组使用for…in遍历</p>
<figure class="hljs highlight javascript"><table><tr><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> Arr = [<span class="hljs-string">'唐僧'</span>, <span class="hljs-string">'猪八戒'</span>, <span class="hljs-string">'孙悟空'</span>, <span class="hljs-string">'沙僧'</span>]<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">let</span> i <span class="hljs-keyword">in</span> Arr) &#123;<br>            <span class="hljs-built_in">console</span>.log(i)<br>        &#125;<br></code></pre></td></tr></table></figure>



<p><strong>for in循环保存的是键名，而for of保存的是键值</strong></p>
<h2 id="谁可以使用"><a href="#谁可以使用" class="headerlink" title="谁可以使用"></a>谁可以使用</h2><p>可以看到在该数组的方法中有一个<code>Symbol(Symbol.iterator)</code>方法</p>


<figure class="hljs highlight javascript"><table><tr><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">let</span> iterator = Arr[<span class="hljs-built_in">Symbol</span>.iterator]()<br>        <span class="hljs-built_in">console</span>.log(iterator)<br></code></pre></td></tr></table></figure>

{% asset_img 4.png %}

<h2 id="工作原理"><a href="#工作原理" class="headerlink" title="工作原理"></a>工作原理</h2><ol>
<li>创建一个指针对象，指向当前数据结构的起始位置</li>
<li>第一次调用对象<code>next</code>方法，指针自动指向数据结构的第一个成员</li>
<li>接下来不断调用next方法，指针一直往后移动，直到指向最后一个成员</li>
<li>每调用next方法返回一个包含value和done属性的对象</li>
</ol>
<figure class="hljs highlight javascript"><table><tr><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> Arr = [<span class="hljs-string">'唐僧'</span>, <span class="hljs-string">'猪八戒'</span>, <span class="hljs-string">'孙悟空'</span>, <span class="hljs-string">'沙僧'</span>]<br>        <span class="hljs-keyword">let</span> iterator = Arr[<span class="hljs-built_in">Symbol</span>.iterator]()<br>        <span class="hljs-built_in">console</span>.log(iterator.next())<br>        <span class="hljs-built_in">console</span>.log(iterator.next())<br>        <span class="hljs-built_in">console</span>.log(iterator.next())<br>        <span class="hljs-built_in">console</span>.log(iterator.next())<br>        <span class="hljs-built_in">console</span>.log(iterator.next())<br></code></pre></td></tr></table></figure>



<p>当<code>done</code>为true时，表示循环已经完成</p>
<h2 id="自定义遍历数据"><a href="#自定义遍历数据" class="headerlink" title="自定义遍历数据"></a>自定义遍历数据</h2><figure class="hljs highlight javascript"><table><tr><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> banji = &#123;<br>        <span class="hljs-attr">name</span>: <span class="hljs-string">"终极一班"</span>,<br>        <span class="hljs-attr">stus</span>: [<br>            <span class="hljs-string">'xiaoming'</span>,<br>            <span class="hljs-string">'xiaobai'</span>,<br>            <span class="hljs-string">'xiaohei'</span>,<br>            <span class="hljs-string">'xiaoli'</span>,<br>            <span class="hljs-string">'xiaoning'</span><br>        ],<br>        [<span class="hljs-built_in">Symbol</span>.iterator]()&#123;<br>            <span class="hljs-keyword">let</span> index = <span class="hljs-number">0</span><br>            <span class="hljs-keyword">return</span> &#123;<br>                <span class="hljs-attr">next</span>: <span class="hljs-function"><span class="hljs-params">()</span>=&gt;</span>&#123;<br>                    <span class="hljs-keyword">if</span>(index&lt; <span class="hljs-keyword">this</span>.stus.length)&#123;<br>                        <span class="hljs-keyword">const</span> result = &#123;<span class="hljs-attr">value</span>: <span class="hljs-keyword">this</span>.stus[index], <span class="hljs-attr">done</span>: <span class="hljs-literal">false</span>&#125;<br>                        index++<br>                        <span class="hljs-keyword">return</span> result<br>                    &#125;<span class="hljs-keyword">else</span> &#123;<br>                        <span class="hljs-keyword">return</span> &#123;<span class="hljs-attr">value</span>: <span class="hljs-literal">undefined</span>, <span class="hljs-attr">done</span>: <span class="hljs-literal">true</span>&#125;<br>                    &#125;<br>                    <br>                &#125;<br>            &#125;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">let</span> v <span class="hljs-keyword">of</span> banji) &#123;<br>        <span class="hljs-built_in">console</span>.log(v)<br>    &#125;<br><span class="hljs-comment">//其中的if判断可以优化</span><br><span class="hljs-comment">//优化</span><br>       index &lt; <span class="hljs-keyword">this</span>.stus.length ? <br>       &#123;<span class="hljs-attr">value</span>: <span class="hljs-keyword">this</span>.stus[index++], <span class="hljs-attr">done</span>:<span class="hljs-literal">false</span>&#125; : <br>       &#123;<span class="hljs-attr">value</span>: <span class="hljs-literal">undefined</span>, <span class="hljs-attr">done</span>: <span class="hljs-literal">true</span>&#125;<br><span class="hljs-comment">//再优化</span><br><span class="hljs-keyword">let</span> _this = <span class="hljs-keyword">this</span><br><span class="hljs-keyword">return</span> index &lt; _this.stus.length ?<br>&#123;<span class="hljs-attr">value</span>: _this.stus[index++]&#125; :<br>&#123;<span class="hljs-attr">done</span>: <span class="hljs-literal">true</span>&#125;;<br></code></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>前端</category>
        <category>JavaScript</category>
        <category>对象</category>
        <category>控制抽象对象</category>
      </categories>
      <tags>
        <tag>javascript</tag>
        <tag>ES6</tag>
        <tag>迭代器</tag>
      </tags>
  </entry>
  <entry>
    <title>2020_1027mysql</title>
    <url>/2020/10/26/2020-10-27-mysql/</url>
    <content><![CDATA[<h1 id="Msql数据库概述"><a href="#Msql数据库概述" class="headerlink" title="Msql数据库概述"></a>Msql数据库概述</h1><p>Msql为关系数据库，关系数据库的特点：</p>
<ul>
<li>理论基础：集合论和关系代数</li>
<li>具体表象：用二维表（有行和列）组织数据</li>
<li>编程语言：结构化查询语言（sql）</li>
</ul>
<a id="more"></a>

<h2 id="mac的msql启动"><a href="#mac的msql启动" class="headerlink" title="mac的msql启动"></a>mac的msql启动</h2><p>启动mySql服务:sudo /usr/local/mysql/support-files/mysql.server start，<strong>输入本机密码</strong></p>
<p>关闭：sudo /usr/local/mysql/support-files/mysql.server stop</p>
<p>连接mysql：/usr/local/MySQL/bin/mysql -u root -p   输入数据库密码：<strong><strong>**</strong></strong></p>
<p>退出：exit</p>
<h2 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h2><p>查看所有数据库</p>
<figure class="hljs highlight plain"><table><tr><td class="code"><pre><code class="hljs mysql">show databases;<br></code></pre></td></tr></table></figure>

<p>这里要注意加上<strong>分号</strong></p>
<p>切换到指定数据库</p>
<figure class="hljs highlight plain"><table><tr><td class="code"><pre><code class="hljs mysq">use mysql;<br></code></pre></td></tr></table></figure>

<p>查看数据库下所有的表</p>
<figure class="hljs highlight plain"><table><tr><td class="code"><pre><code class="hljs mysql">show tables;<br></code></pre></td></tr></table></figure>

<h3 id="基本操作"><a href="#基本操作" class="headerlink" title="基本操作"></a>基本操作</h3><p>通常可以将SQL分为三类：DDL（数据定义语言）、DML（数据操作语言）、DCL（数据控制语言）。DDL主要用于创建（ceate）、删除（drop）、修改（alter）数据库中的对象，比如创建、删除、和修改二维表；DML主要负责插入数据（insert）、删除数据（delete）、更新数据（update）和查询（select）；DCL通常用于授予权限（grant）和召回权限（revoke）</p>
<ol>
<li><p>DDL数据定义语言</p>
<figure class="hljs highlight plain"><table><tr><td class="code"><pre><code class="hljs mysql">-- 如果存在名为school的数据库就删除它<br>drop database if exists school;<br><br>-- 创建名为school的数据库并设置默认的字符集和排序方式<br>create database school default charset utf8;<br><br>-- 切换到school数据库上下文环境<br>use school;<br><br>-- 创建学院表<br>create table tb_college<br>(<br>collid 		int auto_increment comment &apos;编号&apos;,<br>collname 	varchar(50) not null comment &apos;名称&apos;,<br>collintro 	varchar(500) default &apos;&apos; comment &apos;介绍&apos;,<br>primary key (collid)<br>);<br><br>-- 创建学生表<br>create table tb_student<br>(<br>stuid 		int not null comment &apos;学号&apos;,<br>stuname 	varchar(20) not null comment &apos;姓名&apos;,<br>stusex 		boolean default 1 comment &apos;性别&apos;,<br>stubirth 	date not null comment &apos;出生日期&apos;,<br>stuaddr 	varchar(255) default &apos;&apos; comment &apos;籍贯&apos;,<br>collid 		int not null comment &apos;所属学院&apos;,<br>primary key (stuid),<br>foreign key (collid) references tb_college (collid)<br>);<br><br>-- 创建教师表<br>create table tb_teacher<br>(<br>teaid 		int not null comment &apos;工号&apos;,<br>teaname 	varchar(20) not null comment &apos;姓名&apos;,<br>teatitle 	varchar(10) default &apos;助教&apos; comment &apos;职称&apos;,<br>collid 		int not null comment &apos;所属学院&apos;,<br>primary key (teaid),<br>foreign key (collid) references tb_college (collid)<br>);<br><br>-- 创建课程表<br>create table tb_course<br>(<br>couid 		int not null comment &apos;编号&apos;,<br>couname 	varchar(50) not null comment &apos;名称&apos;,<br>coucredit 	int not null comment &apos;学分&apos;,<br>teaid 		int not null comment &apos;授课老师&apos;,<br>primary key (couid),<br>foreign key (teaid) references tb_teacher (teaid)<br>);<br><br>-- 创建选课记录表<br>create table tb_record<br>(<br>recid 		int auto_increment comment &apos;选课记录编号&apos;,<br>sid 		int not null comment &apos;选课学生&apos;,<br>cid 		int not null comment &apos;所选课程&apos;,<br>seldate 	datetime default now() comment &apos;选课时间日期&apos;,<br>score 		decimal(4,1) comment &apos;考试成绩&apos;,<br>primary key (recid),<br>foreign key (sid) references tb_student (stuid),<br>foreign key (cid) references tb_course (couid),<br>unique (sid, cid)<br>);<br></code></pre></td></tr></table></figure>
</li>
<li><p>DML</p>
<figure class="hljs highlight plain"><table><tr><td class="code"><pre><code class="hljs mysql">-- 插入学院数据<br>insert into tb_college (collname, collintro) values <br>(&apos;计算机学院&apos;, &apos;计算机学院1958年设立计算机专业，1981年建立计算机科学系，1998年设立计算机学院，2005年5月，为了进一步整合教学和科研资源，学校决定，计算机学院和软件学院行政班子合并统一运作、实行教学和学生管理独立运行的模式。 学院下设三个系：计算机科学与技术系、物联网工程系、计算金融系；两个研究所：图象图形研究所、网络空间安全研究院（2015年成立）；三个教学实验中心：计算机基础教学实验中心、IBM技术中心和计算机专业实验中心。&apos;),<br>(&apos;外国语学院&apos;, &apos;四川大学外国语学院设有7个教学单位，6个文理兼收的本科专业；拥有1个一级学科博士授予点，3个二级学科博士授予点，5个一级学科硕士学位授权点，5个二级学科硕士学位授权点，5个硕士专业授权领域，同时还有2个硕士专业学位（MTI）专业；有教职员工210余人，其中教授、副教授80余人，教师中获得中国国内外名校博士学位和正在职攻读博士学位的教师比例占专任教师的60%以上。&apos;),<br>(&apos;经济管理学院&apos;, &apos;四川大学经济学院前身是创办于1905年的四川大学经济科；已故经济学家彭迪先、张与九、蒋学模、胡寄窗、陶大镛、胡代光，以及当代学者刘诗白等曾先后在此任教或学习；1905年，四川大学设经济科；1924年，四川大学经济系成立；1998年，四川大学经济管理学院变更为四川大学经济学院。&apos;);<br><br>-- 插入学生数据<br>insert into tb_student (stuid, stuname, stusex, stubirth, stuaddr, collid) values<br>(1001, &apos;杨逍&apos;, 1, &apos;1990-3-4&apos;, &apos;四川成都&apos;, 1),<br>(1002, &apos;任我行&apos;, 1, &apos;1992-2-2&apos;, &apos;湖南长沙&apos;, 1),<br>(1033, &apos;王语嫣&apos;, 0, &apos;1989-12-3&apos;, &apos;四川成都&apos;, 1),<br>(1572, &apos;岳不群&apos;, 1, &apos;1993-7-19&apos;, &apos;陕西咸阳&apos;, 1),<br>(1378, &apos;纪嫣然&apos;, 0, &apos;1995-8-12&apos;, &apos;四川绵阳&apos;, 1),<br>(1954, &apos;林平之&apos;, 1, &apos;1994-9-20&apos;, &apos;福建莆田&apos;, 1),<br>(2035, &apos;东方不败&apos;, 1, &apos;1988-6-30&apos;, null, 2),<br>(3011, &apos;林震南&apos;, 1, &apos;1985-12-12&apos;, &apos;福建莆田&apos;, 3),<br>(3755, &apos;项少龙&apos;, 1, &apos;1993-1-25&apos;, null, 3),<br>(3923, &apos;杨不悔&apos;, 0, &apos;1985-4-17&apos;, &apos;四川成都&apos;, 3),<br>(4040, &apos;隔壁老王&apos;, 1, &apos;1989-1-1&apos;, &apos;四川成都&apos;, 2);<br><br>-- 删除学生数据<br>delete from tb_student where stuid=4040;<br><br>-- 更新学生数据<br>update tb_student set stuname=&apos;杨过&apos;, stuaddr=&apos;湖南长沙&apos; where stuid=1001;<br><br>-- 插入老师数据<br>insert into tb_teacher (teaid, teaname, teatitle, collid) values <br>(1122, &apos;张三丰&apos;, &apos;教授&apos;, 1),<br>(1133, &apos;宋远桥&apos;, &apos;副教授&apos;, 1),<br>(1144, &apos;杨逍&apos;, &apos;副教授&apos;, 1),<br>(2255, &apos;范遥&apos;, &apos;副教授&apos;, 2),<br>(3366, &apos;韦一笑&apos;, &apos;讲师&apos;, 3);<br><br>-- 插入课程数据<br>insert into tb_course (couid, couname, coucredit, teaid) values <br>(1111, &apos;Python程序设计&apos;, 3, 1122),<br>(2222, &apos;Web前端开发&apos;, 2, 1122),<br>(3333, &apos;操作系统&apos;, 4, 1122),<br>(4444, &apos;计算机网络&apos;, 2, 1133),<br>(5555, &apos;编译原理&apos;, 4, 1144),<br>(6666, &apos;算法和数据结构&apos;, 3, 1144),<br>(7777, &apos;经贸法语&apos;, 3, 2255),<br>(8888, &apos;成本会计&apos;, 2, 3366),<br>(9999, &apos;审计学&apos;, 3, 3366);<br><br>-- 插入选课数据<br>insert into tb_record (sid, cid, seldate, score) values <br>(1001, 1111, &apos;2017-09-01&apos;, 95),<br>(1001, 2222, &apos;2017-09-01&apos;, 87.5),<br>(1001, 3333, &apos;2017-09-01&apos;, 100),<br>(1001, 4444, &apos;2018-09-03&apos;, null),<br>(1001, 6666, &apos;2017-09-02&apos;, 100),<br>(1002, 1111, &apos;2017-09-03&apos;, 65),<br>(1002, 5555, &apos;2017-09-01&apos;, 42),<br>(1033, 1111, &apos;2017-09-03&apos;, 92.5),<br>(1033, 4444, &apos;2017-09-01&apos;, 78),<br>(1033, 5555, &apos;2017-09-01&apos;, 82.5),<br>(1572, 1111, &apos;2017-09-02&apos;, 78),<br>(1378, 1111, &apos;2017-09-05&apos;, 82),<br>(1378, 7777, &apos;2017-09-02&apos;, 65.5),<br>(2035, 7777, &apos;2018-09-03&apos;, 88),<br>(2035, 9999, default, null),<br>(3755, 1111, default, null),<br>(3755, 8888, default, null),<br>(3755, 9999, &apos;2017-09-01&apos;, 92);<br></code></pre></td></tr></table></figure>

<figure class="hljs highlight plain"><table><tr><td class="code"><pre><code class="hljs mysql">-- 查询所有学生信息<br>select * from tb_student;<br><br>-- 查询所以课程名称及学分（投影和别名）<br>select counname, coucredit from tb_course;<br>select couname as 课程名称, coucredit as 学分 from tb_course;<br><br>-- 查询所以学生的姓名和性别（条件运算）<br>select stuname as 姓名, case stusex when 1 then &apos;男&apos; else &apos;女&apos; end as 性别 from tb_student;<br>select stuname as 姓名, if(stusex, &apos;男&apos;, &apos;女&apos;) as 性别 from tb_student;<br><br>-- 查询所有女学生的姓名和出生日期(筛选)<br>select stuname, stubirth from tb_student where stusex=0;<br><br>-- 查询所有80后学生的姓名、性别和出生日期(筛选)<br>select stuname, stusex, stubirth from tb_student where stubirth&gt;=&apos;1980-1-1&apos; and stubirth&lt;=&apos;1989-12-31&apos;;<br>select stuname, stusex, stubirth from tb_student where stubirth between &apos;1980-1-1&apos; and &apos;1989-12-31&apos;;<br><br>-- 查询姓&quot;杨&quot;的学生姓名和性别(模糊)<br>select stuname, stusex from tb_student where stuname like &apos;杨%&apos;;<br><br>-- 查询姓&quot;杨&quot;名字两个字的学生姓名和性别(模糊)<br>select stuname, stusex from tb_student where stuname like &apos;杨_&apos;;<br><br>-- 查询姓&quot;杨&quot;名字三个字的学生姓名和性别(模糊)<br>select stuname, stusex from tb_student where stuname like &apos;杨__&apos;;<br><br>-- 查询名字中有&quot;不&quot;字或&quot;嫣&quot;字的学生的姓名(模糊)<br>select stuname, stusex from tb_student where stuname like &apos;%不%&apos; or stuname like &apos;%嫣%&apos;;<br><br>-- 查询没有录入家庭住址的学生姓名(空值)<br>select stuname from tb_student where stuaddr is null;<br><br>-- 查询录入了家庭住址的学生姓名(空值)<br>select stuname from tb_student where stuaddr is not null;<br><br>-- 查询学生选课的所有日期(去重)<br>select distinct seldate from tb_record;<br><br>-- 查询学生的家庭住址(去重)<br>select distinct stuaddr from tb_student where stuaddr is not null;<br><br>-- 查询男学生的姓名和生日按年龄从大到小排列(排序)<br>select stuname as 姓名, datediff(curdate(), stubirth) div 365 as 年龄 from tb_student where stusex=1 order by 年龄 desc;<br><br>-- 查询年龄最大的学生的出生日期(聚合函数)<br>select min(stubirth) from tb_student;<br><br>-- 查询年龄最小的学生的出生日期(聚合函数)<br>select max(stubirth) from tb_student;<br><br>-- 查询男女学生的人数(分组和聚合函数)<br>select stusex, count(*) from tb_student group by stusex;<br><br>-- 查询课程编号为1111的课程的平均成绩(筛选和聚合函数)<br>select avg(score) from tb_record where cid=1111;<br><br>-- 查询学号为1001的学生所有课程的平均分(筛选和聚合函数)<br>select avg(score) from tb_record where sid=1001;<br><br>-- 查询每个学生的学号和平均成绩(分组和聚合函数)<br>select sid as 学号, avg(score) as 平均分 from tb_record group by sid;<br><br>-- 查询平均成绩大于等于90分的学生的学号和平均成绩<br>-- 分组以前的筛选使用where子句 / 分组以后的筛选使用having子句<br>select sid as 学号, avg(score) as 平均分 from tb_record group by sid having 平均分&gt;=90;<br><br>-- 查询年龄最大的学生的姓名(子查询/嵌套的查询)<br>select stuname from tb_student where stubirth=( select min(stubirth) from tb_student );<br><br>-- 查询年龄最大的学生姓名和年龄(子查询+运算)<br>select stuname as 姓名, datediff(curdate(), stubirth) div 365 as 年龄 from tb_student where stubirth=( select min(stubirth) from tb_student );<br><br>-- 查询选了两门以上的课程的学生姓名(子查询/分组条件/集合运算)<br>select stuname from tb_student where stuid in ( select stuid from tb_record group by stuid having count(stuid)&gt;2 );<br><br>-- 查询学生姓名、课程名称以及成绩(连接查询)<br>select stuname, couname, score from tb_student t1, tb_course t2, tb_record t3 where stuid=sid and couid=cid and score is not null;<br><br>-- 查询学生姓名、课程名称以及成绩按成绩从高到低查询第11-15条记录(内连接+分页)<br>select stuname, couname, score from tb_student inner join tb_record on stuid=sid inner join tb_course on couid=cid where score is not null order by score desc limit 5 offset 10;<br><br>select stuname, couname, score from tb_student inner join tb_record on stuid=sid inner join tb_course on couid=cid where score is not null order by score desc limit 10, 5;<br><br>-- 查询选课学生的姓名和平均成绩(子查询和连接查询)<br>select stuname, avgmark from tb_student, ( select sid, avg(score) as avgmark from tb_record group by sid ) temp where stuid=sid;<br><br>select stuname, avgmark from tb_student inner join ( select sid, avg(score) as avgmark from tb_record group by sid ) temp on stuid=sid;<br><br>-- 查询每个学生的姓名和选课数量(左外连接和子查询)<br>select stuname, ifnull(total, 0) from tb_student left outer join ( select sid, count(sid) as total from tb_record group by sid ) temp on stuid=sid;<br></code></pre></td></tr></table></figure>



</li>
</ol>
]]></content>
      <categories>
        <category>数据库</category>
      </categories>
      <tags>
        <tag>mysql</tag>
      </tags>
  </entry>
  <entry>
    <title>20201029Http</title>
    <url>/2020/10/29/2020-10-29-Http%E7%AE%80%E4%BB%8B/</url>
    <content><![CDATA[<h2 id="Http简介"><a href="#Http简介" class="headerlink" title="Http简介"></a>Http简介</h2><p>HTTP协议是Hyper Text Transfer Protocol（超文本传输协议）的缩写,是用于从万维网（WWW:World Wide Web ）服务器传输超文本到本地浏览器的传送协议。</p>
<p>HTTP是一个基于TCP/IP通信协议来传递数据（HTML 文件, 图片文件, 查询结果等）。</p>
<p>HTTP是一个属于应用层的面向对象的协议，由于其简捷、快速的方式，适用于分布式超媒体信息系统。它于1990年提出，经过几年的使用与发展，得到不断地完善和扩展。目前在WWW中使用的是HTTP/1.0的第六版，HTTP/1.1的规范化工作正在进行之中，而且HTTP-NG(Next Generation of HTTP)的建议已经提出。</p>
<a id="more"></a>

<p>HTTP协议工作于客户端-服务端架构为上。浏览器作为HTTP客户端通过URL向HTTP服务端即WEB服务器发送所有请求。Web服务器根据接收到的请求后，向客户端发送响应信息。</p>


<h2 id="http的工作方式"><a href="#http的工作方式" class="headerlink" title="http的工作方式"></a>http的工作方式</h2><p><strong>http</strong>采用请求/响应的工作方式</p>
<p>服务器不断监听TCP端口等待客户端发送请求，当客户端发送请求是建立TCP连接，以http请求报文的形式发送页面请求，服务器以响应报文的方式发送响应，</p>
<p>http的每次通信都必须包含头部信息（HTTP header），用来描述一些元数据，其他的新增功能还包括状态吗（status code）,多字符集支持、多部分发送、权限（authorization）、缓存（cache）、内容编码（content encoding）等</p>
<h3 id="请求格式"><a href="#请求格式" class="headerlink" title="请求格式"></a>请求格式</h3><figure class="hljs highlight http"><table><tr><td class="code"><pre><code class="hljs http"><span class="hljs-keyword">GET</span> <span class="hljs-string">/</span> HTTP/1.0<br><span class="hljs-attribute">User-Agent</span>: Mozilla/5.0 (Macintosh; Intel Mac OS X 10_10_5)<br><span class="hljs-attribute">Accept</span>: */*<br></code></pre></td></tr></table></figure>

<p>Accept：在发送请求的时候告诉服务器自己可以接受哪些数据格式</p>
<h3 id="响应格式"><a href="#响应格式" class="headerlink" title="响应格式"></a>响应格式</h3><figure class="hljs highlight http"><table><tr><td class="code"><pre><code class="hljs http">HTTP/1.0 <span class="hljs-number">200</span> OK <br><span class="hljs-attribute">Content-Type</span>: text/plain<br><span class="hljs-attribute">Content-Length</span>: 137582<br><span class="hljs-attribute">Expires</span>: Thu, 05 Dec 1997 16:00:00 GMT<br><span class="hljs-attribute">Last-Modified</span>: Wed, 5 August 1996 15:55:28 GMT<br><span class="hljs-attribute">Server</span>: Apache 0.84<br><br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span>Hello World<span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span></span><br></code></pre></td></tr></table></figure>

<h3 id="content-Type字段"><a href="#content-Type字段" class="headerlink" title="content Type字段"></a>content Type字段</h3><p>关于字符的编码，1.0版本规定，头部信息必须是ASCII码，后面的数据可以是任何形式，所以服务器响应的时候必须告诉客户端数据是什么格式，content Type的作用就是表明数据的格式</p>
<ul>
<li>text/plain</li>
<li>text/html</li>
<li>text/css</li>
<li>image/jpeg</li>
<li>image/png</li>
<li>image/svg+xml</li>
<li>audio/mp4</li>
<li>video/mp4</li>
<li>application/javascript</li>
<li>application/pdf</li>
<li>application/zip</li>
<li>application/atom+xml</li>
</ul>
<h3 id="关于http1-0的缺点"><a href="#关于http1-0的缺点" class="headerlink" title="关于http1.0的缺点"></a>关于http1.0的缺点</h3><p>每个TCP连接只能发送一个请求，发送数据完毕，连接就要关闭，如果还要请求其他资源，就必须再新建一个连接。TCP新建的成本很高，需要进行三次握手，所以当网页加载外部资源越来越多的时候，这个问题就愈发突出了</p>
<h2 id="HTTP1-1"><a href="#HTTP1-1" class="headerlink" title="HTTP1.1"></a>HTTP1.1</h2><p>1.1版最大的变化就是引入了持久连接，即TCP连接默认不关闭，可以被多个请求服用，不用声明Connection：keep-alive</p>
<p>客户端和服务器发现对方一段时间没有活动，就可以主动关闭连接。</p>
<h2 id="HTTP请求方法"><a href="#HTTP请求方法" class="headerlink" title="HTTP请求方法"></a>HTTP请求方法</h2><p>GET请求：请求指定页面的信息，并返回实体主体</p>
<p>HEAD：类似get请求，只不过返回的响应中没有具体的内容，用于获取报头</p>
<p>POST：像指定资源提交数据进行处理请求，（例如提交表单或上传文件，数据被包含在请求体中</p>
<p>PUT：从客户端向服务器传送的数据取代指定的文档的内容</p>
<p>DELETE：请求服务器删除指定页面</p>
]]></content>
      <categories>
        <category>网络</category>
      </categories>
      <tags>
        <tag>Http</tag>
      </tags>
  </entry>
  <entry>
    <title>Node学习入门2</title>
    <url>/2019/10/22/2019-10-22-node-02/</url>
    <content><![CDATA[<h2 id="Node安装检测"><a href="#Node安装检测" class="headerlink" title="Node安装检测"></a>Node安装检测</h2><p>cmd中输入<code>node --version</code>/<code>node -v</code>检测版本号</p>
<img src="/2019/10/22/2019-10-22-node-02/01.png">

<a id="more"></a>

<h2 id="HelloWorld"><a href="#HelloWorld" class="headerlink" title="HelloWorld"></a>HelloWorld</h2><ol>
<li><p>创建编写Javascript脚本</p>
<img src="/2019/10/22/2019-10-22-node-02/02.png">
</li>
<li><p>打开终端，定位到脚本文件所属目录（切换盘符输入d:,然后盘符内相关目录<code>cd 03Nodejs学习记录及代码练习\01</code>）</p>
</li>
<li><p>输入node &lt;”00-helloworld.js”&gt;</p>
<img src="/2019/10/22/2019-10-22-node-02/03.png">

</li>
</ol>
<p><strong>切记文件名字不要起node.js，并且最好不要起中文</strong></p>
<h2 id="Node-js中有没有BOM、DOM"><a href="#Node-js中有没有BOM、DOM" class="headerlink" title="Node.js中有没有BOM、DOM"></a>Node.js中有没有BOM、DOM</h2><ol>
<li><p>新建js文件</p>
<img src="/2019/10/22/2019-10-22-node-02/05.png">
</li>
<li><p>运行结果</p>
<img src="/2019/10/22/2019-10-22-node-02/04.png">

<p>可以看到报了引用错误，window is not defined，可见Node.js中没有BOM和DOM</p>
</li>
</ol>
<h2 id="Node的文件操作"><a href="#Node的文件操作" class="headerlink" title="Node的文件操作"></a>Node的文件操作</h2><p>Node具有文件操作的能力，<code>file-system</code>文件系统，我们简写为<code>fs</code></p>
<p><strong>在Node中进行文件操作必须引入文件系统</strong></p>
<h3 id="读取文件"><a href="#读取文件" class="headerlink" title="读取文件"></a>读取文件</h3><figure class="hljs highlight javascript"><table><tr><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">//使用require()方法引用fs核心模块</span><br><span class="hljs-keyword">var</span> fs = <span class="hljs-built_in">require</span>(<span class="hljs-string">'fs'</span>)<br><span class="hljs-comment">//读取文件</span><br><span class="hljs-comment">//第一个参数：文件地址</span><br><span class="hljs-comment">//第二个参数：回调函数</span><br><span class="hljs-comment">//回调函数中有两个参数(data 和 error)</span><br><span class="hljs-comment">//成功:error为null   data为数据</span><br><span class="hljs-comment">//失败:error为错误对象  data写入失败</span><br>fs.readFile(<span class="hljs-string">'./data/hello.txt'</span>, <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">error, data</span>)</span>&#123;<br>     <span class="hljs-built_in">console</span>.log(data);<span class="hljs-comment">//自动输入数据</span><br>    <span class="hljs-built_in">console</span>.log(data.toString());<span class="hljs-comment">//转换为字符串输出</span><br>&#125;)<br></code></pre></td></tr></table></figure>

{% asset_img 06.png %}

<h3 id="异步写入文件"><a href="#异步写入文件" class="headerlink" title="异步写入文件"></a>异步写入文件</h3><figure class="hljs highlight javascript"><table><tr><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> fs=<span class="hljs-built_in">require</span>(<span class="hljs-string">'fs'</span>);<br><span class="hljs-comment">//三个参数 </span><br><span class="hljs-comment">// 1.文件写入路径文件名</span><br><span class="hljs-comment">// 2.写入内容</span><br><span class="hljs-comment">// 3.回调函数（参数 error）</span><br><br><span class="hljs-comment">//写入成功  error为null</span><br><span class="hljs-comment">//写入失败  error为错误对象</span><br>fs.writeFile(<span class="hljs-string">'./data/你好Node.md'</span>, <span class="hljs-string">"你好Nodejs！"</span>, <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">error</span>)</span>&#123;<br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">'写入成功'</span>);<br>&#125;)<br></code></pre></td></tr></table></figure>

<h3 id="当文件处理出现错误"><a href="#当文件处理出现错误" class="headerlink" title="当文件处理出现错误"></a>当文件处理出现错误</h3><p>我们在上述回调函数中添加代码<code>console.log(error)</code>,那么在读取成功时返回null，在读取失败时返回错误代码</p>
<p>所以我们可以加入对error的判断代码</p>
<figure class="hljs highlight javascript"><table><tr><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">if</span>(error)&#123;<br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">"读取出错了"</span>);<br>  &#125;<span class="hljs-keyword">else</span>&#123;<br>    <span class="hljs-built_in">console</span>.log(data.toString());<br>  &#125;<br></code></pre></td></tr></table></figure>

<h2 id="简单的HTTP服务"><a href="#简单的HTTP服务" class="headerlink" title="简单的HTTP服务"></a>简单的HTTP服务</h2><figure class="hljs highlight javascript"><table><tr><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">//加载http模块</span><br><span class="hljs-keyword">var</span> http = <span class="hljs-built_in">require</span>(<span class="hljs-string">'http'</span>)<br><span class="hljs-comment">//创建http实例</span><br><span class="hljs-keyword">var</span> server = createServer()<br><span class="hljs-comment">//注册request请求事件，当客户端请求过来，就会自动触发服务器的request事件，然后执行回调函数</span><br>server.on(<span class="hljs-string">'request'</span>,<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;<br>   <span class="hljs-built_in">console</span>.log(<span class="hljs-string">'收到客户端请求了'</span>)<br>&#125;)<br><span class="hljs-comment">//绑定端口号，启动服务器</span><br>server.listen(<span class="hljs-number">3000</span>,<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;<br>  <span class="hljs-built_in">console</span>.log(<span class="hljs-string">'服务器启动成功了，通过127.0.0.1:3000进行访问'</span>)<br>&#125;)<br></code></pre></td></tr></table></figure>

<p>这样服务端启动成功并且接收到请求，浏览器却接收不到响应，一直在等待。。</p>
<h3 id="如何进行响应"><a href="#如何进行响应" class="headerlink" title="如何进行响应"></a>如何进行响应</h3><figure class="hljs highlight javascript"><table><tr><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">//加载http模块</span><br><span class="hljs-keyword">var</span> http = <span class="hljs-built_in">require</span>(<span class="hljs-string">'http'</span>)<br><span class="hljs-comment">//创建http实例</span><br><span class="hljs-keyword">var</span> server = createServer()<br><span class="hljs-comment">//注册request请求事件，当客户端请求过来，就会自动触发服务器的request事件，然后执行回调函数</span><br><span class="hljs-comment">// reuqest请求事件处理函数，共有两个参数</span><br><span class="hljs-comment">//    Request:请求对象   用来获取请求对象信息，例如请求路径</span><br><span class="hljs-comment">//    Response: 响应对象  用来给客户端发送响应信息</span><br>server.on(<span class="hljs-string">'request'</span>,<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">request,response</span>)</span>&#123;<br>   <span class="hljs-built_in">console</span>.log(<span class="hljs-string">'收到客户端请求了,请求地址为'</span> + request.url)<br>    <span class="hljs-comment">//用户请求路径不同响应不同的信息</span><br>    <span class="hljs-keyword">if</span>(request.url == <span class="hljs-string">'/index'</span>)&#123;<br>        response.write(<span class="hljs-string">'hello'</span>)<br>        response.end();<span class="hljs-comment">//告诉客户端：我的话说完了，可以呈递给用户了</span><br>    &#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(request.url == <span class="hljs-string">'/tags'</span>)&#123;<br>        response.write(<span class="hljs-string">'hi'</span>)<br>        response.end();<br>    &#125;<br>&#125;)<br><span class="hljs-comment">//绑定端口号，启动服务器</span><br>server.listen(<span class="hljs-number">3000</span>,<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;<br>  <span class="hljs-built_in">console</span>.log(<span class="hljs-string">'服务器启动成功了，通过127.0.0.1:3000进行访问'</span>)<br>&#125;)<br></code></pre></td></tr></table></figure>

<h2 id="Node中的核心模块"><a href="#Node中的核心模块" class="headerlink" title="Node中的核心模块"></a>Node中的核心模块</h2><p>Node为Javascript提供了很多服务器级别的API,这些API绝大多数都包装到了一个具名的核心模块中了</p>
<p>例如：</p>
<ol>
<li>文件操作的<code>fs</code>模块</li>
<li>http构建服务的<code>http</code>模块</li>
<li><code>path</code>路径操作模块</li>
<li><code>os</code>操作系统信息模块</li>
</ol>
<p>所以以后当知道要引用一个核心模块，就千万别忘了’引用‘</p>
<h3 id="require的两个作用"><a href="#require的两个作用" class="headerlink" title="require的两个作用"></a>require的两个作用</h3><p>require方法的第一个作用就是加载模块，具名的核心模块或者自己编写的模块</p>
<p>例：</p>
<img src="/2019/10/22/2019-10-22-node-02/06.png">

<p><strong>note:相对路径必须加./    如不加会被当做核心模块</strong></p>
<p>在Node中没有全局作用域，只有模块作用域，模块完全封闭，外部与内部无法互相访问，那么模块之间如何进行通信，下面介绍require的第二个作用</p>
<p>拿到被加载文件模块导出的接口对象</p>
<p>每个文件模块都提供了一个对象<code>exports</code>（默认是一个空对象）</p>
<img src="/2019/10/22/2019-10-22-node-02/08.png">

<p>可以看到经过exports挂载的foo可以被a.js访问到，并且b中本身自带的foo并不受影响</p>
]]></content>
      <categories>
        <category>后端</category>
        <category>Node</category>
      </categories>
      <tags>
        <tag>javaScript</tag>
        <tag>Nodejs</tag>
      </tags>
  </entry>
  <entry>
    <title>深拷贝与浅拷贝</title>
    <url>/2020/08/20/2020-8-20%E6%B7%B1%E6%8B%B7%E8%B4%9D%E4%B8%8E%E6%B5%85%E6%8B%B7%E8%B4%9D/</url>
    <content><![CDATA[<h1 id="深拷贝与浅拷贝"><a href="#深拷贝与浅拷贝" class="headerlink" title="深拷贝与浅拷贝"></a>深拷贝与浅拷贝</h1><h2 id="基本类型"><a href="#基本类型" class="headerlink" title="基本类型"></a>基本类型</h2><p>提到深拷贝与浅拷贝就要探讨js中的数据类型，基本类型例如，<code>Number</code>,<code>String</code>等，他们的值是不可变的，动态的修改了基本数据类型的值它的原始值也是不会改变的</p>
<figure class="hljs highlight javascript"><table><tr><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> s = <span class="hljs-string">"abc"</span><br><span class="hljs-built_in">console</span>.log(st[<span class="hljs-number">1</span>]=<span class="hljs-string">"d"</span>)<br><span class="hljs-built_in">console</span>.log(s)<span class="hljs-comment">//abc</span><br></code></pre></td></tr></table></figure>

<a id="more"></a>

<h2 id="引用类型"><a href="#引用类型" class="headerlink" title="引用类型"></a>引用类型</h2><p>引用类型是存放在堆内存中的，变量实际上存放着一个放在栈内存的指针，引用类型可以直接改变它的值</p>
<h2 id="浅拷贝"><a href="#浅拷贝" class="headerlink" title="浅拷贝"></a>浅拷贝</h2><p>浅拷贝是将原对象或数组的引用直接赋给新对象，新数组它们只是原对象的一个引用</p>
<p>首先我们通过赋值复制一个数组</p>
<figure class="hljs highlight javascript"><table><tr><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> obj1 = &#123;<br>       <span class="hljs-string">'name'</span> : <span class="hljs-string">'zhangsan'</span>,<br>       <span class="hljs-string">'age'</span> :  <span class="hljs-string">'18'</span>,<br>       <span class="hljs-string">'language'</span> : [<span class="hljs-number">1</span>,[<span class="hljs-number">2</span>,<span class="hljs-number">3</span>],[<span class="hljs-number">4</span>,<span class="hljs-number">5</span>]],<br>   &#125;;<br><br>   <span class="hljs-keyword">var</span> obj2 = obj1;<br><br><br>   <span class="hljs-keyword">var</span> obj3 = shallowCopy(obj1);<br>   <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">shallowCopy</span>(<span class="hljs-params">src</span>) </span>&#123;<br>       <span class="hljs-keyword">var</span> dst = &#123;&#125;;<br>       <span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> prop <span class="hljs-keyword">in</span> src) &#123;<br>           <span class="hljs-keyword">if</span> (src.hasOwnProperty(prop)) &#123;<br>               dst[prop] = src[prop];<br>           &#125;<br>       &#125;<br>       <span class="hljs-keyword">return</span> dst;<br>   &#125;<br><br>   obj2.name = <span class="hljs-string">"lisi"</span>;<br>   obj3.age = <span class="hljs-string">"20"</span>;<br><br>   obj2.language[<span class="hljs-number">1</span>] = [<span class="hljs-string">"二"</span>,<span class="hljs-string">"三"</span>];<br>   obj3.language[<span class="hljs-number">2</span>] = [<span class="hljs-string">"四"</span>,<span class="hljs-string">"五"</span>];<br><br>   <span class="hljs-built_in">console</span>.log(obj1);  <br>   <span class="hljs-comment">//obj1 = &#123;</span><br>   <span class="hljs-comment">//    'name' : 'lisi',</span><br>   <span class="hljs-comment">//    'age' :  '18',</span><br>   <span class="hljs-comment">//    'language' : [1,["二","三"],["四","五"]],</span><br>   <span class="hljs-comment">//&#125;;</span><br><br>   <span class="hljs-built_in">console</span>.log(obj2);<br>   <span class="hljs-comment">//obj2 = &#123;</span><br>   <span class="hljs-comment">//    'name' : 'lisi',</span><br>   <span class="hljs-comment">//    'age' :  '18',</span><br>   <span class="hljs-comment">//    'language' : [1,["二","三"],["四","五"]],</span><br>   <span class="hljs-comment">//&#125;;</span><br><br>   <span class="hljs-built_in">console</span>.log(obj3);<br>   <span class="hljs-comment">//obj3 = &#123;</span><br>   <span class="hljs-comment">//    'name' : 'zhangsan',</span><br>   <span class="hljs-comment">//    'age' :  '20',</span><br>   <span class="hljs-comment">//    'language' : [1,["二","三"],["四","五"]],</span><br>   <span class="hljs-comment">//&#125;;</span><br></code></pre></td></tr></table></figure>

<p>如果属性是基本数据类型，拷贝的就是基本类型的值，如果属性是引用类型拷贝的就是内存地址，所以如果其中一个对像改变了，这个引用类型的属性或者说是地就会影响到另一个对像。</p>
<h2 id="深拷贝"><a href="#深拷贝" class="headerlink" title="深拷贝"></a>深拷贝</h2><p>创建一个新的对像和数组，将原对象的各个属性的值（数组的所有元素）拷贝过来，<strong>是值而不是引用</strong></p>
<figure class="hljs highlight javascript"><table><tr><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> array = [<br>    &#123; <span class="hljs-attr">number</span>: <span class="hljs-number">1</span> &#125;,<br>    &#123; <span class="hljs-attr">number</span>: <span class="hljs-number">2</span> &#125;,<br>    &#123; <span class="hljs-attr">number</span>: <span class="hljs-number">3</span> &#125;<br>];<br><span class="hljs-keyword">var</span> copyArray = <span class="hljs-built_in">JSON</span>.parse(<span class="hljs-built_in">JSON</span>.stringify(array))<br>copyArray[<span class="hljs-number">0</span>].number = <span class="hljs-number">100</span>;<br><span class="hljs-built_in">console</span>.log(array); <span class="hljs-comment">//  [&#123;number: 1&#125;, &#123; number: 2 &#125;, &#123; number: 3 &#125;]</span><br><span class="hljs-built_in">console</span>.log(copyArray); <span class="hljs-comment">// [&#123;number: 100&#125;, &#123; number: 2 &#125;, &#123; number: 3 &#125;]</span><br></code></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>前端</category>
        <category>JavaScript</category>
        <category>对象</category>
      </categories>
      <tags>
        <tag>javascript</tag>
      </tags>
  </entry>
  <entry>
    <title>字符串总结</title>
    <url>/2019/07/22/2020-7-22%E5%AD%97%E7%AC%A6%E4%B8%B2%E6%80%BB%E7%BB%93/</url>
    <content><![CDATA[<h1 id="string类型"><a href="#string类型" class="headerlink" title="string类型"></a>string类型</h1><h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><p>String类型是字符串的对象包装类型，可以像下面这样使用String构造函数来创建</p>
<figure class="hljs highlight javascript"><table><tr><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> stringObject = <span class="hljs-keyword">new</span> string(<span class="hljs-string">"hello world"</span>);<br></code></pre></td></tr></table></figure>

<p>ECMAScript中字符串是不可改变的，也就是说一旦创建他们的值就是不可改变的，要改变某个变量保存的字符串，首先要先销毁原来的字符串，然后再用另一个包含新值的字符串填充该变量</p>
<a id="more"></a>

<h2 id="模版字符串"><a href="#模版字符串" class="headerlink" title="模版字符串"></a>模版字符串</h2><figure class="hljs highlight javascript"><table><tr><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">//可直接进行换行，解决了传统的拼接方式的繁琐</span><br>$(<span class="hljs-string">'#result'</span>).append(<span class="hljs-string">`<br>  There are &lt;b&gt;<span class="hljs-subst">$&#123;basket.count&#125;</span>&lt;/b&gt; items<br>   in your basket, &lt;em&gt;<span class="hljs-subst">$&#123;basket.onSale&#125;</span>&lt;/em&gt;<br>  are on sale!<br>`</span>);<br></code></pre></td></tr></table></figure>

<h2 id="字符方法"><a href="#字符方法" class="headerlink" title="字符方法"></a>字符方法</h2><h3 id="转化方法"><a href="#转化方法" class="headerlink" title="转化方法"></a>转化方法</h3><ol>
<li>使用<code>toString()</code>基本每个值都有的方法，该方法不接受<strong>null和undefined</strong></li>
<li>String(),属于强制转换，null和undefined返回他们本身</li>
</ol>
<h3 id="常用方法"><a href="#常用方法" class="headerlink" title="常用方法"></a>常用方法</h3><h4 id="length-返回字符串长度"><a href="#length-返回字符串长度" class="headerlink" title=".length:返回字符串长度"></a><code>.length</code>:返回字符串长度</h4><h4 id="indexOf-searchString-position-返回字符串中指定文本的位置（也就是索引）"><a href="#indexOf-searchString-position-返回字符串中指定文本的位置（也就是索引）" class="headerlink" title="indexOf(searchString, ?position)返回字符串中指定文本的位置（也就是索引）"></a><code>indexOf(searchString, ?position)</code>返回字符串中指定文本的位置（也就是索引）</h4><figure class="hljs highlight javascript"><table><tr><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">//可添加一个参数，搜索指定文本的位置，或通过第二个参数限定从第几个索引开始查找</span><br><span class="hljs-keyword">var</span> str = <span class="hljs-string">'The China full of name is China'</span><br><span class="hljs-built_in">console</span>.log(str.indexOf(<span class="hljs-string">'China'</span>)) <span class="hljs-comment">//没设置索引时显示的位于索引4的China</span><br><span class="hljs-built_in">console</span>.log(str.indexOf(<span class="hljs-string">'China'</span>, <span class="hljs-number">15</span>))<span class="hljs-comment">//索引开始的位置，第一个China被跳过</span><br><span class="hljs-comment">//当未查到文本时返回-1</span><br></code></pre></td></tr></table></figure>

<h4 id="lastIndexOf-同理，从字符串后方开始查询"><a href="#lastIndexOf-同理，从字符串后方开始查询" class="headerlink" title="lastIndexOf()同理，从字符串后方开始查询"></a><code>lastIndexOf()</code>同理，从字符串后方开始查询</h4><h4 id="search-方法检索字符串中的字符串"><a href="#search-方法检索字符串中的字符串" class="headerlink" title="search()方法检索字符串中的字符串"></a><code>search()</code>方法检索字符串中的字符串</h4><p>和<code>indexOf()</code>类似，查找指定字符串的位置，不同的是，<code>search()</code>,不接受第二个参数，而<code>indexOf()</code>不接受正则匹配模式</p>
<h4 id="提取部分字符串"><a href="#提取部分字符串" class="headerlink" title="提取部分字符串"></a>提取部分字符串</h4><p><code>slice(start, end)</code>,<code>substring(start, end)</code>,<code>substr(start, end)</code></p>
<h5 id="slice"><a href="#slice" class="headerlink" title="slice()"></a><code>slice()</code></h5><p>截取指定位置，指定个数的字符串</p>
<figure class="hljs highlight javascript"><table><tr><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> str = <span class="hljs-string">"Apple, Banana, Mango"</span>;<br><span class="hljs-keyword">var</span> res = str.slice(<span class="hljs-number">7</span>,<span class="hljs-number">13</span>);<span class="hljs-comment">//Banana,截取索引7到13部分的字符串</span><br><span class="hljs-keyword">var</span> res = str.slice(<span class="hljs-number">-13</span>,<span class="hljs-number">-7</span>);<span class="hljs-comment">//Banana,从倒数第13截取到倒数第7位</span><br><span class="hljs-comment">//当只选择一个参数时，截取从参数索引位置开始后的所有剩余部分</span><br><span class="hljs-keyword">var</span> res = str.slice(<span class="hljs-number">7</span>)；<span class="hljs-comment">//Banana, Mango</span><br><span class="hljs-comment">//参数为负时，选取倒着数索引后的所有字符串</span><br><span class="hljs-keyword">var</span> res = str.slice(<span class="hljs-number">-13</span>)；<span class="hljs-comment">//Banana, Mango</span><br></code></pre></td></tr></table></figure>

<h5 id="substring-与slice-相似，但是不接受负值的索引"><a href="#substring-与slice-相似，但是不接受负值的索引" class="headerlink" title="substring()与slice()相似，但是不接受负值的索引"></a><code>substring()</code>与<code>slice()</code>相似，但是不接受负值的索引</h5><h5 id="substr-也与slice-相似，不同之处为第二个参数不再是结束截取的索引，而是要截取的长度"><a href="#substr-也与slice-相似，不同之处为第二个参数不再是结束截取的索引，而是要截取的长度" class="headerlink" title="substr()也与slice()相似，不同之处为第二个参数不再是结束截取的索引，而是要截取的长度"></a><code>substr()</code>也与<code>slice()</code>相似，不同之处为第二个参数不再是结束截取的索引，而是要截取的长度</h5><figure class="hljs highlight javascript"><table><tr><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">//	从第七位索引，截取6位字符串</span><br><span class="hljs-keyword">var</span> str = <span class="hljs-string">"Apple, Banana, Mango"</span>;<br><span class="hljs-keyword">var</span> res = str.substr(<span class="hljs-number">7</span>,<span class="hljs-number">6</span>);<span class="hljs-comment">//Banana</span><br></code></pre></td></tr></table></figure>

<h4 id="字符串的替换方法reaplace"><a href="#字符串的替换方法reaplace" class="headerlink" title="字符串的替换方法reaplace()"></a>字符串的替换方法<code>reaplace()</code></h4><figure class="hljs highlight javascript"><table><tr><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">//replace()不会改变原有的字符串，而是返回新的字符串，替换的的文本为第一次匹配到的文本，对大小写敏感</span><br>str = <span class="hljs-string">"Please visit Microsoft!"</span>;<br><span class="hljs-keyword">var</span> n = str.replace(<span class="hljs-string">"Microsoft"</span>, <span class="hljs-string">"W3School"</span>);<br><span class="hljs-built_in">console</span>.log(n);<span class="hljs-comment">//Please visit W3School</span><br><span class="hljs-comment">//如需执行大小写不敏感的替换，请使用正则表达式 /i（大小写不敏感）：</span><br><span class="hljs-keyword">var</span> n = str.replace(<span class="hljs-regexp">/MICROSOFT/i</span>, <span class="hljs-string">"W3School"</span>);<br></code></pre></td></tr></table></figure>

<h4 id="字符串大小写转换方法"><a href="#字符串大小写转换方法" class="headerlink" title="字符串大小写转换方法"></a>字符串大小写转换方法</h4><p><code>ECMAScript</code>中涉及字符串大小写转换的方法有四个：<code>toLowerCase()</code>、<code>toLocaleLowerCase()</code>、<code>toUpperCase()</code>和<code>toLocaleUpperCase()</code>其中<code>toLowerCase()</code>和 <code>toUpperCase()</code>是两个经典的方法</p>
<figure class="hljs highlight javascript"><table><tr><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> stringValue = <span class="hljs-string">"hello world"</span>;<br>alert(stringValue.toLocaleUpperCase()); <span class="hljs-comment">// "HELLO WORLD";</span><br></code></pre></td></tr></table></figure>

<h4 id="concat-方法可用于代替加运算符"><a href="#concat-方法可用于代替加运算符" class="headerlink" title="concat() 方法可用于代替加运算符"></a><code>concat()</code> 方法可用于代替加运算符</h4><figure class="hljs highlight javascript"><table><tr><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> text = <span class="hljs-string">"Hello"</span> + <span class="hljs-string">" "</span> + <span class="hljs-string">"World!"</span>;<br><span class="hljs-keyword">var</span> text = <span class="hljs-string">"Hello"</span>.concat(<span class="hljs-string">" "</span>,<span class="hljs-string">"World!"</span>);<br></code></pre></td></tr></table></figure>

<h4 id="trim-方法删除字符串两端的空白符"><a href="#trim-方法删除字符串两端的空白符" class="headerlink" title="trim()方法删除字符串两端的空白符"></a><code>trim()</code>方法删除字符串两端的空白符</h4><p>该方法最近常见的用法是在输入框，实现搜索匹配时，用于去除用户传值时产生的空格</p>
<figure class="hljs highlight javascript"><table><tr><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> str = <span class="hljs-string">"       Hello World!        "</span>;<br>alert(str.trim());<br></code></pre></td></tr></table></figure>

<p><code>charAt()</code>返回指定位置的字符</p>
<p><code>charCodeAt()</code>返回指定位置字符的Unicode 编码</p>
<h2 id="fromCharCode-方法"><a href="#fromCharCode-方法" class="headerlink" title="fromCharCode()方法"></a><code>fromCharCode()</code>方法</h2><p>String构造函数本身还有一个静态方法，接收单一或多个字符编码，然后将他们转换成一个字符串。</p>
<figure class="hljs highlight javascript"><table><tr><td class="code"><pre><code class="hljs javascript">alert(<span class="hljs-built_in">String</span>.fromCharCode(<span class="hljs-number">104</span>,<span class="hljs-number">101</span>,<span class="hljs-number">108</span>,<span class="hljs-number">108</span>,<span class="hljs-number">111</span>));  <span class="hljs-comment">//"hello"</span><br>这里传递的是字符串hello中每个字符的Unicode编码。<br></code></pre></td></tr></table></figure>

<h3 id="repeat"><a href="#repeat" class="headerlink" title="repeat()"></a><code>repeat()</code></h3><p><code>repeat</code>方法返回一个新的字符串，表示将原字符串重复n次</p>
<figure class="hljs highlight javascript"><table><tr><td class="code"><pre><code class="hljs javascript"><span class="hljs-string">'x'</span>.repeat(<span class="hljs-number">3</span>) <span class="hljs-comment">// "xxx"</span><br><span class="hljs-string">'hello'</span>.repeat(<span class="hljs-number">2</span>) <span class="hljs-comment">// "hellohello"</span><br><span class="hljs-string">'na'</span>.repeat(<span class="hljs-number">0</span>) <span class="hljs-comment">// ""</span><br></code></pre></td></tr></table></figure>

<h3 id="padStart-amp-padEnd"><a href="#padStart-amp-padEnd" class="headerlink" title="padStart()&amp;padEnd()"></a><code>padStart()</code>&amp;<code>padEnd()</code></h3><p>这两个方法是在ES6中新增的语法，用于为字符串提供补全方法，</p>
<p>例如：</p>
<p>格式化时间后的字符串<code>3:18</code>3分18秒</p>
<figure class="hljs highlight javascript"><table><tr><td class="code"><pre><code class="hljs javascript">formateTime(seconds) &#123;<br>      <span class="hljs-keyword">if</span> (seconds &lt; <span class="hljs-number">60</span>) &#123;<br>        <span class="hljs-keyword">return</span> seconds.toString().padStart(<span class="hljs-number">2</span>, <span class="hljs-string">'0'</span>)<br>      &#125;<br>      <span class="hljs-keyword">if</span> (seconds &lt; <span class="hljs-number">3600</span>) &#123;<br>        <span class="hljs-keyword">const</span> m = <span class="hljs-built_in">String</span>(<span class="hljs-built_in">parseInt</span>(seconds / <span class="hljs-number">60</span>)).padStart(<span class="hljs-number">2</span>, <span class="hljs-string">'0'</span>)<br>        <span class="hljs-keyword">const</span> s = <span class="hljs-built_in">String</span>(<span class="hljs-built_in">parseInt</span>(seconds % <span class="hljs-number">60</span>)).padStart(<span class="hljs-number">2</span>, <span class="hljs-string">'0'</span>)<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">`<span class="hljs-subst">$&#123;m&#125;</span>:<span class="hljs-subst">$&#123;s&#125;</span>`</span><br>      &#125;<br>      <span class="hljs-keyword">const</span> h = <span class="hljs-built_in">String</span>(<span class="hljs-built_in">parseInt</span>(seconds / <span class="hljs-number">3600</span>)).padStart(<span class="hljs-number">2</span>, <span class="hljs-string">'0'</span>)<br>      <span class="hljs-keyword">const</span> m = <span class="hljs-built_in">String</span>(<span class="hljs-built_in">parseInt</span>((seconds % <span class="hljs-number">3600</span>) / <span class="hljs-number">60</span>)).padStart(<span class="hljs-number">2</span>, <span class="hljs-string">'0'</span>)<br>      <span class="hljs-keyword">const</span> s = <span class="hljs-built_in">String</span>(<span class="hljs-built_in">parseInt</span>((seconds % <span class="hljs-number">3600</span>) % <span class="hljs-number">60</span>)).padStart(<span class="hljs-number">2</span>, <span class="hljs-string">'0'</span>)<br>      <span class="hljs-keyword">return</span> <span class="hljs-string">`<span class="hljs-subst">$&#123;h&#125;</span>:<span class="hljs-subst">$&#123;m&#125;</span>:<span class="hljs-subst">$&#123;s&#125;</span>`</span><br>    &#125;<br></code></pre></td></tr></table></figure>

<p><code>padStart()</code>和<code>padEnd()</code>一共接受两个参数，第一个参数是字符串补全生效的最大长度，第二个参数是用来补全的字符串</p>
]]></content>
      <categories>
        <category>前端</category>
        <category>JavaScript</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
        <tag>String</tag>
      </tags>
  </entry>
  <entry>
    <title>Date函数</title>
    <url>/2020/08/17/2020-8-17-Date%E5%87%BD%E6%95%B0/</url>
    <content><![CDATA[<h1 id="JS日期"><a href="#JS日期" class="headerlink" title="JS日期"></a>JS日期</h1><h2 id="关于创建时间对象"><a href="#关于创建时间对象" class="headerlink" title="关于创建时间对象"></a>关于创建时间对象</h2><h3 id="创建日期对象的四种方法"><a href="#创建日期对象的四种方法" class="headerlink" title="创建日期对象的四种方法"></a>创建日期对象的四种方法</h3><p><code>new Date()</code></p>
<p><code>new Date(year, month,day, hours, minutes, seconds, milliseconds)</code></p>
<p><code>new Date(milliseconds)</code></p>
<p><code>new Date(date string)</code></p>
<p>1、不传参数创建日期</p>
<figure class="hljs highlight javascript"><table><tr><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> d = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Date</span>();<span class="hljs-comment">//Mon Aug 17 2020 17:47:35 GMT+0800 (中国标准时间)</span><br></code></pre></td></tr></table></figure>

<p>2、加入年月日等参数</p>
<a id="more"></a>

<figure class="hljs highlight javascript"><table><tr><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> d = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Date</span>(<span class="hljs-number">2020</span>, <span class="hljs-number">11</span>, <span class="hljs-number">11</span>);<span class="hljs-comment">//Fri Dec 11 2020 00:00:00 GMT+0800 (中国标准时间)</span><br><span class="hljs-comment">//为日期指定内容</span><br></code></pre></td></tr></table></figure>

<p>注：<strong>对于月份来说一月的索引为0，12月为11</strong></p>
<p>所以我们在获取月份时也要注意+1才是正确的我们所说的月份</p>
<p>3、如果只传入一个参数，则按照毫秒为参数添加进函数,将返回一个按照零时加上毫秒数的新的日期对象</p>
<figure class="hljs highlight javascript"><table><tr><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> d = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Date</span>(<span class="hljs-number">0</span>);<br></code></pre></td></tr></table></figure>

<p>JavaScript 将日期存储为自 1970 年 1 月 1 日 00:00:00 UTC（协调世界时）以来的毫秒数。</p>
<p>零时间是 1970 年 1 月 1 日 00:00:00 UTC。</p>
<p>4、传入时间字符串会返回一个新的日期对象</p>
<figure class="hljs highlight javascript"><table><tr><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> d = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Date</span>(<span class="hljs-string">"October 13, 2014 11:13:00"</span>);<br></code></pre></td></tr></table></figure>

<h3 id="日期的获取方法"><a href="#日期的获取方法" class="headerlink" title="日期的获取方法"></a>日期的获取方法</h3>

<h3 id="关于-new-Date"><a href="#关于-new-Date" class="headerlink" title="关于+new Date()"></a>关于+new Date()</h3><p>这个操作是将日期函数转换类型</p>


<p>以毫秒显示</p>
<p>对时间进行格式化,后端提供以秒为单位的时间数据</p>
<p>将其转换为00:00:00（小时：分钟：秒），并且位数为一位数时，进行补0，避免出现3:20这样的时间应该显示为03:20。</p>
<figure class="hljs highlight javascript"><table><tr><td class="code"><pre><code class="hljs javascript">formateTime(seconds) &#123;<br>      <span class="hljs-keyword">if</span> (seconds &lt; <span class="hljs-number">60</span>) &#123;<br>        <span class="hljs-keyword">return</span> seconds.toString().padStart(<span class="hljs-number">2</span>, <span class="hljs-string">'0'</span>)<br>      &#125;<br>      <span class="hljs-keyword">if</span> (seconds &lt; <span class="hljs-number">3600</span>) &#123;<br>        <span class="hljs-keyword">const</span> m = <span class="hljs-built_in">String</span>(<span class="hljs-built_in">parseInt</span>(seconds / <span class="hljs-number">60</span>)).padStart(<span class="hljs-number">2</span>, <span class="hljs-string">'0'</span>)<br>        <span class="hljs-keyword">const</span> s = <span class="hljs-built_in">String</span>(<span class="hljs-built_in">parseInt</span>(seconds % <span class="hljs-number">60</span>)).padStart(<span class="hljs-number">2</span>, <span class="hljs-string">'0'</span>)<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">`<span class="hljs-subst">$&#123;m&#125;</span>:<span class="hljs-subst">$&#123;s&#125;</span>`</span><br>      &#125;<br>      <span class="hljs-keyword">const</span> h = <span class="hljs-built_in">String</span>(<span class="hljs-built_in">parseInt</span>(seconds / <span class="hljs-number">3600</span>)).padStart(<span class="hljs-number">2</span>, <span class="hljs-string">'0'</span>)<br>      <span class="hljs-keyword">const</span> m = <span class="hljs-built_in">String</span>(<span class="hljs-built_in">parseInt</span>((seconds % <span class="hljs-number">3600</span>) / <span class="hljs-number">60</span>)).padStart(<span class="hljs-number">2</span>, <span class="hljs-string">'0'</span>)<br>      <span class="hljs-keyword">const</span> s = <span class="hljs-built_in">String</span>(<span class="hljs-built_in">parseInt</span>((seconds % <span class="hljs-number">3600</span>) % <span class="hljs-number">60</span>)).padStart(<span class="hljs-number">2</span>, <span class="hljs-string">'0'</span>)<br>      <span class="hljs-keyword">return</span> <span class="hljs-string">`<span class="hljs-subst">$&#123;h&#125;</span>:<span class="hljs-subst">$&#123;m&#125;</span>:<span class="hljs-subst">$&#123;s&#125;</span>`</span><br>    &#125;<br></code></pre></td></tr></table></figure>

<h3 id="时间戳转换"><a href="#时间戳转换" class="headerlink" title="时间戳转换"></a>时间戳转换</h3><p>new Date(1598338225474)，如果是秒为单位需要乘1000</p>
]]></content>
      <categories>
        <category>前端</category>
        <category>JavaScript</category>
      </categories>
      <tags>
        <tag>JS</tag>
        <tag>Date对象</tag>
      </tags>
  </entry>
  <entry>
    <title>原型链与继承</title>
    <url>/2021/03/31/2021-03-31-%E5%8E%9F%E5%9E%8B%E9%93%BE/</url>
    <content><![CDATA[<p><code>JS</code>中创建一个构造函数后就会有一个<code>property</code>属性指向构造函数的原型对象，原型对象通过<code>constructor</code>属性指回构造函数。（构造函数与原型对象互相指），此时通过构造函数创建的对象可以访问构造函数原型对象的属性，所以在访问这个新对象的属性的时候如果在自身搜索不到，JS会通过这条链去原型对象中搜索，上一层原型对象搜索不到还会继续层层向上搜索，比如每个对象的上层都有一个<code>Object</code>对象。</p>
<p>实际上所有引用类型都继承自Object，也是通过原型链实现的，这意味着这个实例有一个内部指针指向<code>Object.prototype</code>,这也是自定义类型能否继承包括<code>toString()</code>、<code>valueOf()</code>这些方法的原因</p>
<p>同时通过构造函数创建一个对象实例，实例内部指针指向原型对象，我们给这个原型对象起名为原型A，那么如果原型A是构造函数B的实例，那么原型A的内部指针就会指向构造函数b的原型对象B，</p>
<img src="/2021/03/31/2021-03-31-原型链/1.png">

<a id="more"></a>

<figure class="hljs highlight javascript"><table><tr><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// 声明构造函数A</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">A</span>(<span class="hljs-params"></span>) </span>&#123;<br>  <span class="hljs-keyword">this</span>.Aname = <span class="hljs-string">'aaaa'</span><br>&#125;<br><span class="hljs-comment">// 定义函数A的原型方法</span><br>A.prototype.getAValue = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>&#123;<br>  <span class="hljs-keyword">return</span> <span class="hljs-keyword">this</span>.Aname<br>&#125;<br><span class="hljs-comment">// 定义函数B</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">B</span>(<span class="hljs-params"></span>) </span>&#123;<br>  <span class="hljs-keyword">this</span>.Bname = <span class="hljs-string">'b'</span><br>&#125;<br><span class="hljs-comment">//这里构造函数B本来有自己的原型对象，但是我们将构造函数A的实例赋值给B的原型，相当于重写了函数B的原型</span><br>B.prototype = <span class="hljs-keyword">new</span> A()<br><span class="hljs-comment">// new一个函数B的实例对象C</span><br><span class="hljs-keyword">let</span> c = <span class="hljs-keyword">new</span> B()<br><br><span class="hljs-built_in">console</span>.log(c.getAValue()) <span class="hljs-comment">// aaa 构造函数A的原型方法与构造函数A的属性</span><br><span class="hljs-built_in">console</span>.log(c.Bname) <span class="hljs-comment">// b</span><br><span class="hljs-built_in">console</span>.log(c.Aname) <span class="hljs-comment">// aaa</span><br><span class="hljs-comment">// 我们通过instanceof 来观察c是否出现在以下构造函数的原型链上</span><br><span class="hljs-built_in">console</span>.log(c <span class="hljs-keyword">instanceof</span> A) <span class="hljs-comment">// true</span><br><span class="hljs-built_in">console</span>.log(c <span class="hljs-keyword">instanceof</span> B) <span class="hljs-comment">// true</span><br><span class="hljs-built_in">console</span>.log(c <span class="hljs-keyword">instanceof</span> <span class="hljs-built_in">Object</span>) <span class="hljs-comment">// true</span><br></code></pre></td></tr></table></figure>

<p>​        此时实例c不仅能访问B的bName属性也能访问A的属性甚至是方法，因为他们已经通过原型链连接了，在通过<code>instanceof</code>检查c是否在A或B的原型链上，果然返回的结果是true</p>
<p>​        构造函数B没有使用自身的默认原型，而是替换了一个新的对象，这个对象恰好是A的实例，这样一来B的实例不仅能从A的实例中获取属性和方法，还和A的原型对象挂上了钩。</p>
<p>上述例子的原型链结构</p>
<p>c(B的实例）此时指向—–&gt;B的原型对象此时等于 ——&gt;A的实例—&gt;(同时A的实例指向)—–〉A的原型对象</p>
<p>这个例子是实现继承的关键，</p>
<p><strong>默认原型</strong></p>
<p><strong>原型对象继承的问题</strong></p>
<p>原型对象很强大，但是也有问题，出现在原型对象包含引用值的时候，一个原型对象，它的所有实例都会<strong>共享它的属性</strong>，这也是为什么属性通常在构造函数中定义而不会定义在原型上的原因。</p>
<figure class="hljs highlight javascript"><table><tr><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">//这里构造函数B本来有自己的原型对象，但是我们将构造函数A的实例赋值给B的原型，相当于重写了函数B的原型</span><br>B.prototype = <span class="hljs-keyword">new</span> A()<br></code></pre></td></tr></table></figure>

<p>可以看下上方的代码，原本B的原型对象现在却变成了A的实例，那么原本构造函数A中的实例属性A.name现在变成了原型属性，那么会产生什么问题呢</p>
<figure class="hljs highlight javascript"><table><tr><td class="code"><pre><code class="hljs javascript"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">A</span>(<span class="hljs-params"></span>) </span>&#123;<br>  <span class="hljs-keyword">this</span>.colors = [<span class="hljs-string">'red'</span>, <span class="hljs-string">'blue'</span>, <span class="hljs-string">'pink'</span>]<br>&#125;<br><br>A.prototype.getAValue = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>&#123;<br>  <span class="hljs-keyword">return</span> <span class="hljs-keyword">this</span>.colors<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">B</span>(<span class="hljs-params"></span>) </span>&#123;<br>  <span class="hljs-keyword">this</span>.Bname = <span class="hljs-string">'b'</span><br>&#125;<br><br>B.prototype = <span class="hljs-keyword">new</span> A()<br><br><span class="hljs-keyword">let</span> c = <span class="hljs-keyword">new</span> B()<br>c.colors.push(<span class="hljs-string">'black'</span>)<br><span class="hljs-built_in">console</span>.log(c.getAValue()) <span class="hljs-comment">// [ 'red', 'blue', 'pink', 'black' ]</span><br><span class="hljs-keyword">let</span> d = <span class="hljs-keyword">new</span> B()<br><span class="hljs-built_in">console</span>.log(d.getAValue()) <span class="hljs-comment">// [ 'red', 'blue', 'pink', 'black' ]</span><br></code></pre></td></tr></table></figure>

<p>由于此时B.property 变成了A的实例，因此也获得了自己的colors属性，这相当于所有B的实例都共享着一个A实例中的colors，那么修改了c的colors。d的colors也会改变</p>
<h2 id="继承"><a href="#继承" class="headerlink" title="继承"></a><strong>继承</strong></h2><p>为了解决原型包含引用值时导致的继承问题，通过call在继承的实例中再次执行构造函数A，这样c与d继承来自两个独立的A实例，这种方式称为<code>盗用构造函数继承</code></p>
<figure class="hljs highlight javascript"><table><tr><td class="code"><pre><code class="hljs javascript"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">A</span>(<span class="hljs-params"></span>) </span>&#123;<br>  <span class="hljs-keyword">this</span>.colors = [<span class="hljs-string">'red'</span>, <span class="hljs-string">'blue'</span>, <span class="hljs-string">'pink'</span>]<br>&#125;<br>A.prototype.getAValue = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>&#123;<br>  <span class="hljs-keyword">return</span> <span class="hljs-keyword">this</span>.colors<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">B</span>(<span class="hljs-params"></span>) </span>&#123;<br>  <span class="hljs-comment">// 运行函数A，拥有了colors属性</span><br>  A.call(<span class="hljs-keyword">this</span>)<br>&#125;<br>B.prototype = <span class="hljs-keyword">new</span> A()<br><span class="hljs-comment">// new B()的同时调用内部的A函数，创建了一个A的新实例</span><br><span class="hljs-keyword">let</span> c = <span class="hljs-keyword">new</span> B()<br>c.colors.push(<span class="hljs-string">'black'</span>)<br><span class="hljs-built_in">console</span>.log(c.getAValue())<span class="hljs-comment">// [ 'red', 'blue', 'pink', 'black' ]</span><br><span class="hljs-keyword">let</span> d = <span class="hljs-keyword">new</span> B()<br><span class="hljs-built_in">console</span>.log(d.getAValue())<span class="hljs-comment">// [ 'red', 'blue', 'pink']</span><br></code></pre></td></tr></table></figure>

<p><code>盗用构造函数继承的问题</code>也是使用构造函数模式自定义类型的问题，必须在构造函数中定义方法，这样函数不能重用，</p>
<h3 id="将两者结合组合式继承"><a href="#将两者结合组合式继承" class="headerlink" title="将两者结合组合式继承"></a><strong>将两者结合</strong><code>组合式继承</code></h3><p>解决了两者的不足</p>
<figure class="hljs highlight javascript"><table><tr><td class="code"><pre><code class="hljs javascript"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">A</span>(<span class="hljs-params">name</span>) </span>&#123;<br>  <span class="hljs-keyword">this</span>.name = name<br>  <span class="hljs-keyword">this</span>.colors = [<span class="hljs-string">'red'</span>, <span class="hljs-string">'blue'</span>, <span class="hljs-string">'pink'</span>]<br>&#125;<br>A.prototype.sayName = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>&#123;<br>  <span class="hljs-keyword">return</span> <span class="hljs-string">`Im <span class="hljs-subst">$&#123;<span class="hljs-keyword">this</span>.name&#125;</span>`</span><br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">B</span>(<span class="hljs-params">name, age</span>) </span>&#123;<br>  A.call(<span class="hljs-keyword">this</span>, name)<br>  <span class="hljs-keyword">this</span>.age = age<br>&#125;<br><br><br>B.prototype = <span class="hljs-keyword">new</span> A()<br>B.prototype.sayAge = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>&#123;<br>  <span class="hljs-keyword">return</span> <span class="hljs-keyword">this</span>.age<br>&#125;<br><span class="hljs-keyword">let</span> c = <span class="hljs-keyword">new</span> B(<span class="hljs-string">'jess'</span>, <span class="hljs-number">23</span>)<br>c.colors.push(<span class="hljs-string">'black'</span>)<br><span class="hljs-built_in">console</span>.log(c.name) <span class="hljs-comment">// jess</span><br><span class="hljs-built_in">console</span>.log(c.colors) <span class="hljs-comment">// [ 'red', 'blue', 'pink', 'black' ]</span><br><span class="hljs-built_in">console</span>.log(c.sayName()) <span class="hljs-comment">//Im jess</span><br><span class="hljs-keyword">let</span> b = <span class="hljs-keyword">new</span> B(<span class="hljs-string">'wangfei'</span>, <span class="hljs-number">25</span>)<br><span class="hljs-built_in">console</span>.log(b.colors) <span class="hljs-comment">// [ 'red', 'blue', 'pink' ]</span><br><span class="hljs-built_in">console</span>.log(b.sayName()) <span class="hljs-comment">//Im wangfei</span><br><span class="hljs-built_in">console</span>.log(b.sayAge()) <span class="hljs-comment">//25</span><br></code></pre></td></tr></table></figure>

<p>组合继承，构造函数A中定义了两个属性，name和colors，在原型上定义了方法sayName，在B中调用A构造函数，并且将非引用属性name作为参数传递，又定义了自己的属性，然后我们创建了自己的实例c，d，他们不仅有自己的属性，还共享着相同的方法</p>
<p>目前组合式继承是JavaScript中使用最多的继承模式，而且也保留了<code>instanceOf</code>、和<code>isPrototypeOf()</code>方法识别合成对象的能力</p>
<p><strong>### 原型式继承</strong></p>
<p>一种不涉及严格意义上构造函数的继承方法，出发点是即使不自定义类型也可以通过原型实现对象之间的信息共享。</p>
<figure class="hljs highlight javascript"><table><tr><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// People函数会创建一个临时构造函数，将传入的独享赋值给这个构造函数的原型，然后返回这个临时类型的一个实例，实际上是对传入的对象执行了一次浅复制</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">People</span>(<span class="hljs-params">o</span>) </span>&#123;<br>  <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">F</span>(<span class="hljs-params"></span>) </span>&#123;&#125;<br>  F.prototype = o<br>  <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> F()<br>&#125;<br><br><span class="hljs-keyword">let</span> person = &#123;<br>  <span class="hljs-attr">name</span>: <span class="hljs-string">'Nick'</span>,<br>  <span class="hljs-attr">friends</span>: [<span class="hljs-string">'Shelly'</span>, <span class="hljs-string">'Court'</span>, <span class="hljs-string">'Van'</span>]<br>&#125;<br><span class="hljs-keyword">let</span> anotherPeople = People(person)<br>anotherPeople.friends.push(<span class="hljs-string">'Jess'</span>)<br><span class="hljs-built_in">console</span>.log(anotherPeople.friends) <span class="hljs-comment">// [ 'Shelly', 'Court', 'Van', 'Jess' ]</span><br><span class="hljs-keyword">let</span> yetAnotherPeople = People(person)<br>yetAnotherPeople.name = <span class="hljs-string">'Linda'</span><br><span class="hljs-built_in">console</span>.log(yetAnotherPeople.name) <span class="hljs-comment">// Linda</span><br>yetAnotherPeople.friends.push(<span class="hljs-string">'Barbie'</span>) <br><span class="hljs-built_in">console</span>.log(anotherPeople.friends) <span class="hljs-comment">//[ 'Shelly', 'Court', 'Van', 'Jess', 'Barbie' ]</span><br><br><span class="hljs-keyword">let</span> another = <span class="hljs-built_in">Object</span>.create(person, &#123;<br>  <span class="hljs-attr">name</span>: &#123;<br>    <span class="hljs-attr">value</span>: <span class="hljs-string">'Greg'</span><br>  &#125;<br>&#125;)<br><span class="hljs-built_in">console</span>.log(another.friends) <span class="hljs-comment">// //[ 'Shelly', 'Court', 'Van', 'Jess', 'Barbie' ]</span><br><span class="hljs-built_in">console</span>.log(another.name) <span class="hljs-comment">// Greg</span><br></code></pre></td></tr></table></figure>

<p>当我们有一个对象，想再它的基础上再创建一个新对象的时候，适合使用这种方式</p>
<p>并且：在es5中，将原型式继承的概念规范化了，这个方法接收两个参数如上方，<code>another</code>对象。在只有一个参数的时候，<code>Object.create()</code>与我们创建的<code>People()</code>方法相同，</p>
<p>第二个参数与<code>Object.defineProperties()</code>的第二个参数一样，每增加一个属性都通过各自的描述符来描述，<strong>这种方式添加的属性会遮蔽原型对象上的同名属性</strong></p>
<h3 id="寄生式继承"><a href="#寄生式继承" class="headerlink" title="寄生式继承"></a>寄生式继承</h3><p>寄生式继承与原型式继承比较接近，思路类似于寄生构造函数和工厂模式，比原型式继承多了一步增强对象，为对象添加一些方法</p>
<figure class="hljs highlight javascript"><table><tr><td class="code"><pre><code class="hljs javascript"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">People</span>(<span class="hljs-params">o</span>) </span>&#123;<br>  <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">F</span>(<span class="hljs-params"></span>) </span>&#123;&#125;<br>  F.prototype = o<br>  <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> F()<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">createAnotherObject</span>(<span class="hljs-params">original</span>) </span>&#123;<br>  <span class="hljs-keyword">let</span> clone = People(original)<br>  clone.sayHi = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>&#123; <span class="hljs-comment">// 增强对象，为对象增加方法</span><br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">'hi'</span>)<br>  &#125;<br>  <span class="hljs-keyword">return</span> clone<br>&#125;<br><br><span class="hljs-keyword">let</span> person = &#123;<br>  <span class="hljs-attr">name</span>: <span class="hljs-string">'Nicholas'</span>,<br>  <span class="hljs-attr">friends</span>: [<span class="hljs-string">'Shelby'</span>, <span class="hljs-string">'Court'</span>, <span class="hljs-string">'Van'</span>]<br>&#125;<br><br><span class="hljs-keyword">let</span> anotherPerson = createAnotherObject(person)<br>anotherPerson.sayHi()<br></code></pre></td></tr></table></figure>

<p>在这段代码中，createAnother函数会接收一个参数，就是新对象的基准对象，这个对象original会被传给People函数，然后返回的新对象赋值给clone，接着给clone添加一个新的方法，sayHi，最后返回这个新的对象</p>
<p><strong>通过寄生式继承，给对象添加函数会导致函数难以重用，与构造函数模式类似。</strong></p>
<h3 id="寄生式组合继承"><a href="#寄生式组合继承" class="headerlink" title="寄生式组合继承"></a>寄生式组合继承</h3><p>组合继承存在着效率问题，主要是父类构造函数始终会被调用两次，一次是在创建子类原型时调用，另一次是在子类构造函数中调用，本质上子类原型最终时要包含超类对象的所有实例属性，子类构造函数只要在执行时重写自己的原型就行了</p>
<figure class="hljs highlight javascript"><table><tr><td class="code"><pre><code class="hljs javascript"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">A</span>(<span class="hljs-params">name</span>) </span>&#123;<br>  <span class="hljs-keyword">this</span>.name = name<br>  <span class="hljs-keyword">this</span>.colors = [<span class="hljs-string">'red'</span>, <span class="hljs-string">'blue'</span>, <span class="hljs-string">'orange'</span>]<br>&#125;<br><br>A.prototype.sayName = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>&#123;<br>  <span class="hljs-built_in">console</span>.log(name)<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">B</span>(<span class="hljs-params">name, age</span>) </span>&#123;<br>  A.call(<span class="hljs-keyword">this</span>, name) <span class="hljs-comment">// 第二次调用A</span><br>  <span class="hljs-keyword">this</span>.age = age<br>&#125;<br><br>B.prototype = <span class="hljs-keyword">new</span> A() <span class="hljs-comment">// 第一次调用A</span><br>B.prototype.constructor = B<br></code></pre></td></tr></table></figure>

<p>上方时组合继承的例子，调用了两次构造函数A</p>
<p>而4寄生式组合继承通过盗用构造函数的属性，但是使用混合时原型链继承方法，思路是不通过父类构造函数给子构造函数原型赋值(<code>B.prototype = new A()</code>),而是取得父类原型的一个副本，说到底就是使用寄生式继承来继承父类原型</p>
<figure class="hljs highlight javascript"><table><tr><td class="code"><pre><code class="hljs javascript"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">A</span>(<span class="hljs-params">name</span>) </span>&#123;<br>  <span class="hljs-keyword">this</span>.name = name<br>  <span class="hljs-keyword">this</span>.colors = [<span class="hljs-string">'red'</span>, <span class="hljs-string">'blue'</span>, <span class="hljs-string">'orange'</span>]<br>&#125;<br><br>A.prototype.sayName = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>&#123;<br>  <span class="hljs-built_in">console</span>.log(name)<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">B</span>(<span class="hljs-params">name, age</span>) </span>&#123;<br>  A.call(<span class="hljs-keyword">this</span>, name) <span class="hljs-comment">// 第二次调用A</span><br>  <span class="hljs-keyword">this</span>.age = age<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">inheritPrototype</span>(<span class="hljs-params">Child, Parent</span>) </span>&#123;<br>  <span class="hljs-keyword">let</span> F = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;&#125;;<br>    <span class="hljs-comment">// 把F的原型指向Parent.prototype</span><br>    F.prototype = Parent.prototype;<br>    <span class="hljs-comment">// 把Child的原型指向一个新的F对象，F对象的原型正好指向Parent.prototype:</span><br>    Child.prototype = <span class="hljs-keyword">new</span> F();<br>    <span class="hljs-comment">// 把Child原型的构造函数修复为Child:</span><br>    Child.prototype.constructor = Child<br>&#125;<br><br>inheritPrototype(B, A)<br><span class="hljs-keyword">let</span> c = <span class="hljs-keyword">new</span> B()<br><span class="hljs-built_in">console</span>.log(c.colors)<br><span class="hljs-keyword">let</span> d = <span class="hljs-keyword">new</span> B()<br>d.colors.push(<span class="hljs-string">'black'</span>)<br><span class="hljs-built_in">console</span>.log(c.colors)<br></code></pre></td></tr></table></figure>

<p>上方代码通过<code>inheritPrototype()</code>方法接收子类构造函数和父类构造函数</p>
<p>第一步：创建父类构造函数的副本，</p>
<p>第二步：给<code>prototype</code>对象设置<code>constructor</code>属性，解决由于重写原型导致默认<code>constructor</code>属性丢失问题</p>
<p>第三步：将新创建的对象赋值给子类原型</p>
<p><strong>这里只调用了一次父类A，避免了B原型上不必要也用不到的属性，效率更高且原型链仍然保持不变，可以说寄生式组合继承可以算是引用类型继承的最佳模式</strong></p>
]]></content>
      <categories>
        <category>前端</category>
        <category>JavaScript</category>
      </categories>
      <tags>
        <tag>javaScript</tag>
        <tag>原型</tag>
      </tags>
  </entry>
  <entry>
    <title>Object.defineProperty与Reflect.definProperty</title>
    <url>/2021/03/25/2021-03-25Objedct-defineProperty/</url>
    <content><![CDATA[<h1 id="JavaScript中的对象"><a href="#JavaScript中的对象" class="headerlink" title="JavaScript中的对象"></a>JavaScript中的对象</h1><p>对象是js中的一种数据类型，到目前为止引用值的示例大多使用的是<code>Obejct</code>类型，并且ECMAScript中还定义了一个最特别的对象Global对象，代码不会显式的访问它，它所针对的是不属于任何对象的属性和方法，事实上不存在全局变量与全局函数这种东西，我们在全局作用域中定义的变量和函数都会变成Global对象的属性，包括<code>isNaN()</code>、<code>isFinite()</code>、<code>parseInt()</code>实际上都是Global对象的方法。</p>
<h2 id="本篇记录的方法"><a href="#本篇记录的方法" class="headerlink" title="本篇记录的方法"></a>本篇记录的方法</h2><figure class="hljs highlight javascript"><table><tr><td class="code"><pre><code class="hljs javascript"><span class="hljs-built_in">Object</span>.defineProperty() 方法会直接在一个对象上定义一个新属性，或者修改一个对象的现有属性，并返回此对象。<br><span class="hljs-built_in">Reflect</span>.defineProperty()<br><span class="hljs-built_in">Object</span>.getOwnPropertyDescriptor()<span class="hljs-comment">// 读取对象属性的特征</span><br></code></pre></td></tr></table></figure>

<a id="more"></a>

<h2 id="对象的属性特征"><a href="#对象的属性特征" class="headerlink" title="对象的属性特征"></a>对象的属性特征</h2><p>ECMA5中定义只有内部才用的特性<strong>attribute</strong>，描述里属性<strong>property</strong>的各种特性。ECMA中有两种属性，数据属性和访问器属性</p>
<h3 id="数据属性"><a href="#数据属性" class="headerlink" title="数据属性"></a>数据属性</h3><ol>
<li><p>[Configurable]: 表示能否通过delete删除属性从而重新定义属性，能否修改属性的特性，或者能否把属性修改为访问器属性，例如直接在对象上定义属性，这个特性默认为true</p>
</li>
<li><p>[Enumerable]: 表示能否通过for-in循环返回属性，默认为true</p>
</li>
<li><p>[Writable]: 表示能否修改属性值，默认为true</p>
</li>
<li><p>[Value]: 包含这个属性的数据值，读取属性值的时候从这个位置读，写入属性值的时候，把新值保存在这个位置。这个特性的默认值为undefined</p>
</li>
</ol>
<p>下方我们通过字面的方式定义了一个<code>person</code>对象，我们可以使用Object.getOwnPropertyDescriptor()方法来看一下<code>person</code>对象的数据属性</p>
<figure class="hljs highlight javascript"><table><tr><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> person = &#123;<br>		name = <span class="hljs-string">'Jess'</span><br>&#125;<br><span class="hljs-built_in">console</span>.log(Obejct.getOwnPropertyDescriptor(person, <span class="hljs-string">'name'</span>))<br><span class="hljs-comment">// &#123; value: 'Jess', writable: true, enumerable: true, configurable: true &#125;</span><br></code></pre></td></tr></table></figure>

<p>可以看到当我们创建了一个对象之后，<strong>前三个特性默认为true，[Value]被设置为指定的值</strong></p>
<h4 id="修改数据属性"><a href="#修改数据属性" class="headerlink" title="修改数据属性"></a>修改数据属性</h4><p>通常我们不需要访问对象的数据属性，要修改属性的默认特性，就必须使用Object.defineProperty()方法，这个方法接收三个参数：<strong>要添加属性的对象，属性的名称，最后一个参数及对象拥有的四个数据属性，根据需要添加</strong></p>
<figure class="hljs highlight javascript"><table><tr><td class="code"><pre><code class="hljs javascript"><span class="hljs-built_in">Object</span>.defineProperty(person, <span class="hljs-string">'age'</span>, &#123;<br>  <span class="hljs-attr">value</span>: <span class="hljs-number">23</span><br>&#125;)<br><span class="hljs-keyword">let</span> descriptor = <span class="hljs-built_in">Object</span>.getOwnPropertyDescriptor(person, <span class="hljs-string">'age'</span>)<br><span class="hljs-built_in">console</span>.log(descriptor)<span class="hljs-comment">// &#123; value: 23, writable: false, enumerable: false, configurable: false &#125;</span><br></code></pre></td></tr></table></figure>

<p>我们使用<code>defineProperty()</code>方法为person对象添加一个age属性，并打印出age属性的特性，可以看到调用<code>defineProperty()</code>方法如果不指定<code>efineProperty()</code>、<code>enumerable</code>、 <code>configurable</code>默认为false</p>
<h3 id="访问器属性也叫存取属性"><a href="#访问器属性也叫存取属性" class="headerlink" title="访问器属性也叫存取属性"></a>访问器属性也叫存取属性</h3><p><em>存取属性</em>是由 getter 函数和 setter 函数所描述的属性。一个描述符只能是这两者其中之一；不能同时是两者。</p>
<p><code>get()</code>获取函数，在读取属性时调用，默认值为undefined</p>
<p><code>set()</code>设置函数，在写入属性时调用，默认值为undefined</p>
<h4 id="通过defineProperty定义访问器属性"><a href="#通过defineProperty定义访问器属性" class="headerlink" title="通过defineProperty定义访问器属性"></a>通过defineProperty定义访问器属性</h4><figure class="hljs highlight javascript"><table><tr><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">let</span> book = &#123;<br>  <span class="hljs-attr">year_</span>: <span class="hljs-number">2017</span>,<br>  <span class="hljs-attr">edition</span>: <span class="hljs-number">1</span><br>&#125;<br><span class="hljs-built_in">Object</span>.defineProperty(book, <span class="hljs-string">'year'</span>, &#123;<br>  <span class="hljs-keyword">get</span>() &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">this</span>.year_<br>  &#125;,<br>  <span class="hljs-keyword">set</span>(newVal) &#123;<br>    <span class="hljs-keyword">if</span> (newVal &gt; <span class="hljs-number">2017</span>) &#123;<br>      <span class="hljs-keyword">this</span>.year_ = newVal;<br>      <span class="hljs-keyword">this</span>.edition = newVal - <span class="hljs-number">2017</span>;<br>    &#125;<br>  &#125;<br>&#125;) <br>book.year = <span class="hljs-number">2018</span>;<br><span class="hljs-built_in">console</span>.log(book.edition); <span class="hljs-number">2</span><br></code></pre></td></tr></table></figure>

<h2 id="Vue2中的双向数据绑定"><a href="#Vue2中的双向数据绑定" class="headerlink" title="Vue2中的双向数据绑定"></a>Vue2中的双向数据绑定</h2><p>我们都知道vue中的双向数据绑定是通过defineProperty实现的，查看vue源码</p>
<figure class="hljs highlight javascript"><table><tr><td class="code"><pre><code class="hljs javascript"><span class="hljs-built_in">Object</span>.defineProperty(obj, key, &#123;<br>  <span class="hljs-attr">enumerable</span>: <span class="hljs-literal">true</span>,   <span class="hljs-comment">// 可以通过for in 遍历</span><br>  <span class="hljs-attr">configurable</span>: <span class="hljs-literal">true</span>,<br>  <span class="hljs-attr">get</span>: <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">reactiveGetter</span> (<span class="hljs-params"></span>) </span>&#123;<br>    <span class="hljs-comment">// ...</span><br>    <span class="hljs-keyword">if</span> (Dep.target) &#123;<br>      <span class="hljs-comment">// 收集依赖</span><br>      dep.depend()<br>    &#125;<br>    <span class="hljs-keyword">return</span> value<br>  &#125;,<br>  <span class="hljs-attr">set</span>: <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">reactiveSetter</span> (<span class="hljs-params">newVal</span>) </span>&#123;<br>    <span class="hljs-comment">// ...</span><br>    <span class="hljs-comment">// 通知视图更新</span><br>    dep.notify()<br>  &#125;<br>&#125;)<br></code></pre></td></tr></table></figure>

<p>所以vue中对象新增属性为什么不更新</p>
<figure class="hljs highlight javascript"><table><tr><td class="code"><pre><code class="hljs javascript">data  () &#123;<br>  <span class="hljs-keyword">return</span>  &#123;<br>    <span class="hljs-attr">obj</span>: &#123;<br>      <span class="hljs-attr">a</span>: <span class="hljs-number">1</span><br>    &#125;<br>  &#125;<br>&#125;<br><br><span class="hljs-attr">methods</span>: &#123;<br>  update () &#123;<br>    <span class="hljs-keyword">this</span>.obj.b = <span class="hljs-number">2</span><br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure>

<p>上面的代码中我们执行update更新obj时，预期视图也要随之更新，但实际是并不会，</p>
<p>因为<code>vue</code>中<code>data init</code>是在生命周期<code>created</code>之前的操作，<code>init</code>时会为data对象绑定一个观察者<code>Observer</code>，之后<code>data</code>中的字段更新都会通知依赖收集器<code>Dep</code>，触发更新。</p>
<p>然后，<code>definePropery</code>的访问器属性是对<strong>对象的属性进行操作</strong>，而非对象本身。所以当<code>Observer data</code>时新增属性并不存在，自然也不会有 <code>getter, setter</code>也就解释了为什么视图不更新 </p>
<h2 id="Reflect-defineProperty"><a href="#Reflect-defineProperty" class="headerlink" title="Reflect.defineProperty"></a>Reflect.defineProperty</h2><figure class="hljs highlight javascript"><table><tr><td class="code"><pre><code class="hljs javascript"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">MyDate</span>(<span class="hljs-params"></span>) </span>&#123;&#125;<br><br><span class="hljs-built_in">Object</span>.defineProperty(MyDate, <span class="hljs-string">'now'</span>, &#123;<br>  <span class="hljs-attr">value</span>: <span class="hljs-function"><span class="hljs-params">()</span> =&gt;</span> <span class="hljs-built_in">Date</span>.now()<br>&#125;)<br><br><span class="hljs-comment">//等同于</span><br><span class="hljs-built_in">Reflect</span>.defineProperty(MyDate, <span class="hljs-string">'now'</span>, &#123;<br>  <span class="hljs-attr">value</span>: <span class="hljs-function"><span class="hljs-params">()</span> =&gt;</span> <span class="hljs-built_in">Date</span>.now()<br>&#125;)<br></code></pre></td></tr></table></figure>

<p>使用<code>Reflect.defineProperty</code>方法时，结果会返回一个布尔值，而<code>Obejct.defineProperty</code>如果运行失败则会报错，这意味着，使用Reflect你将不必去麻烦的处理报错信息</p>
]]></content>
      <categories>
        <category>前端</category>
        <category>JavaScript</category>
        <category>对象</category>
      </categories>
      <tags>
        <tag>javaScript</tag>
        <tag>Object</tag>
        <tag>defineProperty</tag>
      </tags>
  </entry>
  <entry>
    <title>proxy与Reflect</title>
    <url>/2021/03/26/2021-03-26-proxy%E4%B8%8EReflect/</url>
    <content><![CDATA[<h1 id="代理基础"><a href="#代理基础" class="headerlink" title="代理基础"></a>代理基础</h1><p>代理是目标对象的抽象，使用代理类似于给目标对象制作一个替身，但由完全独立于目标对象，我可以直接操作对象本身做一些事情，也可以通过代理对象进行操作。直接操作会绕过代理对象施予的一些行为。</p>
<h2 id="代理对象Proxy"><a href="#代理对象Proxy" class="headerlink" title="代理对象Proxy"></a>代理对象Proxy</h2><p>Proxy用来修改某些操作的默认行为，代理由构造函数创建，必须接受两个参数：<strong>被代理的目标对象，和处理程序对象</strong>，这两个参数缺少任何一个都会报错，我们也可以使用简单的对象字面量创建空代理</p>
<h3 id="代理操作"><a href="#代理操作" class="headerlink" title="代理操作"></a>代理操作</h3><p>为对象target创建一个代理对象</p>
<a id="more"></a>

<figure class="hljs highlight javascript"><table><tr><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> target = &#123;<br>  <span class="hljs-attr">id</span>: <span class="hljs-string">'target'</span><br>&#125;<br><br><span class="hljs-keyword">const</span> handler = &#123;&#125;;<br><br><span class="hljs-keyword">const</span> proxy = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Proxy</span>(target, handler);<br><br><span class="hljs-built_in">console</span>.log(target.id) <span class="hljs-comment">// target</span><br><span class="hljs-built_in">console</span>.log(proxy.id) <span class="hljs-comment">// target</span><br><br><span class="hljs-comment">// 给代理属性赋值会反映在两个对象上，因为两个对象访问的是同一个值</span><br>proxy.name = <span class="hljs-string">'dell'</span><br><span class="hljs-built_in">console</span>.log(target.name) <span class="hljs-comment">// 'dell'</span><br></code></pre></td></tr></table></figure>

<h3 id="代理捕获器"><a href="#代理捕获器" class="headerlink" title="代理捕获器"></a>代理捕获器</h3><p>代理的主要目的就是定义<code>trap</code>（捕获器），就是proxy的第二个参数处理程序对象中定义的<code>基本操作拦截器</code>每个处理程序对象可以包含零个或多个捕获器，每个捕获器都对应一种基本操作，可以直接或间接的在代理对象上使用</p>
<h4 id="例如定义一个get-捕获器拦截对象属性的读取"><a href="#例如定义一个get-捕获器拦截对象属性的读取" class="headerlink" title="例如定义一个get()捕获器拦截对象属性的读取"></a>例如定义一个<code>get()</code>捕获器<strong>拦截对象属性的读取</strong></h4><figure class="hljs highlight javascript"><table><tr><td class="code"><pre><code class="hljs javascript"> <span class="hljs-keyword">const</span> target = &#123;<br>   <span class="hljs-attr">foo</span>: <span class="hljs-string">'bar'</span><br> &#125;<br><br> <span class="hljs-keyword">const</span> handler = &#123;<br>   <span class="hljs-keyword">get</span>() &#123;<br>     <span class="hljs-keyword">return</span> <span class="hljs-string">'handle override'</span><br>   &#125;<br> &#125;<br><br> <span class="hljs-keyword">const</span> proxy = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Proxy</span>(target, handler);<br><span class="hljs-comment">// 访问原对象属性</span><br> <span class="hljs-built_in">console</span>.log(target.foo) <span class="hljs-comment">// foo</span><br> <span class="hljs-comment">// 访问代理对象属性，被拦截</span><br> <span class="hljs-built_in">console</span>.log(proxy.foo) <span class="hljs-comment">// handle override</span><br><br><span class="hljs-comment">// get捕获器的三个参数： 目标对象，要查询的属性，代理对象实例本身</span><br> <span class="hljs-keyword">const</span> target1 = &#123;<br>   <span class="hljs-attr">foo</span>: <span class="hljs-string">'bar'</span><br> &#125;<br><br> <span class="hljs-keyword">const</span> handler1 = &#123;<br>   <span class="hljs-keyword">get</span>(trapTarget, property, receiver) &#123;<br>     <span class="hljs-comment">// 返回目标对象的属性</span><br>     <span class="hljs-keyword">return</span> trapTarget[property]<br>   &#125;<br> &#125;<br> <span class="hljs-keyword">const</span> proxy1 = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Proxy</span>(target1, handler1)<br> <span class="hljs-built_in">console</span>.log(proxy1.foo)<br></code></pre></td></tr></table></figure>

<p>上面代码第一次对target对象进行代理，访问target的id是target， 而proxy的代理是handle override</p>
<p><strong>说明要使得<code>Proxy</code>起作用必须针对proxy实例进行操作，而不是针对目标对象</strong></p>
<h4 id="set-方法拦截某个属性的赋值操作，可以接受四个参数：-目标对象，属性名，属性值，和proxy实例本身"><a href="#set-方法拦截某个属性的赋值操作，可以接受四个参数：-目标对象，属性名，属性值，和proxy实例本身" class="headerlink" title="set()方法拦截某个属性的赋值操作，可以接受四个参数： 目标对象，属性名，属性值，和proxy实例本身"></a><code>set()</code>方法<strong>拦截某个属性的赋值操作，可以接受四个参数： 目标对象，属性名，属性值，和proxy实例本身</strong></h4><figure class="hljs highlight javascript"><table><tr><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">let</span> validator = &#123;<br>  <span class="hljs-attr">set</span>: <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">obj, prop, value</span>) </span>&#123;<br>    <span class="hljs-keyword">if</span> (prop === <span class="hljs-string">'age'</span>) &#123;<br>      <span class="hljs-keyword">if</span> (value &lt; <span class="hljs-number">20</span>) &#123;<br>        <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-built_in">TypeError</span>(<span class="hljs-string">'the age is too young'</span>)<br>      &#125;<br>    &#125;<br>    obj[prop] = value<br>  &#125;<br>&#125;<br><br><span class="hljs-keyword">let</span> person = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Proxy</span>(&#123;&#125;, validator)<br>person.age = <span class="hljs-number">10</span><br><span class="hljs-built_in">console</span>.log(person.age) <span class="hljs-comment">// throw TypeError</span><br>person.age = <span class="hljs-number">30</span> <span class="hljs-comment">// 30</span><br></code></pre></td></tr></table></figure>

<p>如下代码，当目标对象自身的某个属性不可写的时候，那么set方法将不起作用</p>
<figure class="hljs highlight javascript"><table><tr><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">let</span> validator = &#123;<br>  <span class="hljs-attr">set</span>: <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">obj, prop, value</span>) </span>&#123;<br>    <span class="hljs-keyword">if</span> (prop === <span class="hljs-string">'age'</span>) &#123;<br>      <span class="hljs-keyword">if</span> (value &lt; <span class="hljs-number">20</span>) &#123;<br>        <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-built_in">TypeError</span>(<span class="hljs-string">'the age is too young'</span>)<br>      &#125;<br>    &#125;<br>    obj[prop] = value<br>  &#125;<br>&#125;<br><br><span class="hljs-keyword">const</span> target = &#123;<br>  <span class="hljs-attr">name</span>: <span class="hljs-string">'lhj'</span><br>&#125;<br><br><span class="hljs-built_in">Reflect</span>.defineProperty(target, <span class="hljs-string">'age'</span>, &#123;<br>  <span class="hljs-attr">value</span>: <span class="hljs-number">23</span>,<br>  <span class="hljs-attr">writable</span>: <span class="hljs-literal">false</span>,<br><br>&#125;)<br><br><span class="hljs-keyword">let</span> person = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Proxy</span>(target, validator)<br>person.age = <span class="hljs-number">30</span><br><span class="hljs-built_in">console</span>.log(person.age)<br></code></pre></td></tr></table></figure>

<h4 id="apply-方法拦截函数调用、call、apply操作"><a href="#apply-方法拦截函数调用、call、apply操作" class="headerlink" title="apply()方法拦截函数调用、call、apply操作"></a><code>apply()</code>方法拦截函数调用、<code>call</code>、<code>apply</code>操作</h4><p>apply接受三个参数，分别是目标对象、目标对象的上下文对象（this）、和目标对象的数组</p>
<figure class="hljs highlight javascript"><table><tr><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> target = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>&#123;<br>  <span class="hljs-keyword">return</span> <span class="hljs-string">'I am the target'</span><br>&#125;<br><br><span class="hljs-keyword">var</span> handler = &#123;<br>  <span class="hljs-attr">apply</span>: <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>&#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">'I am the proxy'</span><br>  &#125;<br>&#125;<br><br><span class="hljs-keyword">var</span> proxy = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Proxy</span>(target, handler)<br></code></pre></td></tr></table></figure>

<h4 id="has-方法，用来拦截HasProperty操作，即判断对象是否具有某个属性时，这个方法会生效，典型的操作就是in操作符"><a href="#has-方法，用来拦截HasProperty操作，即判断对象是否具有某个属性时，这个方法会生效，典型的操作就是in操作符" class="headerlink" title="has()方法，用来拦截HasProperty操作，即判断对象是否具有某个属性时，这个方法会生效，典型的操作就是in操作符"></a><code>has()</code>方法，用来拦截HasProperty操作，即判断对象是否具有某个属性时，这个方法会生效，典型的操作就是<code>in</code>操作符</h4><p><code>has()</code>方法接受两个参数，分别是目标对象、需查询的属性名</p>
<figure class="hljs highlight javascript"><table><tr><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> handler = &#123;<br>  has (target, key) &#123;<br>    <span class="hljs-keyword">if</span> (key[<span class="hljs-number">0</span>] === <span class="hljs-string">'_'</span>) &#123;<br>      <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span><br>    &#125;<br>    <span class="hljs-keyword">return</span> key <span class="hljs-keyword">in</span> target<br>  &#125;<br>&#125;<br><span class="hljs-keyword">var</span> target  = &#123; <span class="hljs-attr">_prop</span>: <span class="hljs-string">'foo'</span>, <span class="hljs-attr">prop</span>: <span class="hljs-string">'foo'</span>&#125;<br><span class="hljs-keyword">var</span> proxy = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Proxy</span>(target, handler);<br><span class="hljs-string">'_prop'</span> <span class="hljs-keyword">in</span> proxy <span class="hljs-comment">// fasle</span><br></code></pre></td></tr></table></figure>

<p>has方法对in操作符进行了拦截，将有’_’的属性隐藏，不会被<code>in</code>发现</p>
<h2 id="Reflect"><a href="#Reflect" class="headerlink" title="Reflect"></a>Reflect</h2><p><code>Reflect</code>对象与<code>Proxy</code>对象一样，也是为了ES6操作对象而提供的API。也叫反射对象</p>
<p><strong>反射机制：指的是程序在运行时能活够获取自身的信息</strong></p>
<p>设计<code>Reflect</code>对象的目的：</p>
<p>将<code>Object</code>对象的一些明显属于语言内部的方法（例如<code>Obejct.defineProperty()</code>）放到<code>Proxy</code>上，现在某些这些方法在两者都可以访问，未来将只部署在<code>Reflect</code>上。</p>
<p><code>js的for in</code> 、<code>Array.isArray/Object.getOwnPropertyDescriptor</code>甚至是<code>Obejct.keys</code>都可以归类到反射这一类中，那么我们为什么还需要Reflect呢</p>
<p>原始写法：</p>
<figure class="hljs highlight javascript"><table><tr><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> myObject = Obejct.create(<span class="hljs-literal">null</span>)<br>myObject.hasOwnProperty === <span class="hljs-literal">undefined</span><br><span class="hljs-built_in">Object</span>.property.hasOwnProperty.call(myObject, <span class="hljs-string">'foo'</span>)<br></code></pre></td></tr></table></figure>

<p>使用Reflect</p>
<figure class="hljs highlight javascript"><table><tr><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> myObject = Obejct.create(<span class="hljs-literal">null</span>)<br><span class="hljs-built_in">Reflect</span>.ownKeys(myObject)<br></code></pre></td></tr></table></figure>

<p><code>Reflect</code>对象一共有13个静态方法，他们大部分与<code>Object</code>对象的同名方法作用是相同的，而且与`Proxy对象的方法是一一对应的</p>
<ul>
<li>Reflect.apply(target, thisArg, args)</li>
<li>Reflect.construct(target, args)</li>
<li>Reflect.get(target, name, receiver)</li>
<li>Reflect.set(target, name, value, receiver)</li>
<li>Reflect.defineProperty(target, name, desc)</li>
<li>Reflect.deleteProperty(target, name)</li>
<li>Reflect.has(target, name)</li>
<li>Reflect.ownKeys(target)</li>
<li>Reflect.isExtensible(target)</li>
<li>Reflect.preventExtensions(target)</li>
<li>Reflect.getOwnPropertyDescriptor(target, name)</li>
<li>Reflect.getPrototypeOf(target)</li>
<li>Reflect.setPrototypeOf(target, prototype)</li>
</ul>
]]></content>
      <categories>
        <category>前端</category>
        <category>JavaScript</category>
        <category>对象</category>
      </categories>
      <tags>
        <tag>javaScript</tag>
        <tag>Object</tag>
        <tag>proxy</tag>
      </tags>
  </entry>
  <entry>
    <title>Vue组件</title>
    <url>/2020/05/14/2021-3-10vue%E7%BB%84%E4%BB%B6%E6%B5%85%E8%B0%88/</url>
    <content><![CDATA[<h2 id="Vue组件"><a href="#Vue组件" class="headerlink" title="Vue组件"></a>Vue组件</h2><figure class="hljs highlight javascript"><table><tr><td class="code"><pre><code class="hljs javascript">&lt;!DOCTYPE html&gt;<br>&lt;html lang="en"&gt;<br>&lt;head&gt;<br>  &lt;meta charset="UTF-8"&gt;<br>  &lt;meta name="viewport" content="width=device-width, initial-scale=1.0"&gt;<br>  &lt;title&gt;Document&lt;/title&gt;<br>  &lt;script src="https://unpkg.com/vue@next"&gt;&lt;/script&gt;<br>&lt;/head&gt;<br>&lt;body&gt;<br>  &lt;div id="root"&gt;&lt;/div&gt;<br>  <br>  &lt;script&gt;<br>    const app = Vue.createApp(&#123;<br>      data() &#123;<br>        return &#123;<br>          message: 'hello',<br>        &#125;<br>      &#125;,<br>      template: `<br>      &lt;div&gt;<br>        &#123;&#123;message&#125;&#125;  <br>        &lt;counter /&gt;<br>      &lt;/div&gt;      <br>      `<br>    &#125;)<br>    <br>    app.component('counter', &#123;<br>      template: `counter全局组件`<br>    &#125;)<br><br>    const vm = app.mount('#root')<br>  &lt;/script&gt;<br>&lt;/body&gt;<br>&lt;/html&gt;<br></code></pre></td></tr></table></figure>

<a id="more"></a>

<p>使用实例app调用compenent方法，注册全局组件，可以在父组件任意调用，因为他注册在全局环境中，但是不管我们引不引用，它都占用内存空间，有时会对系统性能有影响。</p>
<figure class="hljs highlight javascript"><table><tr><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> app = Vue.createApp(&#123;<br>   <span class="hljs-attr">components</span>: &#123;Dell&#125;,<br>   data() &#123;<br>     <span class="hljs-keyword">return</span> &#123;<br>       <span class="hljs-attr">message</span>: <span class="hljs-string">'hello'</span>,<br>     &#125;<br>   &#125;,<br>   <span class="hljs-attr">template</span>: <span class="hljs-string">`<br>   &lt;div&gt;<br>     &#123;&#123;message&#125;&#125;  <br>     &lt;dell /&gt;<br>   &lt;/div&gt;      <br>   `</span><br> &#125;)<br> <span class="hljs-keyword">const</span> Dell = &#123;<br>   <span class="hljs-attr">template</span>: <span class="hljs-string">`<br>     &lt;div&gt;局部组件&lt;/div&gt;<br>   `</span><br> &#125;<br></code></pre></td></tr></table></figure>

<p>使用局部组件要注册之后才能使用，性能发挥上较高</p>
<h2 id="组件传值"><a href="#组件传值" class="headerlink" title="组件传值"></a>组件传值</h2><p>父组件通过props传值给子组件</p>
<figure class="hljs highlight javascript"><table><tr><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> app = Vue.createApp(&#123;<br>      <span class="hljs-attr">template</span>: <span class="hljs-string">`<br>      &lt;div&gt;<br>        &lt;test content="123" /&gt;<br>      &lt;/div&gt;      <br>      `</span><br>    &#125;)<br><br>    app.component(<span class="hljs-string">'test'</span>, &#123;<br>      <span class="hljs-attr">props</span>: [<span class="hljs-string">'content'</span>],<br>      <span class="hljs-comment">// 使用typeof发现答应在屏幕上的仍然是一个字符串变量</span><br>      <span class="hljs-attr">template</span>: <span class="hljs-string">`&lt;div&gt;&#123;&#123; typeof content&#125;&#125;&lt;/div&gt;`</span><br>    &#125;)<br>    <span class="hljs-keyword">const</span> vm = app.mount(<span class="hljs-string">'#root'</span>)<br>    <span class="hljs-comment">/*<br>    * 通过data定义变量，我们动态的传值，此时content需要加上v-bind或者简写`*`,<br>    动态的意思是他是定义为一个变量，根据变量的改变而改变，而不是直接写死的字符串<br>    */</span><br>    <span class="hljs-keyword">const</span> app = Vue.createApp(&#123;<br>      data() &#123;<br>        <span class="hljs-keyword">return</span> &#123;<br>          <span class="hljs-attr">num</span>: <span class="hljs-number">123</span><br>        &#125;<br>      &#125;,<br>      <span class="hljs-attr">template</span>: <span class="hljs-string">`<br>      &lt;div&gt;<br>        &lt;test :content="num" /&gt;<br>      &lt;/div&gt;      <br>      `</span><br>    &#125;)<br><br>    app.component(<span class="hljs-string">'test'</span>, &#123;<br>      <span class="hljs-attr">props</span>: [<span class="hljs-string">'content'</span>],<br>      <span class="hljs-comment">//当我们需要判定组件传过来的值的类型，那么我可以不使用数组</span><br>      props： &#123;<br>      <span class="hljs-attr">content</span>: <span class="hljs-built_in">String</span><br>    &#125;<br>      <span class="hljs-attr">template</span>: <span class="hljs-string">`&lt;div&gt;&#123;&#123; typeof content&#125;&#125;&lt;/div&gt;`</span><br>    &#125;)<br>    <br><br>    <span class="hljs-keyword">const</span> vm = app.mount(<span class="hljs-string">'#root'</span>)<br>    <span class="hljs-comment">// 传递一个函数，同时我们还可以添加required：true,表示必须传这个props，不传的话将会有警告，default：表示默认值，如果父组件不传的话，将会使用这个默认值</span><br>    <span class="hljs-keyword">const</span> app = Vue.createApp(&#123;<br>      data() &#123;<br>        <span class="hljs-keyword">return</span> &#123;<br>          <span class="hljs-attr">num</span>: <span class="hljs-function"><span class="hljs-params">()</span> =&gt;</span> &#123;<br>            alert(<span class="hljs-number">123</span>)<br>          &#125;<br>        &#125;<br>      &#125;,<br>      <span class="hljs-attr">template</span>: <span class="hljs-string">`<br>      &lt;div&gt;<br>        &lt;test :content="num" /&gt;<br>      &lt;/div&gt;      <br>      `</span><br>    &#125;)<br><br>    app.component(<span class="hljs-string">'test'</span>, &#123;<br>      <span class="hljs-attr">props</span>: &#123;<br>        <span class="hljs-attr">content</span>: <span class="hljs-built_in">Function</span><br>      &#125;,<br>      <span class="hljs-attr">methods</span>: &#123;<br>        handle() &#123;<br>          <span class="hljs-keyword">this</span>.content()<br>        &#125;<br>      &#125;,<br>      <span class="hljs-attr">template</span>: <span class="hljs-string">`&lt;div @click="this.handle"&gt;&#123;&#123; typeof content&#125;&#125;&lt;/div&gt;`</span><br>    &#125;)<br>    <br>    <span class="hljs-keyword">const</span> vm = app.mount(<span class="hljs-string">'#root'</span>)<br></code></pre></td></tr></table></figure>

<h3 id="props的小注意"><a href="#props的小注意" class="headerlink" title="props的小注意"></a>props的小注意</h3><figure class="hljs highlight javascript"><table><tr><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> app = Vue.createApp(&#123;<br>      data() &#123;<br>        <span class="hljs-keyword">return</span> &#123;<br>          <span class="hljs-attr">a</span>:<span class="hljs-number">1</span>,<br>          <span class="hljs-attr">b</span>:<span class="hljs-number">2</span>,<br>          <span class="hljs-attr">c</span>:<span class="hljs-number">3</span><br>        &#125;<br>      &#125;,<br>      <span class="hljs-attr">template</span>: <span class="hljs-string">`<br>      &lt;div&gt;<br>        &lt;test :a="a" :b="b" :c="c" /&gt;<br>      &lt;/div&gt;      <br>      `</span><br>    &#125;)<br>    app.component(<span class="hljs-string">'test'</span>, &#123;<br>      <span class="hljs-attr">props</span>: [<span class="hljs-string">'a'</span>, <span class="hljs-string">'b'</span>,<span class="hljs-string">'c'</span>],<br>      <span class="hljs-attr">template</span>: <span class="hljs-string">`&lt;div&gt;&#123;&#123;a&#125;&#125;&#123;&#123;b&#125;&#125;&#123;&#123;c&#125;&#125;&lt;/div&gt;`</span><br>    &#125;)<br><br><span class="hljs-comment">// 优化</span><br><span class="hljs-keyword">const</span> app = Vue.createApp(&#123;<br>      data() &#123;<br>        <span class="hljs-keyword">return</span> &#123;<br>          <span class="hljs-attr">params</span>: &#123;<br>            <span class="hljs-attr">a</span>:<span class="hljs-number">1</span>,<br>            <span class="hljs-attr">b</span>:<span class="hljs-number">2</span>,<br>            <span class="hljs-attr">c</span>:<span class="hljs-number">3</span><br>          &#125;<br>        &#125;<br>      &#125;,<br>      <span class="hljs-attr">template</span>: <span class="hljs-string">`<br>      &lt;div&gt;<br>        &lt;test :content="params" /&gt;<br>      &lt;/div&gt;      <br>      `</span><br>    &#125;)<br><br>    app.component(<span class="hljs-string">'test'</span>, &#123;<br>      <span class="hljs-attr">props</span>: [<span class="hljs-string">'content'</span>],<br>      <span class="hljs-attr">template</span>: <span class="hljs-string">`&lt;div&gt;&#123;&#123;content.a&#125;&#125;&#123;&#123;content.b&#125;&#125;&#123;&#123;content.c&#125;&#125;&lt;/div&gt;`</span><br>    &#125;)<br></code></pre></td></tr></table></figure>

<p><strong>1.当父组件要向子组件传递很多props时，一个一个传很麻烦，可以将props放到一个对象中，通过对象.属性的方式访问</strong></p>
<p><strong>2.如果模版中使用content-abc这种方式命名，那么在调用的时候要使用驼峰命名法</strong></p>
<p><strong>3. vue遵循单向数据流，也就是说我们不能在子组件内更改父组件传来的props，当我们修改时，vue会给我们警告[Vue warn]: Attempting to mutate prop “content”. Props are readonly，告诉我们prop是只读的不可修改，我们可以将，props的值赋值给data中的变量，再去修改data中的变量，以达到渲染props的目的</strong></p>
<figure class="hljs highlight javascript"><table><tr><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> app = Vue.createApp(&#123;<br>      data() &#123;<br>        <span class="hljs-keyword">return</span> &#123;<br>          <span class="hljs-attr">num</span>: <span class="hljs-number">1</span><br>        &#125;<br>      &#125;,<br>      <span class="hljs-attr">template</span>: <span class="hljs-string">`<br>      &lt;div&gt;<br>        &lt;test :content="num" /&gt;<br>      &lt;/div&gt;      <br>      `</span><br>    &#125;)<br><br>    app.component(<span class="hljs-string">'test'</span>, &#123;<br>      <span class="hljs-attr">props</span>: [<span class="hljs-string">'content'</span>],<br>      <span class="hljs-attr">methods</span>: &#123;<br>        handleClick() &#123;<br>          <span class="hljs-keyword">this</span>.content +=<span class="hljs-number">1</span><br>        &#125;<br>      &#125;,<br>      <span class="hljs-attr">template</span>: <span class="hljs-string">`&lt;div @click="this.handleClick"&gt;&#123;&#123;content&#125;&#125;&lt;/div&gt;`</span><br>    &#125;)<br></code></pre></td></tr></table></figure>

<p><strong>4. 子组件向父组件传递一个事件，来修改父组件中的数据</strong></p>
<figure class="hljs highlight javascript"><table><tr><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> app = Vue.createApp(&#123;<br>      data() &#123;<br>        <span class="hljs-keyword">return</span> &#123;<br>          <span class="hljs-attr">num</span>: <span class="hljs-number">1</span><br>        &#125;<br>      &#125;,<br>      <span class="hljs-attr">methods</span>: &#123;<br>        addNum() &#123;<br>          <span class="hljs-keyword">this</span>.num +=<span class="hljs-number">1</span><br>        &#125;<br>      &#125;,<br>      <span class="hljs-attr">template</span>: <span class="hljs-string">`<br>      &lt;div&gt;<br>        &lt;test :content="num" @add-num="addNum" /&gt;<br>      &lt;/div&gt;      <br>      `</span><br>    &#125;)<br><br>    app.component(<span class="hljs-string">'test'</span>, &#123;<br>      <span class="hljs-attr">props</span>: [<span class="hljs-string">'content'</span>],<br>      <span class="hljs-attr">emits</span>: [<span class="hljs-string">'addNum'</span>]<br>      <span class="hljs-attr">methods</span>: &#123;<br>        handleClick() &#123;<br>          <span class="hljs-keyword">this</span>.$emit(<span class="hljs-string">'addNum'</span>)<br>        &#125;<br>      &#125;,<br>      <span class="hljs-attr">template</span>: <span class="hljs-string">`&lt;div @click="this.handleClick"&gt;&#123;&#123;content&#125;&#125;&lt;/div&gt;`</span><br>    &#125;)<br></code></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>前端</category>
        <category>Vue</category>
      </categories>
      <tags>
        <tag>框架</tag>
        <tag>javaScript</tag>
        <tag>组件</tag>
      </tags>
  </entry>
  <entry>
    <title>2021-3-14-Vueslot简析</title>
    <url>/2021/03/14/2021-3-14-Vueslot%E7%AE%80%E6%9E%90/</url>
    <content><![CDATA[<p>关于slot，在组件化的模式下，通常遇到一个会多次使用的元素，例如封装一个后台管理系统常需要用到的表格，弹窗等等组件，但是通常在复用性高的情况下又有略微的不同，例如一个弹窗，有的情况可能需要仅仅展示一个图片一个按钮，有时又需要展示出这个弹窗的标题，那么根据不同的情况，我们会在这个组件中穿插不同的元素，这个时候就需要用到插槽。</p>
<a id="more"></a>

<img src="/2021/03/14/2021-3-14-Vueslot简析/1.png">

<p>例：我们定义了一个子组件<code>myform</code>，并且在父组件中调用了两次，但是第一次我们需要在input下面放上点击按钮，而第二次并不需要，这个时候slot就派上了用场</p>
<figure class="hljs highlight javascript"><table><tr><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> app = Vue.createApp(&#123;<br>      data() &#123;<br>        <span class="hljs-keyword">return</span> &#123;<br>          <span class="hljs-attr">needButton</span>: <span class="hljs-string">'我需要一个按钮'</span>,<br>          <span class="hljs-attr">noNeed</span>: <span class="hljs-string">'不太需要'</span><br>        &#125;<br>      &#125;,<br>      <span class="hljs-attr">template</span>: <span class="hljs-string">`<br>        &lt;myform :text="needButton"&gt;<br>          &lt;button&gt;按钮&lt;/button&gt;<br>          &lt;hr /&gt;<br>        &lt;/myform&gt;<br>        &lt;myform :text="noNeed" /&gt;<br>      `</span><br>    &#125;)<br><br>    app.component(<span class="hljs-string">'myform'</span>, &#123;<br>      <span class="hljs-attr">props</span>: [<span class="hljs-string">'text'</span>],<br>      <span class="hljs-attr">methods</span>: &#123;<br>        handleClick() &#123;<br>          alert(<span class="hljs-number">123</span>)<br>        &#125;<br>      &#125;,<br>      <span class="hljs-attr">template</span>: <span class="hljs-string">`&lt;div&gt;<br>        &lt;input /&gt;<br>        &lt;div @click="handleClick"&gt;&#123;&#123;text&#125;&#125;&lt;/div&gt;<br>        &lt;slot /&gt;<br>        &lt;/div&gt;`</span><br>    &#125;)<br>    <span class="hljs-keyword">const</span> vm = app.mount(<span class="hljs-string">'#root'</span>)<br></code></pre></td></tr></table></figure>

<p>上面我们将不太确定的具体需要什么元素的位置使用slot代替，当我们在父组件调用子组件时，插入的元素将自动被slot元素承载</p>
<h3 id="作用域插槽"><a href="#作用域插槽" class="headerlink" title="作用域插槽"></a>作用域插槽</h3><p>当子组件渲染的内容由父组件决定的时候，我们可以使用作用域插槽，父组件可以调用子组件中的item数据，</p>
<figure class="hljs highlight javascript"><table><tr><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> app = Vue.createApp(&#123;<br>  <span class="hljs-comment">//这里也可以使用解构&#123;slotPros.item&#125;</span><br>     <span class="hljs-comment">// &lt;list v-slot="&#123;item&#125;"&gt;</span><br>     <span class="hljs-comment">// 	&lt;div&gt;&#123;&#123;item&#125;&#125;&lt;/div&gt;</span><br>     <span class="hljs-comment">// &lt;/list&gt;`</span><br>      <span class="hljs-attr">template</span>: <span class="hljs-string">`<br>      &lt;list v-slot="slotProps"&gt;<br>        &lt;div&gt;&#123;&#123;slotProps.item&#125;&#125;&lt;/div&gt;<br>      &lt;/list&gt;<br>      `</span><br>    &#125;)<br><br>    app.component(<span class="hljs-string">'list'</span>, &#123;<br>      data() &#123;<span class="hljs-keyword">return</span> &#123;<span class="hljs-attr">list</span>: [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>]&#125;&#125;,<br>      <span class="hljs-attr">template</span>: <span class="hljs-string">`<br>        &lt;div&gt;<br>          &lt;slot v-for="item in list" :item="item"&gt;&lt;/slot&gt;<br>        &lt;/div&gt;<br>      `</span><br>    &#125;)<br></code></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>前端</category>
        <category>Vue</category>
      </categories>
      <tags>
        <tag>slot</tag>
      </tags>
  </entry>
  <entry>
    <title>2021-3-14CSS简写</title>
    <url>/2021/03/14/2021-3-14CSS%E7%AE%80%E5%86%99/</url>
    <content><![CDATA[<p>关于合理的简写：</p>
<figure class="hljs highlight css"><table><tr><td class="code"><pre><code class="hljs css"><span class="hljs-selector-tag">background</span>: <span class="hljs-selector-tag">blue</span>;<br><span class="hljs-selector-tag">background-color</span>: <span class="hljs-selector-tag">blue</span>;<br></code></pre></td></tr></table></figure>

<p>前者是简写，可以确保你得到一个蓝色的纯色背景，但是如果你使用展开式的单个属性，那么这个元素的背景最终可能显示为一个粉红色的图案，一张图片，或者其他任何东西，因为同时可能会有一条<code>background-image</code>在其作用，展开式的写法不会帮助我们清空所有其他相关的属性，<strong>你设置了一个蓝色背景，又在下面几行设置了一张背景图片，那么你永远也看不到这个蓝色的背景图片!</strong></p>
{% asset_img 1.png %}

<p>比如我们要实现li前面的背景图片可以设置</p>
<figure class="hljs highlight"><table><tr><td class="code"><pre><code class="hljs CSS">background:  #badcfe url(./images/icon2.gif) no-repeat left center;<br></code></pre></td></tr></table></figure>

<p>但是这个是我在设置<code>list-style-image</code>无效的情况下的无奈之举</p>
<p>当时使用的是dl自定义列表，那么要使用</p>
<figure class="hljs highlight CSS"><table><tr><td class="code"><pre><code class="hljs CSS"><span class="hljs-selector-tag">display</span>: <span class="hljs-selector-tag">list-item</span>;<br><span class="hljs-selector-tag">list-style</span>: <span class="hljs-selector-tag">url</span>()<br></code></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>前端</category>
        <category>CSS</category>
      </categories>
      <tags>
        <tag>CSS3</tag>
      </tags>
  </entry>
  <entry>
    <title>理解理解Vue的mixin</title>
    <url>/2021/03/17/2021-3-17-%E7%90%86%E8%A7%A3%E7%90%86%E8%A7%A3Vue%E7%9A%84mixin/</url>
    <content><![CDATA[<p>mixin翻译为混入，创建它时也是创建一个对象，他也有data，也有生命周期，也有methods方法，所以根据官网的说法，他可以灵活的分发Vue组件中的可复用功能，当组件使用混入对象时，所有的对象选项都将被混合进入该组件本身的选项，也就是把mixin中的data与组件实例的对象混合在一起，那么当两者之间有重复时，会以特定的方式进行合并。</p>
<p>如果data中的变量与mixin中的变量冲突（也就是重复），那么以data中的变量优先，如果没有在data中发现该变量，则选择mixin中的变量</p>
<p>生命周期将会合并为一个数组，如果发生冲突，mixin先执行，实例后执行</p>
<p>methods，coimponent,directives将会合并为一个对象，如果出现冲突，取组件实例中的方法</p>
<a id="more"></a>

<figure class="hljs highlight javascript"><table><tr><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> myMixin = &#123;<br>  <span class="hljs-attr">methods</span>: &#123;<br>    foo() &#123;<br>      <span class="hljs-built_in">console</span>.log(<span class="hljs-string">'foo'</span>)<br>    &#125;,<br>    conflicting() &#123;<br>      <span class="hljs-built_in">console</span>.log(<span class="hljs-string">'from mixin'</span>)<br>    &#125;<br>  &#125;<br>&#125;<br><br><span class="hljs-keyword">const</span> app = Vue.createApp(&#123;<br>  <span class="hljs-attr">mixins</span>: [myMixin],<br>  <span class="hljs-attr">methods</span>: &#123;<br>    bar() &#123;<br>      <span class="hljs-built_in">console</span>.log(<span class="hljs-string">'bar'</span>)<br>    &#125;,<br>    conflicting() &#123;<br>      <span class="hljs-built_in">console</span>.log(<span class="hljs-string">'from self'</span>)<br>    &#125;<br>  &#125;<br>&#125;)<br><br><span class="hljs-keyword">const</span> vm = app.mount(<span class="hljs-string">'#mixins-basic'</span>)<br><br>vm.foo() <span class="hljs-comment">// =&gt; "foo"</span><br>vm.bar() <span class="hljs-comment">// =&gt; "bar"</span><br>vm.conflicting() <span class="hljs-comment">// =&gt; "from self"</span><br></code></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>前端</category>
        <category>Vue</category>
      </categories>
      <tags>
        <tag>slot</tag>
      </tags>
  </entry>
  <entry>
    <title>计算机是如何读懂我们的程序的呢</title>
    <url>/2021/03/21/2021-3-21-%E8%AE%A1%E7%AE%97%E6%9C%BA%E6%98%AF%E5%A6%82%E4%BD%95%E8%AF%BB%E6%87%82%E6%88%91%E4%BB%AC%E7%9A%84%E7%A8%8B%E5%BA%8F%E7%9A%84%E5%91%A2/</url>
    <content><![CDATA[<p>事实上当我们上第一节编程课时会了解到，我们所学的语言是高级语言，计算机并不能看懂我们的程序，我们需要编译器进行编译，计算机读取编译器编译后的结果，并完成我们想要执行的操作，但是当我们第一次使用ide当我们在文本中敲上正确的语法像这样</p>
<figure class="hljs highlight"><table><tr><td class="code"><pre><code class="hljs java">#include &lt;stdio.h&gt;<br>  <br> int main() &#123;<br>		printf("Hello World!")<br>	&#125;<br></code></pre></td></tr></table></figure>

<p>当我们按下运行，我们的工作被保存了，结果被输出了，我们得到了实时的结果。</p>
<a id="more"></a>

<p>但是事实上计算机读取当的文件是这样的</p>
<p>11100101100010010100100001010101</p>
<p>他们供计算机读取的列表，由二进制编写，也叫做机器码，我们经常可以看到计算机只能读取0，和1，为什么计算机只能读取这样的程序呢？</p>
<p>涉及到计算机的核心，处理器，<code>CPU</code>，处理器已经内置了处理这些指令的电路，只有当相应的指令被输入时。正确的电路才能连接在一起，完成对应的操作。指令中的某些0和1会引起某些晶体管的打开或关闭，最终将正确的电路连接到一起。</p>
<p>所以一开始我们的定义变量，if条件，循环，和函数，将转变为对应的机器指令。传达给计算机，这些高阶的结果可以让我们更轻松的思考程序。</p>
<p>但是如何将我们的一些程序翻译成计算机可读的机器语言，我们可以举简单的例子</p>
<figure class="hljs highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>  <span class="hljs-keyword">int</span> x;<br>  x = <span class="hljs-number">3</span>;<br>&#125;<br></code></pre></td></tr></table></figure>

<p>我们定义一个变量x，并对其赋值为3，它看起来有某种结构，但是对于计算机，只是毫无意义的字符序列。只是文本，将源码传入编译器。</p>
<p>编译器首先将文本分为单独的标记，有点像编译器在理解程序中的单词含义，接着标记被分为多层次的结构，就是所谓的解析树</p>
<img src="/2021/03/21/2021-3-21-计算机是如何读懂我们的程序的呢/1.png">

<p>接着编译器记录程序的上下文，包括变量和函数的名字，最后一步遍历树，转译成机器码</p>
<p>转译成机机器码确实有点难读和解释</p>
<img src="/2021/03/21/2021-3-21-计算机是如何读懂我们的程序的呢/2.jpg">

<p>实际上读起来还很难，将其写成汇编代码</p>
<img src="/2021/03/21/2021-3-21-计算机是如何读懂我们的程序的呢/3.jpg">

<img src="/2021/03/21/2021-3-21-计算机是如何读懂我们的程序的呢/4.jpg">

<p>这里的步骤记录了这块内存中创建了变量x，并给他赋值为3，简单的赋值语句就这样完成了，但是条件语句与循环就变得没那么简单，因为并没有等价的语句，而要用现有指令来模拟它们的行为，在if语句中让我们执行下面这块代码</p>
<img src="/2021/03/21/2021-3-21-计算机是如何读懂我们的程序的呢/5.jpg">

<p>只有当条件为真时执行这段代码，否则跳过这段代码，在汇编中，块中代码可以正常转译，但这之前还有条件指令<code>cmpl</code>以及下面的条件跳转指令<code>jg</code>，处理器根据前一条指令的结果，知道是否应该执行此跳转，该指令在处理器中临时设置一些标志，这样就可以记住一些结果当执行到跳转时用来判断，如果不符合跳出执行，执行器就会忽略该跳出指令，条件继续符合，继续执行块中的代码</p>
<p>但是有一个问题，如果在一台电脑编译程序，复制到另一台电脑并尝试运行它，可能不会工作，因为不同电脑可能有不同操作系统和不同的处理器，处理器可能使用了不同的机器指令！！！！</p>
]]></content>
      <categories>
        <category>计算机</category>
      </categories>
  </entry>
  <entry>
    <title>observer</title>
    <url>/2021/03/30/2021-3-21-observer/</url>
    <content><![CDATA[<p><code>**MutationObserver**</code>接口提供了监视对DOM树所做更改的能力。它被设计为旧的<code>Mutation Events</code>功能的替代品</p>
<p><code>MutationObserver</code>的实例要通过调用构造函数，并传入一个回调函数来创建：</p>
<figure class="hljs highlight javascript"><table><tr><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">let</span> observer = <span class="hljs-keyword">new</span> MutationObserver(<span class="hljs-function"><span class="hljs-params">()</span> =&gt;</span> &#123;&#125;)<br></code></pre></td></tr></table></figure>

<p><code>observe()</code>方法：配置实例在dom更改匹配选项时，通知回调函数开始接收通知</p>
<p>新创建的实例不会关联DOM的任何部分，要把这个observer与DOM关联起来，需要使用<code>observe()</code>方法，这个方法必须接受两个参数；要观察的DOM节点，以及一个MutationObserverInit对象</p>
<figure class="hljs highlight javascript"><table><tr><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">let</span> observer = <span class="hljs-keyword">new</span> MutationObserver(<span class="hljs-function"><span class="hljs-params">()</span> =&gt;</span> <span class="hljs-built_in">console</span>.log(<span class="hljs-string">'&lt;body&gt; attributes changed'</span>))<br>    observer.observe(<span class="hljs-built_in">document</span>.body, &#123;<span class="hljs-attr">attributes</span>: <span class="hljs-literal">true</span>&#125;)<br>    <span class="hljs-built_in">document</span>.body.className = <span class="hljs-string">'foo'</span> <span class="hljs-comment">// &lt;body&gt; attributes changed</span><br></code></pre></td></tr></table></figure>

<p><code>disconnect()</code>方法。在默认情况下，观察的元素不被垃圾回收，就会响应DOM变化时间，从而被执行，要提前终止执行回调，可以调用disconnect方法</p>
<figure class="hljs highlight javascript"><table><tr><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">let</span> observer = <span class="hljs-keyword">new</span> MutationObserver(<span class="hljs-function"><span class="hljs-params">()</span> =&gt;</span> <span class="hljs-built_in">console</span>.log(<span class="hljs-string">'&lt;body&gt; attributes changed'</span>))<br>    observer.observe(<span class="hljs-built_in">document</span>.body, &#123;<span class="hljs-attr">attributes</span>: <span class="hljs-literal">true</span>&#125;)<br>    <span class="hljs-built_in">document</span>.body.className = <span class="hljs-string">'foo'</span><br>    observer.disconnect()<br>    <span class="hljs-built_in">document</span>.body.className = <span class="hljs-string">'bvar'</span> <span class="hljs-comment">// 没有输出</span><br></code></pre></td></tr></table></figure>

<p><code>MutationObserverInit</code>用来控制对目标节点的观察范围，包括属性变化、文本变化和子节点变化</p>
]]></content>
      <categories>
        <category>前端</category>
        <category>JavaScript</category>
      </categories>
      <tags>
        <tag>javaScript</tag>
        <tag>MutationObserver</tag>
      </tags>
  </entry>
  <entry>
    <title>对象的迭代</title>
    <url>/2021/03/30/2021-3-30-%E5%AF%B9%E8%B1%A1%E7%9A%84%E8%BF%AD%E4%BB%A3/</url>
    <content><![CDATA[<p>在JavaScript有史以来的大部分时间内，迭代对象属性都是一个难题</p>
<p><code>Object.entries()</code>接收一个对象，返回对象的键值对数组</p>
<figure class="hljs highlight javascript"><table><tr><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> obj = &#123;<br>  <span class="hljs-attr">name</span>: <span class="hljs-string">'lhj'</span>,<br>  <span class="hljs-attr">age</span>: <span class="hljs-number">23</span>,<br>  sayName() &#123;<br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-keyword">this</span>.name)<br>  &#125;<br>&#125;<br><br>obj.sayName()<br><span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">Object</span>.entries(obj))<br><span class="hljs-comment">/*[<br>  [ 'name', 'lhj' ],<br>  [ 'age', 23 ],<br>  [ 'sayName', [Function: sayName] ]<br>]*/</span><br></code></pre></td></tr></table></figure>

<p><code>Obejct.values()</code>接收一个对象返回对象的值数组，不包括键</p>
<a id="more"></a>

<figure class="hljs highlight javascript"><table><tr><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> obj = &#123;<br>  <span class="hljs-attr">name</span>: <span class="hljs-string">'lhj'</span>,<br>  <span class="hljs-attr">age</span>: <span class="hljs-number">23</span>,<br>  sayName() &#123;<br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-keyword">this</span>.name)<br>  &#125;<br>&#125;<br><br><span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">Object</span>.values(obj)) <span class="hljs-comment">//  [ 'lhj', 23, [Function: sayName] ]</span><br></code></pre></td></tr></table></figure>

<p><strong>这两个方法执行对象的浅复制，并且非字符串属性会被转化为字符串</strong></p>
<p><code>for in</code>以<strong>任意</strong>顺序便利对象的除<code>Symbol</code>以外的<code>可枚举</code>属性</p>
<figure class="hljs highlight javascript"><table><tr><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">let</span> txt: string = <span class="hljs-string">''</span><br><span class="hljs-keyword">let</span> person: object = &#123;<span class="hljs-attr">fname</span>: <span class="hljs-string">'Bill'</span>, <span class="hljs-attr">lname</span>: <span class="hljs-string">'Gates'</span>, <span class="hljs-attr">age</span>: <span class="hljs-number">62</span>&#125;<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> i <span class="hljs-keyword">in</span> person) &#123;<br>    txt += person[i] + <span class="hljs-string">' '</span><br>&#125;<br><span class="hljs-built_in">console</span>.log(txt) <span class="hljs-comment">// Bill Gates 62</span><br></code></pre></td></tr></table></figure>

<p><code>**Object.keys()**</code> 方法会返回一个由一个给定对象的自身可枚举属性组成的数组，*<em>数组中属性名的排列顺序和正常循环遍历该对象时返回的顺序一致 *</em>。</p>
<figure class="hljs highlight javascript"><table><tr><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> arr = [<span class="hljs-string">'a'</span>, <span class="hljs-string">'b'</span>, <span class="hljs-string">'c'</span>];<br><span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">Object</span>.keys(arr)); <span class="hljs-comment">// console: ['0', '1', '2']</span><br><span class="hljs-keyword">var</span> obj = &#123; <span class="hljs-number">0</span>: <span class="hljs-string">'a'</span>, <span class="hljs-number">1</span>: <span class="hljs-string">'b'</span>, <span class="hljs-number">2</span>: <span class="hljs-string">'c'</span> &#125;;<br><span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">Object</span>.keys(obj)); <span class="hljs-comment">// console: ['0', '1', '2']</span><br></code></pre></td></tr></table></figure>

<p><code>**Object.assign()**</code> 方法用于将所有可枚举属性的值从一个或多个源对象分配到目标对象。它将返回目标对象。</p>
<figure class="hljs highlight javascript"><table><tr><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> target1 = &#123; <span class="hljs-attr">a</span>: <span class="hljs-number">1</span> &#125;<br><span class="hljs-keyword">const</span> target2 = &#123; <span class="hljs-attr">b</span>: <span class="hljs-number">2</span> &#125;<br><span class="hljs-keyword">const</span> target3 = &#123; <span class="hljs-attr">a</span>: <span class="hljs-number">1</span> &#125;<br><br><span class="hljs-built_in">Object</span>.assign(target1, target2, target3)<br><span class="hljs-built_in">console</span>.log(target1) &#123; <span class="hljs-attr">a</span>: <span class="hljs-number">1</span>, <span class="hljs-attr">b</span>: <span class="hljs-number">2</span> &#125;<br></code></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>前端</category>
        <category>JavaScript</category>
        <category>对象</category>
      </categories>
      <tags>
        <tag>javaScript</tag>
        <tag>Object</tag>
        <tag>迭代</tag>
      </tags>
  </entry>
  <entry>
    <title>7-31记</title>
    <url>/2020/07/31/7-31%E8%AE%B0/</url>
    <content><![CDATA[<p>模板字符串</p>
<p>数据库中返回的是纯数字模式的时间，例如下午四点，数据库中存储的为16，下午六点，数据库中储存的为18，</p>
<p>要求是我们需要将16展示为16：00-16：59的时间段</p>
<p>在elementUi的表格中</p>
<figure class="hljs highlight html"><table><tr><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">el-table-column</span> <span class="hljs-attr">label</span>=<span class="hljs-string">"姓名"</span> <span class="hljs-attr">width</span>=<span class="hljs-string">"180"</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">template</span> <span class="hljs-attr">slot-scope</span>=<span class="hljs-string">"&#123;row&#125;"</span>&gt;</span>&#123;&#123; `$(row.hour):00 - $(row.hour):59` &#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span><br> <span class="hljs-tag">&lt;/<span class="hljs-name">el-table-column</span>&gt;</span><br></code></pre></td></tr></table></figure>

<a id="more"></a>

<ol>
<li><p>解构赋值</p>
<p>对象的解构赋值</p>
<figure class="hljs highlight javascript"><table><tr><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">let</span> &#123;foo, bar&#125; = &#123;<span class="hljs-attr">foo</span>: <span class="hljs-string">'aaa'</span>, <span class="hljs-attr">bar</span>: <span class="hljs-string">'bbb'</span>&#125;<br>foo <span class="hljs-comment">// 'aaa'</span><br>bar <span class="hljs-comment">// 'bbb'</span><br></code></pre></td></tr></table></figure>

<p>对像的属性没有次序，变量必须与属性同名，才能正确的值</p>
<ol start="3">
<li>JSON.stringify({x:5,y:6}) //{‘x’:’5’,”y”,’6’}</li>
<li>JSON.parse(json)//解析json转为js值或对象</li>
</ol>
</li>
</ol>
]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>JS</tag>
        <tag>组件库</tag>
      </tags>
  </entry>
  <entry>
    <title>Promise</title>
    <url>/2020/08/27/2021-08-27Promise/</url>
    <content><![CDATA[<h1 id="Promise"><a href="#Promise" class="headerlink" title="Promise"></a>Promise</h1><p>Promise 是异步编程的解决方案，比传统的解决方案–回调函数和事件–更合理和强大。</p>
<h2 id="创建一个Promsie实例"><a href="#创建一个Promsie实例" class="headerlink" title="创建一个Promsie实例"></a>创建一个<code>Promsie</code>实例</h2><p>Promise构造函数接收一个函数<code>exectuor</code>作为参数，这个函数将<code>resolve()</code>、<code>reject()</code>作为入口参数，接下来，他会调用<code>exectuor()</code>，直到退出</p>
<figure class="hljs highlight javascript"><table><tr><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// 需用户声明的执行器函数</span><br>executor = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">resolve, reject</span>)</span>&#123;&#125;<br><span class="hljs-keyword">const</span> promise = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Promise</span>(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">resolve, reject</span>) </span>&#123;<br>  <span class="hljs-comment">// some code</span><br>  <span class="hljs-keyword">if</span> (<span class="hljs-comment">/* 异步操作成功*/</span>) &#123;<br>    resolve(value)<br>  &#125; <span class="hljs-keyword">else</span> &#123;<br>    reject(value)<br>  &#125;<br>&#125;)<br></code></pre></td></tr></table></figure>

<h2 id="回调异步来处理异步"><a href="#回调异步来处理异步" class="headerlink" title="回调异步来处理异步"></a>回调异步来处理异步</h2><p>在JS中的异步处理，第一时间想到的就是利用回调函数</p>
<p>通过回调实现x+y运算</p>
<figure class="hljs highlight javascript"><table><tr><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">//利用回调函数的异步处理</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">add</span>(<span class="hljs-params">getX, getY, cb</span>) </span>&#123;<br>  <span class="hljs-keyword">var</span> x, y;<br>  getX(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">xVal</span>)</span>&#123;<br>    x = xVal;<br>    <span class="hljs-comment">//去判断是否有值</span><br>    <span class="hljs-keyword">if</span>(y != <span class="hljs-literal">undefined</span>) &#123;<br>      cb(x + y);<br>    &#125;<br>  &#125;);<br>  getY(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">yVal</span>)</span>&#123;<br>    y = yVal;<br>    <span class="hljs-comment">//去判断是否有值</span><br>    <span class="hljs-keyword">if</span>(x != <span class="hljs-literal">undefined</span>) &#123;<br>      cb(x + y);<br>    &#125;<br>  &#125;);<br>&#125;<br>add(fetchX, fetchY, <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">sum</span>)</span>&#123;<br>  <span class="hljs-built_in">console</span>.log(sum)<br>&#125;)<br></code></pre></td></tr></table></figure>

<a id="more"></a>

<p>我们将x和y作为未来值，进行了一个运算add()</p>
<p>回调多了会出现层层嵌套，可读性变差，调试困难</p>
<p>一旦有所松动就会牵一发而动全身</p>
<p>当回调函数嵌套过多时</p>
<figure class="hljs highlight javascript"><table><tr><td class="code"><pre><code class="hljs javascript">doA(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;<br>  doB();<br>  doC(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;<br>    doD();<br>  &#125;)<br>  doE()<br>&#125;)<br>doF()<br></code></pre></td></tr></table></figure>

<p>尽管你能够正确的确定实际的运行顺序，但是，这一眼看上去确实比较复杂</p>
<p>实际的运行顺序</p>
<ul>
<li>doA()</li>
<li>doF()</li>
<li>doB()</li>
<li>doC()</li>
<li>doE()</li>
<li>doD()</li>
</ul>
<p>这还只是简易模式，真正的异步JavaScript程序代码要混乱的多，使这种追踪难度成倍增加</p>
<p>回调的函数优美度不足，同时缺少信任度</p>
<p>尽管我们的大脑能够以顺序的方式（这个，然后这个，然后这个）计划一系列任务，但大脑运作的事件化的本质使得控制流的恢复/重试/复制几乎不费什么力气。如果你出外办事的时候发现把购物清单落在了家里，那么这一天并不会因为你没有预知到这一点就成为世界末日了。你的大脑很容易就能针对这个小意外做出计划：回家拿清单，然后立刻返回商店就是了。</p>
<p>但是，手工硬编码（即使包含了硬编码的出错处理）回调的脆弱本性可就远没有这么优雅了。一旦你指定（也就是预先计划）了所有的可能事件和路径，代码就会变得非常复杂，以至于无法维护和更新。这才是回调地狱的真正问题所在！嵌套和缩进基本上只是转移注意力的枝节而已。</p>
<p>用Promise实现x+y</p>
<figure class="hljs highlight javascript"><table><tr><td class="code"><pre><code class="hljs javascript"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">add</span>(<span class="hljs-params">xPromise, yPromise</span>) </span>&#123;<br>  <span class="hljs-comment">//.all方法接受一个promise数组并返回一个新的promise，这个新的promise等待数组中的所有promise完成</span><br>  <span class="hljs-keyword">return</span> <span class="hljs-built_in">Promise</span>.all([xPromise, yPromise])<br>  <span class="hljs-comment">//promise决议之后，将取得x和y的值并加在一起</span><br>  .then(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">value</span>)</span>&#123;<br>    <span class="hljs-comment">//value是来自于之前决议的promise的数组,那么value[0]就是第一个promise的结果，value[2]就是第二个promise的结果</span><br>    <span class="hljs-keyword">return</span> values[<span class="hljs-number">0</span>] + value[<span class="hljs-number">1</span>]<br>  &#125;)<br>&#125;<br>add(fetchX(), fetchY())<br>.then(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">sum</span>)</span>&#123;<br>  <span class="hljs-built_in">console</span>.log(sum)<br>&#125;)<br></code></pre></td></tr></table></figure>

<p><code>Promise</code>将类似的异步处理对象和处理规则规范化，并按照统一的接口编写，采取了规定之外的写法会报错</p>
<p>promise实例有三种状态：</p>
<ol>
<li>pending：初始状态，位履行或者拒绝</li>
<li>fulfilled： 意味着操作成功完成</li>
<li>rejected： 操作失败</li>
</ol>
<p>当promise从pending状态进行决议转为fulfilled或者出现某种异常信息导致转为reject，当其中任一一种情况出现时，Promise对象的then方法绑定的处理方法（handles）就会被调用，<strong><code>then</code>方法有两个函数参数</strong>分别指定成功与失败状态的<code>resolve</code>方法和<code>reject</code>方法的回调函数</p>
<p>下面这个例子阐述了promise为完成的状态：<code>promise</code>p中定义了一个定时器，当2s过后将8传递给resolve，将promise状态变为完成状态，然后定义定时器在1s后输出promise p的结果，那么1s过后promsie的状态还未确定，所以输出结果为pending，只有当promsie结果变为fulfilled才会输出结果</p>
<figure class="hljs highlight javascript"><table><tr><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">let</span> p = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Promise</span>(<span class="hljs-function">(<span class="hljs-params">resolve, reject</span>) =&gt;</span> setTimeout(resolve, <span class="hljs-number">2000</span>, <span class="hljs-number">8</span>))<br>setTimeout(<span class="hljs-built_in">console</span>.log, <span class="hljs-number">1000</span>, p)<br></code></pre></td></tr></table></figure>

<p>例：在最开始我无法理解的就是resolve与reject是成功与失败，但是为什么使用他们，为什么将处理结果传递给了这个两个函数 ，<strong>最后我们要注意文档的两句话，Promise接受一个函数作为参数</strong>，也就是下面new Promise的参数function。<strong>同时这个函数又接收了两个函数作为参数，resolve，reject</strong>,我们调用readFIle方法读取文件，那么返回的结果要么成功返回文件的数据，或是失败返回一个err，那么resolve和reject的作用就来了，我们根据结果的不同来去设置这个promise在何种条件下变为何种状态，<strong>所以resolve的作用是将这个promise的状态变为成功，reject变为失败就可以理解了，如果返回了文件的数据，我们就使用resolve将这个promise的状态变为成功，否则就变为reject</strong></p>
<figure class="hljs highlight javascript"><table><tr><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> p = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Promise</span>(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">resolve, reject</span>) </span>&#123;<br>   fs.readFile(<span class="hljs-string">'./hello.md'</span>, <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">er,data</span>) </span>&#123;<br>      <span class="hljs-keyword">if</span>(err)&#123;<br>        reject(err)<span class="hljs-comment">//如果请求失败状态转为rejected</span><br>      &#125;<br>     resolve(data)<span class="hljs-comment">//如果请求成功状态转为fulfilled</span><br>   &#125;)<br>&#125;)<br><span class="hljs-comment">//promise状态确定时调用then方法,包含两种状态的回调函数</span><br>p.then(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">value</span>) </span>&#123;<br>  <span class="hljs-built_in">console</span>.log(value.data)<span class="hljs-comment">//第一个函数为成功时的回调</span><br>&#125;,<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">reason</span>)</span>&#123;<br>  <span class="hljs-built_in">console</span>.log(<span class="hljs-string">'读取失败'</span>)<br>&#125;)<br></code></pre></td></tr></table></figure>

<p>使用Promise封装ajax请求</p>
<figure class="hljs highlight javascript"><table><tr><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> getJSON = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">url</span>) </span>&#123;<br>  <span class="hljs-keyword">const</span> promise = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Promise</span>(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">resolve, reject</span>)</span>&#123;<br>    <span class="hljs-keyword">const</span> handler = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>&#123;<br>      <span class="hljs-keyword">if</span> (<span class="hljs-keyword">this</span>.readyState !== <span class="hljs-number">4</span>) &#123;<br>        <span class="hljs-keyword">return</span>;<br>      &#125;<br>      <span class="hljs-keyword">if</span> (<span class="hljs-keyword">this</span>.status === <span class="hljs-number">200</span>) &#123;<br>        <span class="hljs-comment">// 当满足了返回数据请求的时候，我们将promise状态变为成功，那么我们就可以在通过.then方法获取到返回的res</span><br>        resolve(<span class="hljs-keyword">this</span>.response);<br>      &#125; <span class="hljs-keyword">else</span> &#123;<br>        reject(<span class="hljs-keyword">new</span> <span class="hljs-built_in">Error</span>(<span class="hljs-keyword">this</span>.statusText));<br>      &#125;<br>    &#125;;<br>    <span class="hljs-keyword">const</span> client = <span class="hljs-keyword">new</span> XMLHttpRequest();<br>    client.open(<span class="hljs-string">"GET"</span>, url);<br>    client.onreadystatechange = handler;<br>    client.responseType = <span class="hljs-string">"json"</span>;<br>    client.setRequestHeader(<span class="hljs-string">"Accept"</span>, <span class="hljs-string">"application/json"</span>);<br>    client.send();<br><br>  &#125;);<br><br>  <span class="hljs-keyword">return</span> promise;<br>&#125;;<br><br>getJSON(<span class="hljs-string">"/posts.json"</span>).then(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">json</span>) </span>&#123;<br>  <span class="hljs-built_in">console</span>.log(<span class="hljs-string">'Contents: '</span> + json);<br>&#125;, <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">error</span>) </span>&#123;<br>  <span class="hljs-built_in">console</span>.error(<span class="hljs-string">'出错了'</span>, error);<br>&#125;);<br></code></pre></td></tr></table></figure>

<p>如果调用<code>resolve</code>函数和<code>reject</code>函数时带有参数，那么它们的参数会被传递给回调函数。<code>reject</code>函数的参数通常是<code>Error</code>对象的实例，表示抛出的错误；<code>resolve</code>函数的参数除了正常的值以外，还可能是另一个 Promise 实例，比如像下面这样。</p>
<figure class="hljs highlight javascript"><table><tr><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> p1 = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Promise</span>(<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">resolve, reject</span>) </span>&#123;<br>  <span class="hljs-comment">// ...</span><br>&#125;);<br><br><span class="hljs-keyword">const</span> p2 = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Promise</span>(<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">resolve, reject</span>) </span>&#123;<br>  <span class="hljs-comment">// ...</span><br>  resolve(p1);<br>&#125;)<br></code></pre></td></tr></table></figure>

<p>p1与p2都是Promise的实例，但是p2的resolve方法将作为p1的参数，如果调用的时候p1的状态时pending，那么p2的回调函数就会等待p1的状态的改变，如果p1的状态已经确定那么p2的回调函数就会立刻执行。</p>
<p><strong>exector()函数中的resolve置值器可以接受任何值，（除了当前promise自身）</strong></p>
<p><strong><code>Promise</code>机制中并没有延时，也没有被延时的行为，更没有对时间这个纬度的控制，在js中创建一个promise时，创建过程是立即完成的，只不过重要的是这些promise所代理的那个值或者数据还没有就绪。这个就绪过程要推迟到未知的将来才会发生，而一旦数据就绪，promise.then就会触发了</strong></p>
<h2 id="链式操作"><a href="#链式操作" class="headerlink" title="链式操作"></a>链式操作</h2><p>Promise可以使用链式操作的原因是因为Promise.prototype.then方法返回的是一个新的Promise对象，因此可以采用链式写法,</p>
<p>then方法接收两个回调函数作为参数，分别是resolve的结果与reject的结果</p>
<figure class="hljs highlight javascript"><table><tr><td class="code"><pre><code class="hljs javascript">getJSON(<span class="hljs-string">'1.json'</span>).then(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">json</span>) </span>&#123;<br>  <span class="hljs-keyword">return</span> json.name<br>&#125;).then(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">name</span>) </span>&#123;<br>  <span class="hljs-comment">//proceed</span><br>&#125;)<br><span class="hljs-comment">// bad code</span><br><span class="hljs-keyword">var</span> promise = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Promise</span>(<span class="hljs-function">(<span class="hljs-params">resolve, reject</span>) =&gt;</span> &#123;<br>  setTimeout(<span class="hljs-function"><span class="hljs-params">()</span> =&gt;</span> &#123;<br>    reject(<span class="hljs-number">300</span>)<br>  &#125;, <span class="hljs-number">2000</span>)<br>&#125;)<br><br>promise.then(<span class="hljs-function">(<span class="hljs-params">value</span>) =&gt;</span> &#123;<br>  <span class="hljs-built_in">console</span>.log(value + <span class="hljs-number">1</span>)<br>&#125;,(e)=&gt; &#123;<br>  <span class="hljs-built_in">console</span>.log(e)<br>&#125;)<br><span class="hljs-comment">// good</span><br>promise<br>  .then(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">data</span>) </span>&#123; <span class="hljs-comment">//cb</span><br>    <span class="hljs-comment">// success</span><br>  &#125;)<br>  .catch(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">err</span>) </span>&#123;<br>    <span class="hljs-comment">// error</span><br>  &#125;);<br></code></pre></td></tr></table></figure>

<p>上述代码使用then方法，依次指定了两个回调函数。第一个回调函数完成以后，会将返回结果作为参数，传入第二个回调函数。</p>
<p>但是一般来说不要在then方法中定义reject的回调函数，最好使用catch方法捕获错误</p>
<h2 id="promise-portotype-finally"><a href="#promise-portotype-finally" class="headerlink" title="promise.portotype.finally()"></a>promise.portotype.finally()</h2><p><code>finally()</code>方法用于指定不管Promise对象最后状态如何，都会执行的操作。</p>
<figure class="hljs highlight javascript"><table><tr><td class="code"><pre><code class="hljs javascript">server.listen(port)<br>  .then(<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<br>    <span class="hljs-comment">// ...</span><br>  &#125;)<br>  .finally(server.stop)<br></code></pre></td></tr></table></figure>

<p>使用promise处理请求，然后finally()关闭服务</p>
<h2 id="关于async函数"><a href="#关于async函数" class="headerlink" title="关于async函数"></a>关于async函数</h2><p>只要函数名之前加上async关键字，就表明该函数内部有异步操作。该异步操作应该返回一个Promise对象，前面用await关键字注明。当函数执行的时候，一旦遇到await就会先返回，等到触发的异步操作完成，再接着执行函数体内后面的语句。</p>
<figure class="hljs highlight javascript"><table><tr><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">async</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">getStockPrice</span>(<span class="hljs-params">symbol, currency</span>) </span>&#123;<br>    <span class="hljs-keyword">let</span> price = <span class="hljs-keyword">await</span> getStockPrice(symbol);<br>    <span class="hljs-keyword">return</span> convert(price, currency);<br>&#125;<br></code></pre></td></tr></table></figure>

<p>上面代码是一个获取股票报价的函数，函数前面的async关键字，表明该函数将返回一个Promise对象。调用该函数时，当遇到await关键字，立即返回它后面的表达式（getStockPrice函数）产生的Promise对象，不再执行函数体内后面的语句。等到getStockPrice完成，再自动回到函数体内，执行剩下的语句。</p>
<p>另一个例子</p>
<figure class="hljs highlight javascript"><table><tr><td class="code"><pre><code class="hljs javascript"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">timeout</span>(<span class="hljs-params">ms</span>) </span>&#123;<br>  <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-built_in">Promise</span>(<span class="hljs-function">(<span class="hljs-params">resolve</span>) =&gt;</span> &#123;<br>    setTimeout(resolve, ms);<br>  &#125;);<br>&#125;<br><span class="hljs-keyword">async</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">asyncValue</span>(<span class="hljs-params">value</span>) </span>&#123;<br>  <span class="hljs-keyword">await</span> timeout(<span class="hljs-number">50</span>);<br>  <span class="hljs-keyword">return</span> value;<br>&#125;<br></code></pre></td></tr></table></figure>

<p>上面代码中，asyncvalue函数前面有async关键字，表明函数体内有异步操作。执行的时候，遇到await语句就会先返回，等到timeout函数执行完毕再喊回value</p>
]]></content>
      <categories>
        <category>前端</category>
        <category>JavaScript</category>
        <category>对象</category>
      </categories>
      <tags>
        <tag>ES6</tag>
        <tag>Promise</tag>
        <tag>异步</tag>
      </tags>
  </entry>
</search>
