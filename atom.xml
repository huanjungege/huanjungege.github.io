<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Yo_huanjun</title>
  
  <subtitle>Practice makes perfect.</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://www.aiabby.top/"/>
  <updated>2020-08-27T10:35:35.011Z</updated>
  <id>http://www.aiabby.top/</id>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Promise</title>
    <link href="http://www.aiabby.top/2020/08/27/8-27Promise/"/>
    <id>http://www.aiabby.top/2020/08/27/8-27Promise/</id>
    <published>2020-08-27T06:32:23.000Z</published>
    <updated>2020-08-27T10:35:35.011Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Promise"><a href="#Promise" class="headerlink" title="Promise"></a>Promise</h1><p>Promise 是异步编程的解决方案，比传统的解决方案–回调函数和事件–更合理和强大。</p><h2 id="回调异步"><a href="#回调异步" class="headerlink" title="回调异步"></a>回调异步</h2><p>在JS中的异步处理，第一时间想到的就是利用回调函数</p><a id="more"></a><figure class="hljs highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">//利用回调函数的异步处理</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">add</span>(<span class="hljs-params">getX, getY, cb</span>) </span>&#123;<br>  <span class="hljs-keyword">var</span> x, y;<br>  getX(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">xVal</span>)</span>&#123;<br>    x = xVal;<br>    <span class="hljs-comment">//去判断是否有值</span><br>    <span class="hljs-keyword">if</span>(y != <span class="hljs-literal">undefined</span>) &#123;<br>      cb(x + y);<br>    &#125;<br>  &#125;);<br>  getY(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">yVal</span>)</span>&#123;<br>    y = yVal;<br>    <span class="hljs-comment">//去判断是否有值</span><br>    <span class="hljs-keyword">if</span>(x != <span class="hljs-literal">undefined</span>) &#123;<br>      cb(x + y);<br>    &#125;<br>  &#125;);<br>&#125;<br>add(fetchX, fetchY, <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">sum</span>)</span>&#123;<br>  <span class="hljs-built_in">console</span>.log(sum)<br>&#125;)<br></code></pre></td></tr></table></figure><p>我们将x和y作为未来值，进行了一个运算add()</p><p>当回调函数嵌套过多时</p><figure class="hljs highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs javascript">doA(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;<br>  doB();<br>  doC(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;<br>    doD();<br>  &#125;)<br>  doE()<br>&#125;)<br>doF()<br></code></pre></td></tr></table></figure><p>尽管你能够正确的确定实际的运行顺序，但是，这一眼看上去确实比较复杂</p><p>实际的运行顺序</p><ul><li>doA()</li><li>doF()</li><li>doB()</li><li>doC()</li><li>doE()</li><li>doD()</li></ul><p>这还只是简易模式，真正的异步JavaScript程序代码要混乱的多，使这种追踪难度成倍增加</p><p>回调的函数优美度不足，同时缺少信任度</p><p>尽管我们的大脑能够以顺序的方式（这个，然后这个，然后这个）计划一系列任务，但大脑运作的事件化的本质使得控制流的恢复/重试/复制几乎不费什么力气。如果你出外办事的时候发现把购物清单落在了家里，那么这一天并不会因为你没有预知到这一点就成为世界末日了。你的大脑很容易就能针对这个小意外做出计划：回家拿清单，然后立刻返回商店就是了。</p><p>但是，手工硬编码（即使包含了硬编码的出错处理）回调的脆弱本性可就远没有这么优雅了。一旦你指定（也就是预先计划）了所有的可能事件和路径，代码就会变得非常复杂，以至于无法维护和更新。这才是回调地狱的真正问题所在！嵌套和缩进基本上只是转移注意力的枝节而已。</p><p>用Promise实现x+y</p><figure class="hljs highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">add</span>(<span class="hljs-params">xPromise, yPromise</span>) </span>&#123;<br>  <span class="hljs-comment">//.all方法接受一个promise数组并返回一个新的promise，这个新的promise等待数组中的所有promise完成</span><br>  <span class="hljs-keyword">return</span> <span class="hljs-built_in">Promise</span>.all([xPromise, yPromise])<br>  <span class="hljs-comment">//promise决议之后，将取得x和y的值并加在一起</span><br>  .then(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">value</span>)</span>&#123;<br>    <span class="hljs-comment">//value是来自于之前决议的promise的数组</span><br>    <span class="hljs-keyword">return</span> values[<span class="hljs-number">0</span>] + value[<span class="hljs-number">1</span>]<br>  &#125;)<br>&#125;<br>add(fetchX(), fetchY())<br>.then(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">sum</span>)</span>&#123;<br>  <span class="hljs-built_in">console</span>.log(sum)<br>&#125;)<br></code></pre></td></tr></table></figure><p><code>Promise</code>将类似的异步处理对象和处理规则规范化，并按照统一的接口编写，采取了规定之外的写法会报错</p><h2 id="基本用法"><a href="#基本用法" class="headerlink" title="基本用法"></a>基本用法</h2><figure class="hljs highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">new</span> <span class="hljs-built_in">Promise</span>(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">resolve, reject</span>) </span>&#123;<br>  <span class="hljs-comment">//待处理的异步逻辑</span><br>  <span class="hljs-comment">//处理结束后，调用resolve或者reject方法</span><br>&#125;)<br></code></pre></td></tr></table></figure><p>promise实例有三种状态：</p><ol><li>pending：初始状态，位履行或者拒绝</li><li>fulfilled： 意味着操作成功完成</li><li>rejected： 操作失败</li></ol><p>当promise从pending状态进行决议转为fulfilled或者出现某种异常信息导致转为reject，当其中任一一种情况出现时，Promise对象的then方法绑定的处理方法（handles）就会被调用，<code>then</code>方法分别指定成功与失败状态的<code>resolve</code>方法和<code>reject</code>方法的回调函数</p><p>例：</p><figure class="hljs highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> p = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Promise</span>(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">resolve, reject</span>) </span>&#123;<br>   fs.readFile(<span class="hljs-string">'./hello.md'</span>, <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">er,data</span>) </span>&#123;<br>      <span class="hljs-keyword">if</span>(err)&#123;<br>        reject(err)<span class="hljs-comment">//如果请求失败状态转为rejected</span><br>      &#125;<br>     resolve(data)<span class="hljs-comment">//如果请求成功状态转为fulfilled</span><br>   &#125;)<br>&#125;)<br><span class="hljs-comment">//promise状态确定时调用then方法,包含两种状态的回调函数</span><br>p.then(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">value</span>) </span>&#123;<br>  <span class="hljs-built_in">console</span>.log(value.data)<span class="hljs-comment">//第一个函数为成功时的回调</span><br>&#125;,<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">reason</span>)</span>&#123;<br>  <span class="hljs-built_in">console</span>.log(<span class="hljs-string">'读取失败'</span>)<br>&#125;)<br></code></pre></td></tr></table></figure><p>使用Promise封装ajax</p><figure class="hljs highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> getJSON = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">url</span>) </span>&#123;<br>  <span class="hljs-keyword">const</span> promise = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Promise</span>(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">resolve, reject</span>)</span>&#123;<br>    <span class="hljs-keyword">const</span> handler = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>&#123;<br>      <span class="hljs-keyword">if</span> (<span class="hljs-keyword">this</span>.readyState !== <span class="hljs-number">4</span>) &#123;<br>        <span class="hljs-keyword">return</span>;<br>      &#125;<br>      <span class="hljs-keyword">if</span> (<span class="hljs-keyword">this</span>.status === <span class="hljs-number">200</span>) &#123;<br>        resolve(<span class="hljs-keyword">this</span>.response);<br>      &#125; <span class="hljs-keyword">else</span> &#123;<br>        reject(<span class="hljs-keyword">new</span> <span class="hljs-built_in">Error</span>(<span class="hljs-keyword">this</span>.statusText));<br>      &#125;<br>    &#125;;<br>    <span class="hljs-keyword">const</span> client = <span class="hljs-keyword">new</span> XMLHttpRequest();<br>    client.open(<span class="hljs-string">"GET"</span>, url);<br>    client.onreadystatechange = handler;<br>    client.responseType = <span class="hljs-string">"json"</span>;<br>    client.setRequestHeader(<span class="hljs-string">"Accept"</span>, <span class="hljs-string">"application/json"</span>);<br>    client.send();<br><br>  &#125;);<br><br>  <span class="hljs-keyword">return</span> promise;<br>&#125;;<br><br>getJSON(<span class="hljs-string">"/posts.json"</span>).then(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">json</span>) </span>&#123;<br>  <span class="hljs-built_in">console</span>.log(<span class="hljs-string">'Contents: '</span> + json);<br>&#125;, <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">error</span>) </span>&#123;<br>  <span class="hljs-built_in">console</span>.error(<span class="hljs-string">'出错了'</span>, error);<br>&#125;);<br></code></pre></td></tr></table></figure><p>如果调用<code>resolve</code>函数和<code>reject</code>函数时带有参数，那么它们的参数会被传递给回调函数。<code>reject</code>函数的参数通常是<code>Error</code>对象的实例，表示抛出的错误；<code>resolve</code>函数的参数除了正常的值以外，还可能是另一个 Promise 实例，比如像下面这样。</p><figure class="hljs highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> p1 = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Promise</span>(<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">resolve, reject</span>) </span>&#123;<br>  <span class="hljs-comment">// ...</span><br>&#125;);<br><br><span class="hljs-keyword">const</span> p2 = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Promise</span>(<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">resolve, reject</span>) </span>&#123;<br>  <span class="hljs-comment">// ...</span><br>  resolve(p1);<br>&#125;)<br></code></pre></td></tr></table></figure><p>p1与p2都是Promise的实例，但是p2的resolve方法将作为p1的参数，如果调用的时候p1的状态时pending，那么p2的回调函数就会等待p1的状态的改变，如果p1的状态已经确定那么p2的回调函数就会立刻执行。</p><h2 id="链式操作"><a href="#链式操作" class="headerlink" title="链式操作"></a>链式操作</h2><p>Promise可以使用链式操作的原因是因为Promise.prototype.then方法返回的是一个新的Promise对象，因此可以采用链式写法</p><figure class="hljs highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs javascript">getJSON(<span class="hljs-string">'1.json'</span>).then(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">json</span>) </span>&#123;<br>  <span class="hljs-keyword">return</span> json.name<br>&#125;).then(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">name</span>) </span>&#123;<br>  <span class="hljs-comment">//proceed</span><br>&#125;)<br></code></pre></td></tr></table></figure><p>上述代码使用then方法，依次指定了两个回调函数。第一个回调函数完成以后，会将返回结果作为参数，传入第二个回调函数。</p><h2 id="关于async函数"><a href="#关于async函数" class="headerlink" title="关于async函数"></a>关于async函数</h2><p>只要函数名之前加上async关键字，就表明该函数内部有异步操作。该异步操作应该返回一个Promise对象，前面用await关键字注明。当函数执行的时候，一旦遇到await就会先返回，等到触发的异步操作完成，再接着执行函数体内后面的语句。</p><figure class="hljs highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">async</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">getStockPrice</span>(<span class="hljs-params">symbol, currency</span>) </span>&#123;<br>    <span class="hljs-keyword">let</span> price = <span class="hljs-keyword">await</span> getStockPrice(symbol);<br>    <span class="hljs-keyword">return</span> convert(price, currency);<br>&#125;<br></code></pre></td></tr></table></figure><p>上面代码是一个获取股票报价的函数，函数前面的async关键字，表明该函数将返回一个Promise对象。调用该函数时，当遇到await关键字，立即返回它后面的表达式（getStockPrice函数）产生的Promise对象，不再执行函数体内后面的语句。等到getStockPrice完成，再自动回到函数体内，执行剩下的语句。</p><p>另一个例子</p><figure class="hljs highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">timeout</span>(<span class="hljs-params">ms</span>) </span>&#123;<br>  <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-built_in">Promise</span>(<span class="hljs-function">(<span class="hljs-params">resolve</span>) =&gt;</span> &#123;<br>    setTimeout(resolve, ms);<br>  &#125;);<br>&#125;<br><span class="hljs-keyword">async</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">asyncValue</span>(<span class="hljs-params">value</span>) </span>&#123;<br>  <span class="hljs-keyword">await</span> timeout(<span class="hljs-number">50</span>);<br>  <span class="hljs-keyword">return</span> value;<br>&#125;<br></code></pre></td></tr></table></figure><p>上面代码中，asyncvalue函数前面有async关键字，表明函数体内有异步操作。执行的时候，遇到await语句就会先返回，等到timeout函数执行完毕再喊回value</p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Promise&quot;&gt;&lt;a href=&quot;#Promise&quot; class=&quot;headerlink&quot; title=&quot;Promise&quot;&gt;&lt;/a&gt;Promise&lt;/h1&gt;&lt;p&gt;Promise 是异步编程的解决方案，比传统的解决方案–回调函数和事件–更合理和强大。&lt;/p&gt;
&lt;h2 id=&quot;回调异步&quot;&gt;&lt;a href=&quot;#回调异步&quot; class=&quot;headerlink&quot; title=&quot;回调异步&quot;&gt;&lt;/a&gt;回调异步&lt;/h2&gt;&lt;p&gt;在JS中的异步处理，第一时间想到的就是利用回调函数&lt;/p&gt;
    
    </summary>
    
    
      <category term="前端" scheme="http://www.aiabby.top/categories/%E5%89%8D%E7%AB%AF/"/>
    
      <category term="JavaScript" scheme="http://www.aiabby.top/categories/%E5%89%8D%E7%AB%AF/JavaScript/"/>
    
      <category term="ES6" scheme="http://www.aiabby.top/categories/%E5%89%8D%E7%AB%AF/JavaScript/ES6/"/>
    
    
      <category term="ES6" scheme="http://www.aiabby.top/tags/ES6/"/>
    
      <category term="Promise" scheme="http://www.aiabby.top/tags/Promise/"/>
    
      <category term="异步" scheme="http://www.aiabby.top/tags/%E5%BC%82%E6%AD%A5/"/>
    
  </entry>
  
  <entry>
    <title>迭代器Iterator</title>
    <link href="http://www.aiabby.top/2020/08/26/8-26%E8%BF%AD%E4%BB%A3%E5%99%A8Iterator/"/>
    <id>http://www.aiabby.top/2020/08/26/8-26%E8%BF%AD%E4%BB%A3%E5%99%A8Iterator/</id>
    <published>2020-08-25T22:34:10.000Z</published>
    <updated>2020-08-27T06:33:17.561Z</updated>
    
    <content type="html"><![CDATA[<h1 id="迭代器"><a href="#迭代器" class="headerlink" title="迭代器"></a>迭代器</h1><p>迭代器（Iterator）是一种接口，为各种不同的数据结构提供统一的访问机制，任何数据结构只要部署Iterator接口，就可以完成遍历操作。</p><p>1、ES6创造了一种新的遍历命令for…of循环，Iterator接口主要供for…of循环使用</p><p>2、原生具备Iterator接口的数据可使用for of遍历</p><a id="more"></a><p>生成一个数组使用for…of遍历</p><figure class="hljs highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs javascript">&lt;script&gt;<br>       <span class="hljs-keyword">const</span> Arr = [<span class="hljs-string">'唐僧'</span>, <span class="hljs-string">'猪八戒'</span>, <span class="hljs-string">'孙悟空'</span>, <span class="hljs-string">'沙僧'</span>]<br>       <span class="hljs-keyword">for</span>(<span class="hljs-keyword">let</span> i <span class="hljs-keyword">of</span> Arr) &#123;<br>           <span class="hljs-built_in">console</span>.log(i)<br>       &#125;<br>   &lt;<span class="hljs-regexp">/script&gt;</span><br></code></pre></td></tr></table></figure>{% asset_img 1.png %}<p>生成一个数组使用for…in遍历</p><figure class="hljs highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> Arr = [<span class="hljs-string">'唐僧'</span>, <span class="hljs-string">'猪八戒'</span>, <span class="hljs-string">'孙悟空'</span>, <span class="hljs-string">'沙僧'</span>]<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">let</span> i <span class="hljs-keyword">in</span> Arr) &#123;<br>            <span class="hljs-built_in">console</span>.log(i)<br>        &#125;<br></code></pre></td></tr></table></figure><img src="/2020/08/26/8-26迭代器Iterator/2.png"><p><strong>for in循环保存的是键名，而for of保存的是键值</strong></p><h2 id="谁可以使用"><a href="#谁可以使用" class="headerlink" title="谁可以使用"></a>谁可以使用</h2><p>可以看到在该数组的方法中有一个<code>Symbol(Symbol.iterator)</code>方法</p><img src="/2020/08/26/8-26迭代器Iterator/3.png"><figure class="hljs highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">let</span> iterator = Arr[<span class="hljs-built_in">Symbol</span>.iterator]()<br>        <span class="hljs-built_in">console</span>.log(iterator)<br></code></pre></td></tr></table></figure>{% asset_img 4.png %}<h2 id="工作原理"><a href="#工作原理" class="headerlink" title="工作原理"></a>工作原理</h2><ol><li>创建一个指针对象，指向当前数据结构的起始位置</li><li>第一次调用对象<code>next</code>方法，指针自动指向数据结构的第一个成员</li><li>接下来不断调用next方法，指针一直往后移动，直到指向最后一个成员</li><li>每调用next方法返回一个包含value和done属性的对象</li></ol><figure class="hljs highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> Arr = [<span class="hljs-string">'唐僧'</span>, <span class="hljs-string">'猪八戒'</span>, <span class="hljs-string">'孙悟空'</span>, <span class="hljs-string">'沙僧'</span>]<br>        <span class="hljs-keyword">let</span> iterator = Arr[<span class="hljs-built_in">Symbol</span>.iterator]()<br>        <span class="hljs-built_in">console</span>.log(iterator.next())<br>        <span class="hljs-built_in">console</span>.log(iterator.next())<br>        <span class="hljs-built_in">console</span>.log(iterator.next())<br>        <span class="hljs-built_in">console</span>.log(iterator.next())<br>        <span class="hljs-built_in">console</span>.log(iterator.next())<br></code></pre></td></tr></table></figure><img src="/2020/08/26/8-26迭代器Iterator/5.png"><p>当<code>done</code>为true时，表示循环已经完成</p><h2 id="自定义遍历数据"><a href="#自定义遍历数据" class="headerlink" title="自定义遍历数据"></a>自定义遍历数据</h2><figure class="hljs highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> banji = &#123;<br>        <span class="hljs-attr">name</span>: <span class="hljs-string">"终极一班"</span>,<br>        <span class="hljs-attr">stus</span>: [<br>            <span class="hljs-string">'xiaoming'</span>,<br>            <span class="hljs-string">'xiaobai'</span>,<br>            <span class="hljs-string">'xiaohei'</span>,<br>            <span class="hljs-string">'xiaoli'</span>,<br>            <span class="hljs-string">'xiaoning'</span><br>        ],<br>        [<span class="hljs-built_in">Symbol</span>.iterator]()&#123;<br>            <span class="hljs-keyword">let</span> index = <span class="hljs-number">0</span><br>            <span class="hljs-keyword">return</span> &#123;<br>                <span class="hljs-attr">next</span>: <span class="hljs-function"><span class="hljs-params">()</span>=&gt;</span>&#123;<br>                    <span class="hljs-keyword">if</span>(index&lt; <span class="hljs-keyword">this</span>.stus.length)&#123;<br>                        <span class="hljs-keyword">const</span> result = &#123;<span class="hljs-attr">value</span>: <span class="hljs-keyword">this</span>.stus[index], <span class="hljs-attr">done</span>: <span class="hljs-literal">false</span>&#125;<br>                        index++<br>                        <span class="hljs-keyword">return</span> result<br>                    &#125;<span class="hljs-keyword">else</span> &#123;<br>                        <span class="hljs-keyword">return</span> &#123;<span class="hljs-attr">value</span>: <span class="hljs-literal">undefined</span>, <span class="hljs-attr">done</span>: <span class="hljs-literal">true</span>&#125;<br>                    &#125;<br>                    <br>                &#125;<br>            &#125;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">let</span> v <span class="hljs-keyword">of</span> banji) &#123;<br>        <span class="hljs-built_in">console</span>.log(v)<br>    &#125;<br><span class="hljs-comment">//其中的if判断可以优化</span><br><span class="hljs-comment">//优化</span><br>       index &lt; <span class="hljs-keyword">this</span>.stus.length ? <br>       &#123;<span class="hljs-attr">value</span>: <span class="hljs-keyword">this</span>.stus[index++], <span class="hljs-attr">done</span>:<span class="hljs-literal">false</span>&#125; : <br>       &#123;<span class="hljs-attr">value</span>: <span class="hljs-literal">undefined</span>, <span class="hljs-attr">done</span>: <span class="hljs-literal">true</span>&#125;<br><span class="hljs-comment">//再优化</span><br><span class="hljs-keyword">let</span> _this = <span class="hljs-keyword">this</span><br><span class="hljs-keyword">return</span> index &lt; _this.stus.length ?<br>&#123;<span class="hljs-attr">value</span>: _this.stus[index++]&#125; :<br>&#123;<span class="hljs-attr">done</span>: <span class="hljs-literal">true</span>&#125;;<br></code></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;迭代器&quot;&gt;&lt;a href=&quot;#迭代器&quot; class=&quot;headerlink&quot; title=&quot;迭代器&quot;&gt;&lt;/a&gt;迭代器&lt;/h1&gt;&lt;p&gt;迭代器（Iterator）是一种接口，为各种不同的数据结构提供统一的访问机制，任何数据结构只要部署Iterator接口，就可以完成遍历操作。&lt;/p&gt;
&lt;p&gt;1、ES6创造了一种新的遍历命令for…of循环，Iterator接口主要供for…of循环使用&lt;/p&gt;
&lt;p&gt;2、原生具备Iterator接口的数据可使用for of遍历&lt;/p&gt;
    
    </summary>
    
    
      <category term="前端" scheme="http://www.aiabby.top/categories/%E5%89%8D%E7%AB%AF/"/>
    
      <category term="JavaScript" scheme="http://www.aiabby.top/categories/%E5%89%8D%E7%AB%AF/JavaScript/"/>
    
      <category term="ES6" scheme="http://www.aiabby.top/categories/%E5%89%8D%E7%AB%AF/JavaScript/ES6/"/>
    
    
      <category term="javascript" scheme="http://www.aiabby.top/tags/javascript/"/>
    
      <category term="ES6" scheme="http://www.aiabby.top/tags/ES6/"/>
    
      <category term="迭代器" scheme="http://www.aiabby.top/tags/%E8%BF%AD%E4%BB%A3%E5%99%A8/"/>
    
  </entry>
  
  <entry>
    <title>深拷贝与浅拷贝</title>
    <link href="http://www.aiabby.top/2020/08/20/%E6%B7%B1%E6%8B%B7%E8%B4%9D%E4%B8%8E%E6%B5%85%E6%8B%B7%E8%B4%9D/"/>
    <id>http://www.aiabby.top/2020/08/20/%E6%B7%B1%E6%8B%B7%E8%B4%9D%E4%B8%8E%E6%B5%85%E6%8B%B7%E8%B4%9D/</id>
    <published>2020-08-20T13:28:09.000Z</published>
    <updated>2020-08-20T14:01:29.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="深拷贝与浅拷贝"><a href="#深拷贝与浅拷贝" class="headerlink" title="深拷贝与浅拷贝"></a>深拷贝与浅拷贝</h1><h2 id="基本类型"><a href="#基本类型" class="headerlink" title="基本类型"></a>基本类型</h2><p>提到深拷贝与浅拷贝就要探讨js中的数据类型，基本类型例如，<code>Number</code>,<code>String</code>等，他们的值是不可变的，动态的修改了基本数据类型的值它的原始值也是不会改变的</p><figure class="hljs highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> s = <span class="hljs-string">"abc"</span><br><span class="hljs-built_in">console</span>.log(st[<span class="hljs-number">1</span>]=<span class="hljs-string">"d"</span>)<br><span class="hljs-built_in">console</span>.log(s)<span class="hljs-comment">//abc</span><br></code></pre></td></tr></table></figure><h2 id="引用类型"><a href="#引用类型" class="headerlink" title="引用类型"></a>引用类型</h2><p>引用类型是存放在堆内存中的，变量实际上存放着一个放在栈内存的指针，引用类型可以直接改变它的值</p><h2 id="浅拷贝"><a href="#浅拷贝" class="headerlink" title="浅拷贝"></a>浅拷贝</h2><p>浅拷贝是将原对象或数组的引用直接赋给新对象，新数组它们只是原对象的一个引用</p><p>首先我们通过赋值复制一个数组</p><figure class="hljs highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> obj1 = &#123;<br>       <span class="hljs-string">'name'</span> : <span class="hljs-string">'zhangsan'</span>,<br>       <span class="hljs-string">'age'</span> :  <span class="hljs-string">'18'</span>,<br>       <span class="hljs-string">'language'</span> : [<span class="hljs-number">1</span>,[<span class="hljs-number">2</span>,<span class="hljs-number">3</span>],[<span class="hljs-number">4</span>,<span class="hljs-number">5</span>]],<br>   &#125;;<br><br>   <span class="hljs-keyword">var</span> obj2 = obj1;<br><br><br>   <span class="hljs-keyword">var</span> obj3 = shallowCopy(obj1);<br>   <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">shallowCopy</span>(<span class="hljs-params">src</span>) </span>&#123;<br>       <span class="hljs-keyword">var</span> dst = &#123;&#125;;<br>       <span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> prop <span class="hljs-keyword">in</span> src) &#123;<br>           <span class="hljs-keyword">if</span> (src.hasOwnProperty(prop)) &#123;<br>               dst[prop] = src[prop];<br>           &#125;<br>       &#125;<br>       <span class="hljs-keyword">return</span> dst;<br>   &#125;<br><br>   obj2.name = <span class="hljs-string">"lisi"</span>;<br>   obj3.age = <span class="hljs-string">"20"</span>;<br><br>   obj2.language[<span class="hljs-number">1</span>] = [<span class="hljs-string">"二"</span>,<span class="hljs-string">"三"</span>];<br>   obj3.language[<span class="hljs-number">2</span>] = [<span class="hljs-string">"四"</span>,<span class="hljs-string">"五"</span>];<br><br>   <span class="hljs-built_in">console</span>.log(obj1);  <br>   <span class="hljs-comment">//obj1 = &#123;</span><br>   <span class="hljs-comment">//    'name' : 'lisi',</span><br>   <span class="hljs-comment">//    'age' :  '18',</span><br>   <span class="hljs-comment">//    'language' : [1,["二","三"],["四","五"]],</span><br>   <span class="hljs-comment">//&#125;;</span><br><br>   <span class="hljs-built_in">console</span>.log(obj2);<br>   <span class="hljs-comment">//obj2 = &#123;</span><br>   <span class="hljs-comment">//    'name' : 'lisi',</span><br>   <span class="hljs-comment">//    'age' :  '18',</span><br>   <span class="hljs-comment">//    'language' : [1,["二","三"],["四","五"]],</span><br>   <span class="hljs-comment">//&#125;;</span><br><br>   <span class="hljs-built_in">console</span>.log(obj3);<br>   <span class="hljs-comment">//obj3 = &#123;</span><br>   <span class="hljs-comment">//    'name' : 'zhangsan',</span><br>   <span class="hljs-comment">//    'age' :  '20',</span><br>   <span class="hljs-comment">//    'language' : [1,["二","三"],["四","五"]],</span><br>   <span class="hljs-comment">//&#125;;</span><br></code></pre></td></tr></table></figure><p>如果属性是基本数据类型，拷贝的就是基本类型的值，如果属性是引用类型拷贝的就是内存地址，所以如果其中一个对像改变了，这个引用类型的属性或者说是地就会影响到另一个对像。</p><h2 id="深拷贝"><a href="#深拷贝" class="headerlink" title="深拷贝"></a>深拷贝</h2><p>创建一个新的对像和数组，将原对象的各个属性的值（数组的所有元素）拷贝过来，<strong>是值而不是引用</strong></p><figure class="hljs highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> array = [<br>    &#123; <span class="hljs-attr">number</span>: <span class="hljs-number">1</span> &#125;,<br>    &#123; <span class="hljs-attr">number</span>: <span class="hljs-number">2</span> &#125;,<br>    &#123; <span class="hljs-attr">number</span>: <span class="hljs-number">3</span> &#125;<br>];<br><span class="hljs-keyword">var</span> copyArray = <span class="hljs-built_in">JSON</span>.parse(<span class="hljs-built_in">JSON</span>.stringify(array))<br>copyArray[<span class="hljs-number">0</span>].number = <span class="hljs-number">100</span>;<br><span class="hljs-built_in">console</span>.log(array); <span class="hljs-comment">//  [&#123;number: 1&#125;, &#123; number: 2 &#125;, &#123; number: 3 &#125;]</span><br><span class="hljs-built_in">console</span>.log(copyArray); <span class="hljs-comment">// [&#123;number: 100&#125;, &#123; number: 2 &#125;, &#123; number: 3 &#125;]</span><br></code></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;深拷贝与浅拷贝&quot;&gt;&lt;a href=&quot;#深拷贝与浅拷贝&quot; class=&quot;headerlink&quot; title=&quot;深拷贝与浅拷贝&quot;&gt;&lt;/a&gt;深拷贝与浅拷贝&lt;/h1&gt;&lt;h2 id=&quot;基本类型&quot;&gt;&lt;a href=&quot;#基本类型&quot; class=&quot;headerlink&quot; titl
      
    
    </summary>
    
    
      <category term="前端" scheme="http://www.aiabby.top/categories/%E5%89%8D%E7%AB%AF/"/>
    
      <category term="JavaScript" scheme="http://www.aiabby.top/categories/%E5%89%8D%E7%AB%AF/JavaScript/"/>
    
    
      <category term="javascript" scheme="http://www.aiabby.top/tags/javascript/"/>
    
  </entry>
  
  <entry>
    <title>ES6rest参数和拓展运算符</title>
    <link href="http://www.aiabby.top/2020/08/19/ES6rest%E5%8F%82%E6%95%B0%E5%92%8C%E6%8B%93%E5%B1%95%E8%BF%90%E7%AE%97%E7%AC%A6/"/>
    <id>http://www.aiabby.top/2020/08/19/ES6rest%E5%8F%82%E6%95%B0%E5%92%8C%E6%8B%93%E5%B1%95%E8%BF%90%E7%AE%97%E7%AC%A6/</id>
    <published>2020-08-19T13:35:58.000Z</published>
    <updated>2020-08-20T03:25:06.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="rest参数"><a href="#rest参数" class="headerlink" title="rest参数"></a>rest参数</h1><p>在ES5中传入参数</p><figure class="hljs highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">//ES5中通过arguments获取参数</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">data</span>(<span class="hljs-params"></span>) </span>&#123;<br>  consloe.log(<span class="hljs-built_in">arguments</span>)<br>&#125;<br>data(<span class="hljs-string">'v'</span>,<span class="hljs-string">'a'</span>,<span class="hljs-string">'r'</span>)<span class="hljs-comment">//Arguments(3) ["v","a","r"]</span><br></code></pre></td></tr></table></figure><a id="more"></a><p>有了 rest参数后获取参数</p><figure class="hljs highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">data</span>(<span class="hljs-params">..args</span>) </span>&#123;<br>  consloe.log(args) <span class="hljs-comment">//(3)["v","a","r"]</span><br>&#125;<br>data(<span class="hljs-string">'v'</span>, <span class="hljs-string">'a'</span>, <span class="hljs-string">'r'</span>)<br></code></pre></td></tr></table></figure><p>rest参数必须放在最后,</p><figure class="hljs highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">fn</span>(<span class="hljs-params">a, ...args, b</span>) </span>&#123;<br>            <span class="hljs-built_in">console</span>.log(a)<br>            <span class="hljs-built_in">console</span>.log(b)<br>            <span class="hljs-built_in">console</span>.log(args)<br>        &#125;<br> fn(<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>)<span class="hljs-comment">//Uncaught SyntaxError: Rest parameter must be last formal parameter</span><br></code></pre></td></tr></table></figure><p>这样是不允许的</p><h1 id="拓展运算符"><a href="#拓展运算符" class="headerlink" title="拓展运算符"></a>拓展运算符</h1><p>[…] 拓展运算符能将【数组】转换为逗号分隔的【参数序列】</p><figure class="hljs highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">//声明一个数组</span><br><span class="hljs-keyword">const</span> tfboys = [<span class="hljs-string">'易洋千玺'</span>, <span class="hljs-string">'王源'</span>, <span class="hljs-string">'王俊凯'</span>]<br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">fn</span>(<span class="hljs-params"></span>) </span>&#123;<br>  consloe.log(<span class="hljs-built_in">arguments</span>)<br>&#125;<br>fn(...tfboys) = fn(<span class="hljs-string">'易洋千玺'</span>, <span class="hljs-string">'王源'</span>, <span class="hljs-string">'王俊凯'</span>)<br></code></pre></td></tr></table></figure><p>虽然他们都是用三个点表示，rest参数是放在了函数声明的形参中，而拓展运算符是在函数调用的实参中使用</p><p>拓展运算符的应用</p><figure class="hljs highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">//数组的克隆</span><br><br>​        <span class="hljs-keyword">const</span> sanzhihua = [<span class="hljs-string">'E'</span>, <span class="hljs-string">'G'</span>, <span class="hljs-string">'M'</span>]<br><br>​        <span class="hljs-keyword">const</span> clone = [...sanzhihua]<br><br>​        <span class="hljs-built_in">console</span>.log(clone)<span class="hljs-comment">//['E', 'G', 'M']</span><br><br>​        <span class="hljs-comment">//将伪数组转为真正的数组，假设页面中有三个div</span><br><br>​        <span class="hljs-keyword">const</span> divs = <span class="hljs-built_in">document</span>.querySelectorAll(<span class="hljs-string">'div'</span>)<br><br>​        <span class="hljs-built_in">console</span>.log(divs)<span class="hljs-comment">//Object</span><br><br>​        <span class="hljs-keyword">const</span> divArr = [...divs]<span class="hljs-comment">//[div,div,div]</span><br></code></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;rest参数&quot;&gt;&lt;a href=&quot;#rest参数&quot; class=&quot;headerlink&quot; title=&quot;rest参数&quot;&gt;&lt;/a&gt;rest参数&lt;/h1&gt;&lt;p&gt;在ES5中传入参数&lt;/p&gt;
&lt;figure class=&quot;hljs highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;code class=&quot;hljs javascript&quot;&gt;&lt;span class=&quot;hljs-comment&quot;&gt;//ES5中通过arguments获取参数&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;data&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;br&gt;  consloe.log(&lt;span class=&quot;hljs-built_in&quot;&gt;arguments&lt;/span&gt;)&lt;br&gt;&amp;#125;&lt;br&gt;data(&lt;span class=&quot;hljs-string&quot;&gt;&#39;v&#39;&lt;/span&gt;,&lt;span class=&quot;hljs-string&quot;&gt;&#39;a&#39;&lt;/span&gt;,&lt;span class=&quot;hljs-string&quot;&gt;&#39;r&#39;&lt;/span&gt;)&lt;span class=&quot;hljs-comment&quot;&gt;//Arguments(3) [&quot;v&quot;,&quot;a&quot;,&quot;r&quot;]&lt;/span&gt;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
      <category term="前端" scheme="http://www.aiabby.top/categories/%E5%89%8D%E7%AB%AF/"/>
    
      <category term="JavaScript" scheme="http://www.aiabby.top/categories/%E5%89%8D%E7%AB%AF/JavaScript/"/>
    
      <category term="ES6" scheme="http://www.aiabby.top/categories/%E5%89%8D%E7%AB%AF/JavaScript/ES6/"/>
    
    
      <category term="javascript ES6 拓展运算符" scheme="http://www.aiabby.top/tags/javascript-ES6-%E6%8B%93%E5%B1%95%E8%BF%90%E7%AE%97%E7%AC%A6/"/>
    
  </entry>
  
  <entry>
    <title>Date函数</title>
    <link href="http://www.aiabby.top/2020/08/17/8-17Date%E5%87%BD%E6%95%B0/"/>
    <id>http://www.aiabby.top/2020/08/17/8-17Date%E5%87%BD%E6%95%B0/</id>
    <published>2020-08-17T09:40:18.000Z</published>
    <updated>2020-08-25T06:54:21.781Z</updated>
    
    <content type="html"><![CDATA[<h1 id="JS日期"><a href="#JS日期" class="headerlink" title="JS日期"></a>JS日期</h1><h2 id="关于创建时间对象"><a href="#关于创建时间对象" class="headerlink" title="关于创建时间对象"></a>关于创建时间对象</h2><h3 id="创建日期对象的四种方法"><a href="#创建日期对象的四种方法" class="headerlink" title="创建日期对象的四种方法"></a>创建日期对象的四种方法</h3><p><code>new Date()</code></p><p><code>new Date(year, month,day, hours, minutes, seconds, milliseconds)</code></p><p><code>new Date(milliseconds)</code></p><p><code>new Date(date string)</code></p><p>1、不传参数创建日期</p><figure class="hljs highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> d = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Date</span>();<span class="hljs-comment">//Mon Aug 17 2020 17:47:35 GMT+0800 (中国标准时间)</span><br></code></pre></td></tr></table></figure><p>2、加入年月日等参数</p><a id="more"></a><figure class="hljs highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> d = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Date</span>(<span class="hljs-number">2020</span>, <span class="hljs-number">11</span>, <span class="hljs-number">11</span>);<span class="hljs-comment">//Fri Dec 11 2020 00:00:00 GMT+0800 (中国标准时间)</span><br><span class="hljs-comment">//为日期指定内容</span><br></code></pre></td></tr></table></figure><p>注：<strong>对于月份来说一月的索引为0，12月为11</strong></p><p>所以我们在获取月份时也要注意+1才是正确的我们所说的月份</p><p>3、如果只传入一个参数，则按照毫秒为参数添加进函数,将返回一个按照零时加上毫秒数的新的日期对象</p><figure class="hljs highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> d = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Date</span>(<span class="hljs-number">0</span>);<br></code></pre></td></tr></table></figure><p>JavaScript 将日期存储为自 1970 年 1 月 1 日 00:00:00 UTC（协调世界时）以来的毫秒数。</p><p>零时间是 1970 年 1 月 1 日 00:00:00 UTC。</p><p>4、传入时间字符串会返回一个新的日期对象</p><figure class="hljs highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> d = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Date</span>(<span class="hljs-string">"October 13, 2014 11:13:00"</span>);<br></code></pre></td></tr></table></figure><h3 id="日期的获取方法"><a href="#日期的获取方法" class="headerlink" title="日期的获取方法"></a>日期的获取方法</h3><img src="/2020/08/17/8-17Date函数/2.png"><h3 id="关于-new-Date"><a href="#关于-new-Date" class="headerlink" title="关于+new Date()"></a>关于+new Date()</h3><p>这个操作是将日期函数转换类型</p><img src="/2020/08/17/8-17Date函数/1.png"><p>以毫秒显示</p><p>对时间进行格式化,后端提供以秒为单位的时间数据</p><p>将其转换为00:00:00（小时：分钟：秒），并且位数为一位数时，进行补0，避免出现3:20这样的时间应该显示为03:20。</p><figure class="hljs highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs javascript">formateTime(seconds) &#123;<br>      <span class="hljs-keyword">if</span> (seconds &lt; <span class="hljs-number">60</span>) &#123;<br>        <span class="hljs-keyword">return</span> seconds.toString().padStart(<span class="hljs-number">2</span>, <span class="hljs-string">'0'</span>)<br>      &#125;<br>      <span class="hljs-keyword">if</span> (seconds &lt; <span class="hljs-number">3600</span>) &#123;<br>        <span class="hljs-keyword">const</span> m = <span class="hljs-built_in">String</span>(<span class="hljs-built_in">parseInt</span>(seconds / <span class="hljs-number">60</span>)).padStart(<span class="hljs-number">2</span>, <span class="hljs-string">'0'</span>)<br>        <span class="hljs-keyword">const</span> s = <span class="hljs-built_in">String</span>(<span class="hljs-built_in">parseInt</span>(seconds % <span class="hljs-number">60</span>)).padStart(<span class="hljs-number">2</span>, <span class="hljs-string">'0'</span>)<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">`<span class="hljs-subst">$&#123;m&#125;</span>:<span class="hljs-subst">$&#123;s&#125;</span>`</span><br>      &#125;<br>      <span class="hljs-keyword">const</span> h = <span class="hljs-built_in">String</span>(<span class="hljs-built_in">parseInt</span>(seconds / <span class="hljs-number">3600</span>)).padStart(<span class="hljs-number">2</span>, <span class="hljs-string">'0'</span>)<br>      <span class="hljs-keyword">const</span> m = <span class="hljs-built_in">String</span>(<span class="hljs-built_in">parseInt</span>((seconds % <span class="hljs-number">3600</span>) / <span class="hljs-number">60</span>)).padStart(<span class="hljs-number">2</span>, <span class="hljs-string">'0'</span>)<br>      <span class="hljs-keyword">const</span> s = <span class="hljs-built_in">String</span>(<span class="hljs-built_in">parseInt</span>((seconds % <span class="hljs-number">3600</span>) % <span class="hljs-number">60</span>)).padStart(<span class="hljs-number">2</span>, <span class="hljs-string">'0'</span>)<br>      <span class="hljs-keyword">return</span> <span class="hljs-string">`<span class="hljs-subst">$&#123;h&#125;</span>:<span class="hljs-subst">$&#123;m&#125;</span>:<span class="hljs-subst">$&#123;s&#125;</span>`</span><br>    &#125;<br></code></pre></td></tr></table></figure><h3 id="时间戳转换"><a href="#时间戳转换" class="headerlink" title="时间戳转换"></a>时间戳转换</h3><p>new Date(1598338225474)，如果是秒为单位需要乘1000</p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;JS日期&quot;&gt;&lt;a href=&quot;#JS日期&quot; class=&quot;headerlink&quot; title=&quot;JS日期&quot;&gt;&lt;/a&gt;JS日期&lt;/h1&gt;&lt;h2 id=&quot;关于创建时间对象&quot;&gt;&lt;a href=&quot;#关于创建时间对象&quot; class=&quot;headerlink&quot; title=&quot;关于创建时间对象&quot;&gt;&lt;/a&gt;关于创建时间对象&lt;/h2&gt;&lt;h3 id=&quot;创建日期对象的四种方法&quot;&gt;&lt;a href=&quot;#创建日期对象的四种方法&quot; class=&quot;headerlink&quot; title=&quot;创建日期对象的四种方法&quot;&gt;&lt;/a&gt;创建日期对象的四种方法&lt;/h3&gt;&lt;p&gt;&lt;code&gt;new Date()&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;new Date(year, month,day, hours, minutes, seconds, milliseconds)&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;new Date(milliseconds)&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;new Date(date string)&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;1、不传参数创建日期&lt;/p&gt;
&lt;figure class=&quot;hljs highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;code class=&quot;hljs javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; d = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;Date&lt;/span&gt;();&lt;span class=&quot;hljs-comment&quot;&gt;//Mon Aug 17 2020 17:47:35 GMT+0800 (中国标准时间)&lt;/span&gt;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;2、加入年月日等参数&lt;/p&gt;
    
    </summary>
    
    
      <category term="前端" scheme="http://www.aiabby.top/categories/%E5%89%8D%E7%AB%AF/"/>
    
      <category term="JavaScript" scheme="http://www.aiabby.top/categories/%E5%89%8D%E7%AB%AF/JavaScript/"/>
    
    
      <category term="JS" scheme="http://www.aiabby.top/tags/JS/"/>
    
      <category term="Date对象" scheme="http://www.aiabby.top/tags/Date%E5%AF%B9%E8%B1%A1/"/>
    
  </entry>
  
  <entry>
    <title>记this的指向</title>
    <link href="http://www.aiabby.top/2020/08/01/8-1%E8%AE%B0this%E7%9A%84%E6%8C%87%E5%90%91/"/>
    <id>http://www.aiabby.top/2020/08/01/8-1%E8%AE%B0this%E7%9A%84%E6%8C%87%E5%90%91/</id>
    <published>2020-08-01T13:27:39.000Z</published>
    <updated>2020-08-18T02:29:07.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="this的指向"><a href="#this的指向" class="headerlink" title="this的指向"></a>this的指向</h2><p>this的指向在函数的定义的时候是确定不了的，只有函数执行的时候才能确定this到底指向谁，所以this的最终指向的是调用它的对象（理论上）</p><p>第一个例子</p><figure class="hljs highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">app</span>(<span class="hljs-params"></span>)</span>&#123;<br>    <span class="hljs-keyword">var</span> user = <span class="hljs-string">"bpp"</span>; <br>    <span class="hljs-built_in">console</span>.log(user);<span class="hljs-comment">//undefined</span><br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-keyword">this</span>);<span class="hljs-comment">//window</span><br>&#125;<br>app()在全局作用域<span class="hljs-built_in">window</span>中调用app()<br></code></pre></td></tr></table></figure><p>此时this最终指向的是调用它的对象window，相当于<code>window.app()</code></p><a id="more"></a><p>第二个例子</p><figure class="hljs highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> temp = &#123;<br>    <span class="hljs-attr">user</span>: <span class="hljs-string">'name'</span>,<br>    <span class="hljs-attr">fn</span>:<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;<br>        <span class="hljs-built_in">console</span>.log(<span class="hljs-keyword">this</span>.user);<span class="hljs-comment">//name</span><br>    &#125;<br>&#125;<br>temp.fn()<br></code></pre></td></tr></table></figure><p>此时因为是对象temp调用了fn，所以this指向它的调用者temp</p><p>例子三证明了我们的this指向它的调用者是一个理论上的说法</p><figure class="hljs highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> temp = &#123;<br>    <span class="hljs-attr">user</span>: <span class="hljs-string">'name'</span>,<br>    <span class="hljs-attr">fn</span>:<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;<br>        <span class="hljs-built_in">console</span>.log(<span class="hljs-keyword">this</span>.user);<span class="hljs-comment">//name</span><br>    &#125;<br>&#125;<br><span class="hljs-built_in">window</span>.temp.fn()<br></code></pre></td></tr></table></figure><p><strong>通过window调用发现this没有指向window</strong></p><p>例子四</p><figure class="hljs highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs undefined">var <span class="hljs-keyword">temp</span> = &#123;<br><span class="hljs-keyword">user</span>:<span class="hljs-string">'yy'</span><br>temp2：&#123;<br> <span class="hljs-keyword">user</span>: <span class="hljs-string">'name'</span>,<br>    fn:<span class="hljs-keyword">function</span>()&#123;<br>        console.log(this.<span class="hljs-keyword">user</span>);//<span class="hljs-type">name</span><br>  &#125;<br> &#125;  <br>&#125;<br><span class="hljs-keyword">temp</span>.temp2.fn()<br></code></pre></td></tr></table></figure><p>这里的temp2是通过temp点出来的，this同样没有指向它说明</p><ol><li>如果一个函数中有this没有通过上一级对象调用，那么它指向window</li><li>如果有上一级对象调用，那么this指向它的上一级对象</li><li>如果这个函数被多个对象嵌套，那么尽管这个函数被最外层的对象调用，this也指向它的上一级对象。</li></ol><p><strong>特殊情况</strong></p><figure class="hljs highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> temp1 = &#123;<br>    <span class="hljs-attr">b</span>:&#123;<br>        a = <span class="hljs-number">10</span>,<br>        <span class="hljs-attr">fn</span>:<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;<br>        <span class="hljs-built_in">console</span>.log(<span class="hljs-keyword">this</span>.a);<span class="hljs-comment">//undefined</span><br>        <span class="hljs-built_in">console</span>.log(<span class="hljs-keyword">this</span>);<span class="hljs-comment">//window</span><br>  &#125;<br>   &#125;<br>  <br>&#125;<br><span class="hljs-keyword">var</span> j = temp1.b.fn;<br>j()<br></code></pre></td></tr></table></figure><p>此时的this没有指向最后调用它的b，因为在fn赋值给变量j的时候函数并没有运行，最终指向的是window</p><p>构造函数的this</p><figure class="hljs highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">fn</span>(<span class="hljs-params"></span>)</span>&#123;<br>    <span class="hljs-keyword">this</span>.user= <span class="hljs-string">"aaa"</span>;<br>&#125;<br><span class="hljs-keyword">var</span> a = <span class="hljs-keyword">new</span> fn();<br><span class="hljs-built_in">console</span>.log(a.user);<span class="hljs-comment">//aaa</span><br></code></pre></td></tr></table></figure><p>这里之所以对象a可以点出函数Fn里面的user是因为new关键字可以改变this的指向，将这个this指向对象a，为什么我说a是对象，因为用了new关键字就是创建一个对象实例，理解这句话可以想想我们的例子3，我们这里用变量a创建了一个Fn的实例（相当于复制了一份Fn到对象a里面），此时仅仅只是创建，并没有执行，而调用这个函数Fn的是对象a，那么this指向的自然是对象a，那么为什么对象a中会有user，因为你已经复制了一份Fn函数到对象a中，用了new关键字就等同于复制了一份。</p><p>　　除了上面的这些以外，我们还可以自行改变this的指向，关于自行改变this的指向请看<a href="http://www.cnblogs.com/pssp/p/5215621.html" target="_blank" rel="noopener">JavaScript中call,apply,bind方法的总结</a>这篇文章，详细的说明了我们如何手动更改this的指向。</p><p>当this碰到return时</p><figure class="hljs highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">fn</span>(<span class="hljs-params"></span>)</span>&#123;<br>    <span class="hljs-keyword">this</span>.uer=<span class="hljs-string">"aaa"</span>;<br>    <span class="hljs-keyword">return</span> &#123;&#125;<br>&#125;<br><span class="hljs-keyword">var</span> a = <span class="hljs-keyword">new</span> fn();<br><span class="hljs-built_in">console</span>.log(a.user); <span class="hljs-comment">//undefined</span><br></code></pre></td></tr></table></figure><figure class="hljs highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">fn</span>(<span class="hljs-params"></span>)  <br></span>&#123;  <br>    <span class="hljs-keyword">this</span>.user = <span class="hljs-string">'aaaa'</span>;  <br>    <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>&#125;<br><span class="hljs-keyword">var</span> a = <span class="hljs-keyword">new</span> fn;  <br><span class="hljs-built_in">console</span>.log(a.user); <span class="hljs-comment">//aaaa</span><br></code></pre></td></tr></table></figure><p><strong>如果返回值是一个对象，那么this指向的就是那个返回的对象，如果返回值不是一个对象那么this还是指向函数的实例。</strong></p><h2 id="补充"><a href="#补充" class="headerlink" title="补充"></a>补充</h2><p>在严格模式中默认的this不再时window，而是undefined</p><p>new操作符会改变this的指向问题</p><figure class="hljs highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">fn</span>(<span class="hljs-params"></span>)</span>&#123;<br>    <span class="hljs-keyword">this</span>.user= <span class="hljs-string">"aaa"</span>;<br>&#125;<br><span class="hljs-keyword">var</span> a = <span class="hljs-keyword">new</span> fn();<br><span class="hljs-built_in">console</span>.log(a.user);<span class="hljs-comment">//aaa</span><br></code></pre></td></tr></table></figure><p>为什么this会指向a？首先new关键字会创建一个空的对象，然后会自动调用一个函数（比如apply）方法，将this指向这个空对象，这样的化函数内部的this就会被这个空的对象替代</p><h2 id="Vue中的this"><a href="#Vue中的this" class="headerlink" title="Vue中的this"></a>Vue中的this</h2><p>我们可以看到在vue的组件中，我们调用了某个ui组件，使用的使用都会用到this，并且在获取数据的时候也会用到this</p><img src="/2020/08/01/8-1记this的指向/1.png"><p>获取用户列表数据</p><img src="/2020/08/01/8-1记this的指向/2.png"><p>使用elementui框架的弹框组件</p><p>Vue中的this指向当前组件的实例</p><p>使用箭头函数没有自己的this，所以指向组件当前的实例</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;this的指向&quot;&gt;&lt;a href=&quot;#this的指向&quot; class=&quot;headerlink&quot; title=&quot;this的指向&quot;&gt;&lt;/a&gt;this的指向&lt;/h2&gt;&lt;p&gt;this的指向在函数的定义的时候是确定不了的，只有函数执行的时候才能确定this到底指向谁，所以this的最终指向的是调用它的对象（理论上）&lt;/p&gt;
&lt;p&gt;第一个例子&lt;/p&gt;
&lt;figure class=&quot;hljs highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;code class=&quot;hljs javascript&quot;&gt;&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;app&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;)&lt;/span&gt;&amp;#123;&lt;br&gt;    &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; user = &lt;span class=&quot;hljs-string&quot;&gt;&quot;bpp&quot;&lt;/span&gt;; &lt;br&gt;    &lt;span class=&quot;hljs-built_in&quot;&gt;console&lt;/span&gt;.log(user);&lt;span class=&quot;hljs-comment&quot;&gt;//undefined&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;hljs-built_in&quot;&gt;console&lt;/span&gt;.log(&lt;span class=&quot;hljs-keyword&quot;&gt;this&lt;/span&gt;);&lt;span class=&quot;hljs-comment&quot;&gt;//window&lt;/span&gt;&lt;br&gt;&amp;#125;&lt;br&gt;app()在全局作用域&lt;span class=&quot;hljs-built_in&quot;&gt;window&lt;/span&gt;中调用app()&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;此时this最终指向的是调用它的对象window，相当于&lt;code&gt;window.app()&lt;/code&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="前端" scheme="http://www.aiabby.top/categories/%E5%89%8D%E7%AB%AF/"/>
    
      <category term="JavaScript" scheme="http://www.aiabby.top/categories/%E5%89%8D%E7%AB%AF/JavaScript/"/>
    
    
      <category term="JS" scheme="http://www.aiabby.top/tags/JS/"/>
    
  </entry>
  
  <entry>
    <title>7-31记</title>
    <link href="http://www.aiabby.top/2020/07/31/7-31%E8%AE%B0/"/>
    <id>http://www.aiabby.top/2020/07/31/7-31%E8%AE%B0/</id>
    <published>2020-07-31T15:44:22.000Z</published>
    <updated>2020-08-01T13:27:04.000Z</updated>
    
    <content type="html"><![CDATA[<p>模板字符串</p><p>数据库中返回的是纯数字模式的时间，例如下午四点，数据库中存储的为16，下午六点，数据库中储存的为18，</p><p>要求是我们需要将16展示为16：00-16：59的时间段</p><p>在elementUi的表格中</p><figure class="hljs highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">el-table-column</span> <span class="hljs-attr">label</span>=<span class="hljs-string">"姓名"</span> <span class="hljs-attr">width</span>=<span class="hljs-string">"180"</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">template</span> <span class="hljs-attr">slot-scope</span>=<span class="hljs-string">"&#123;row&#125;"</span>&gt;</span>&#123;&#123; `$(row.hour):00 - $(row.hour):59` &#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span><br> <span class="hljs-tag">&lt;/<span class="hljs-name">el-table-column</span>&gt;</span><br></code></pre></td></tr></table></figure><a id="more"></a><ol><li><p>解构赋值</p><p>对象的解构赋值</p><figure class="hljs highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">let</span> &#123;foo, bar&#125; = &#123;<span class="hljs-attr">foo</span>: <span class="hljs-string">'aaa'</span>, <span class="hljs-attr">bar</span>: <span class="hljs-string">'bbb'</span>&#125;<br>foo <span class="hljs-comment">// 'aaa'</span><br>bar <span class="hljs-comment">// 'bbb'</span><br></code></pre></td></tr></table></figure><p>对像的属性没有次序，变量必须与属性同名，才能正确的值</p><ol start="3"><li>JSON.stringify({x:5,y:6}) //{‘x’:’5’,”y”,’6’}</li><li>JSON.parse(json)//解析json转为js值或对象</li></ol></li></ol>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;模板字符串&lt;/p&gt;
&lt;p&gt;数据库中返回的是纯数字模式的时间，例如下午四点，数据库中存储的为16，下午六点，数据库中储存的为18，&lt;/p&gt;
&lt;p&gt;要求是我们需要将16展示为16：00-16：59的时间段&lt;/p&gt;
&lt;p&gt;在elementUi的表格中&lt;/p&gt;
&lt;figure class=&quot;hljs highlight html&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;code class=&quot;hljs html&quot;&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;el-table-column&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;label&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;姓名&quot;&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;width&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;180&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;template&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;slot-scope&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;&amp;#123;row&amp;#125;&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&amp;#123;&amp;#123; `$(row.hour):00 - $(row.hour):59` &amp;#125;&amp;#125;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;template&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br&gt; &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;el-table-column&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
      <category term="前端" scheme="http://www.aiabby.top/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="JS" scheme="http://www.aiabby.top/tags/JS/"/>
    
      <category term="组件库" scheme="http://www.aiabby.top/tags/%E7%BB%84%E4%BB%B6%E5%BA%93/"/>
    
  </entry>
  
  <entry>
    <title>elementUi相关组件实例</title>
    <link href="http://www.aiabby.top/2020/07/30/7-30%E8%AE%B0elementUi/"/>
    <id>http://www.aiabby.top/2020/07/30/7-30%E8%AE%B0elementUi/</id>
    <published>2020-07-30T13:29:31.000Z</published>
    <updated>2020-08-17T09:42:27.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="项目中关于ElementUi的记录"><a href="#项目中关于ElementUi的记录" class="headerlink" title="项目中关于ElementUi的记录"></a>项目中关于ElementUi的记录</h1><h2 id="Pagination分页"><a href="#Pagination分页" class="headerlink" title="Pagination分页"></a>Pagination分页</h2><figure class="hljs highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">el-pagination</span><br>  <span class="hljs-attr">:page-size</span>=<span class="hljs-string">"20"</span><br>  <span class="hljs-attr">:pager-count</span>=<span class="hljs-string">"11"</span><br>  <span class="hljs-attr">layout</span>=<span class="hljs-string">"prev, pager, next"</span><br>  <span class="hljs-attr">:total</span>=<span class="hljs-string">"total"</span><br>   @<span class="hljs-attr">curtent-change</span>=<span class="hljs-string">"getpageUser"</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">el-pagination</span>&gt;</span><br></code></pre></td></tr></table></figure><p>后端会获取数据的总条数和page页码</p><a id="more"></a><figure class="hljs highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs javascript">getPageUser(Page)&#123;<br>    userlist(&#123;Page&#125;).then(<span class="hljs-function"><span class="hljs-params">data</span> =&gt;</span>&#123;<br>        <span class="hljs-keyword">this</span>.list = data.userlist<br>        <span class="hljs-keyword">this</span>.total = data.total<br>        <span class="hljs-keyword">this</span>.lsitloading = <span class="hljs-literal">false</span><br>    &#125;)<br>&#125;<br></code></pre></td></tr></table></figure><p>没有接口时可以在data中先写上假数据以便测试</p><h2 id="日期选择器"><a href="#日期选择器" class="headerlink" title="日期选择器"></a>日期选择器</h2><p>设置开始时间和结束时间的默认值为最近一周</p><figure class="hljs highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"block"</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"demonstration"</span>&gt;</span>默认<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">el-date-picker</span><br>      <span class="hljs-attr">v-model</span>=<span class="hljs-string">"value1"</span><br>      <span class="hljs-attr">type</span>=<span class="hljs-string">"daterange"</span><br>      <span class="hljs-attr">range-separator</span>=<span class="hljs-string">"至"</span><br>      <span class="hljs-attr">start-placeholder</span>=<span class="hljs-string">"开始日期"</span><br>      <span class="hljs-attr">end-placeholder</span>=<span class="hljs-string">"结束日期"</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">el-date-picker</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></td></tr></table></figure><figure class="hljs highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> now = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Date</span>()<br><span class="hljs-keyword">const</span> endDate = parseTime(now, <span class="hljs-string">'&#123;y&#125;-&#123;m&#125;-&#123;d&#125;'</span>)<br><span class="hljs-keyword">const</span> lastWeek = parseTime((<span class="hljs-keyword">new</span> <span class="hljs-built_in">Date</span>() - <span class="hljs-number">3600</span> * <span class="hljs-number">1000</span> * <span class="hljs-number">24</span> * <span class="hljs-number">7</span>),<span class="hljs-string">'&#123;y&#125;-&#123;m&#125;-&#123;d&#125;'</span>)<br><span class="hljs-comment">//value1可以接收数组，当开始日期和结束日期都需要设置是传入个数组</span><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span>&#123;<br>    data()&#123;<br>        <span class="hljs-attr">value</span>:[lastWeek,endDate]<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>使用过滤器格式化时间</strong></p><h2 id="form表单"><a href="#form表单" class="headerlink" title="form表单"></a>form表单</h2><figure class="hljs highlight html"><figcaption><span>+ javascrit</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">el-form-item</span> <span class="hljs-attr">prop</span>=<span class="hljs-string">"account"</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"svg-container"</span>&gt;</span><br>          <span class="hljs-tag">&lt;<span class="hljs-name">svg-icon</span> <span class="hljs-attr">icon-class</span>=<span class="hljs-string">"user"</span> /&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">el-input</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">"account"</span> <span class="hljs-attr">v-model</span>=<span class="hljs-string">"loginForm.account"</span> <span class="hljs-attr">:maxlength</span>=<span class="hljs-string">"12"</span><span class="hljs-attr">name</span>=<span class="hljs-string">"account"</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"text"</span> <span class="hljs-attr">placeholder</span>=<span class="hljs-string">"用户名"</span> <span class="hljs-attr">autocomplete</span>=<span class="hljs-string">"on"</span> /&gt;</span><br>      <span class="hljs-tag">&lt;/<span class="hljs-name">el-form-item</span>&gt;</span><br><br>      <span class="hljs-tag">&lt;<span class="hljs-name">el-form-item</span> <span class="hljs-attr">prop</span>=<span class="hljs-string">"password"</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"svg-container"</span>&gt;</span><br>          <span class="hljs-tag">&lt;<span class="hljs-name">svg-icon</span> <span class="hljs-attr">icon-class</span>=<span class="hljs-string">"password"</span> /&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">el-input</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">"password"</span> <span class="hljs-attr">:key</span>=<span class="hljs-string">"passwordType"</span> <span class="hljs-attr">v-model</span>=<span class="hljs-string">"loginForm.password"</span> <span class="hljs-attr">:maxlength</span>=<span class="hljs-string">"16"</span> <span class="hljs-attr">:type</span>=<span class="hljs-string">"passwordType"</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"password"</span> <span class="hljs-attr">placeholder</span>=<span class="hljs-string">"密码"</span> <span class="hljs-attr">autocomplete</span>=<span class="hljs-string">"on"</span> @<span class="hljs-attr">keyup.enter.native</span>=<span class="hljs-string">"handleLogin"</span> /&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"show-pwd"</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">"showPwd"</span>&gt;</span><br>          <span class="hljs-tag">&lt;<span class="hljs-name">svg-icon</span> <span class="hljs-attr">:icon-class</span>=<span class="hljs-string">"passwordType=='password'?'eye':'eye-open'"</span> /&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br>      <span class="hljs-tag">&lt;/<span class="hljs-name">el-form-item</span>&gt;</span><br><br>      <span class="hljs-tag">&lt;<span class="hljs-name">el-button</span> <span class="hljs-attr">:loading</span>=<span class="hljs-string">"loading"</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"primary"</span> <span class="hljs-attr">style</span>=<span class="hljs-string">"width:100%"</span> @<span class="hljs-attr">click.native.prevent</span>=<span class="hljs-string">"handleLogin"</span>&gt;</span>登录<span class="hljs-tag">&lt;/<span class="hljs-name">el-button</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">el-form</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript"><br>  <span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> &#123;<br>    data() &#123;<br>        <span class="hljs-keyword">const</span> validateAccount = <span class="hljs-function">(<span class="hljs-params">rule, value, callback</span>) =&gt;</span> &#123;<br>      <span class="hljs-keyword">if</span> (!validAccount(value)) &#123;<br>        callback(<span class="hljs-keyword">new</span> <span class="hljs-built_in">Error</span>(<span class="hljs-string">'用户名应为3~16位字符'</span>))<br>      &#125; <span class="hljs-keyword">else</span> &#123;<br>        callback()<br>      &#125;<br>    &#125;<br>    <span class="hljs-keyword">const</span> validatePassword = <span class="hljs-function">(<span class="hljs-params">rule, value, callback</span>) =&gt;</span> &#123;<br>      <span class="hljs-keyword">if</span> (!validPassword(value)) &#123;<br>        callback(<span class="hljs-keyword">new</span> <span class="hljs-built_in">Error</span>(<span class="hljs-string">'密码应为6~16位字符'</span>))<br>      &#125; <span class="hljs-keyword">else</span> &#123;<br>        callback()<br>      &#125;<br>    &#125;<br>      <span class="hljs-keyword">return</span> &#123;<br>        <span class="hljs-attr">labelPosition</span>: <span class="hljs-string">'right'</span>,<br>         <span class="hljs-attr">formLabelAlign</span>: &#123;<br>          <span class="hljs-attr">name</span>: <span class="hljs-string">''</span>,<br>          <span class="hljs-attr">region</span>: <span class="hljs-string">''</span>,<br>          <span class="hljs-attr">type</span>: <span class="hljs-string">''</span><br>        &#125;,<br>          <span class="hljs-comment">//trigger:'blur'当失去焦点时触发</span><br>      <span class="hljs-attr">loginRules</span>: &#123;<br>        <span class="hljs-attr">account</span>: [&#123; <span class="hljs-attr">required</span>: <span class="hljs-literal">true</span>, <span class="hljs-attr">trigger</span>: <span class="hljs-string">'blur'</span>, <span class="hljs-attr">validator</span>: validateAccount &#125;],<br>        <span class="hljs-attr">password</span>: [&#123; <span class="hljs-attr">required</span>: <span class="hljs-literal">true</span>, <span class="hljs-attr">trigger</span>: <span class="hljs-string">'blur'</span>, <span class="hljs-attr">validator</span>: validatePassword &#125;]<br>      &#125;,<br>      &#125;;<br>    &#125;<br>  &#125;<br></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><ol><li>表单中 :model=”form”—&gt;表单数据对像</li><li>需要传入表单data和rule验证规则</li></ol>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;项目中关于ElementUi的记录&quot;&gt;&lt;a href=&quot;#项目中关于ElementUi的记录&quot; class=&quot;headerlink&quot; title=&quot;项目中关于ElementUi的记录&quot;&gt;&lt;/a&gt;项目中关于ElementUi的记录&lt;/h1&gt;&lt;h2 id=&quot;Pagination分页&quot;&gt;&lt;a href=&quot;#Pagination分页&quot; class=&quot;headerlink&quot; title=&quot;Pagination分页&quot;&gt;&lt;/a&gt;Pagination分页&lt;/h2&gt;&lt;figure class=&quot;hljs highlight html&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;code class=&quot;hljs html&quot;&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;el-pagination&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;hljs-attr&quot;&gt;:page-size&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;20&quot;&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;hljs-attr&quot;&gt;:pager-count&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;11&quot;&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;hljs-attr&quot;&gt;layout&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;prev, pager, next&quot;&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;hljs-attr&quot;&gt;:total&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;total&quot;&lt;/span&gt;&lt;br&gt;   @&lt;span class=&quot;hljs-attr&quot;&gt;curtent-change&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;getpageUser&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;el-pagination&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;后端会获取数据的总条数和page页码&lt;/p&gt;
    
    </summary>
    
    
      <category term="前端" scheme="http://www.aiabby.top/categories/%E5%89%8D%E7%AB%AF/"/>
    
      <category term="Vue-elementUi" scheme="http://www.aiabby.top/categories/%E5%89%8D%E7%AB%AF/Vue-elementUi/"/>
    
    
      <category term="框架" scheme="http://www.aiabby.top/tags/%E6%A1%86%E6%9E%B6/"/>
    
      <category term="组件库" scheme="http://www.aiabby.top/tags/%E7%BB%84%E4%BB%B6%E5%BA%93/"/>
    
  </entry>
  
  <entry>
    <title>Ajax3-jquery</title>
    <link href="http://www.aiabby.top/2020/07/24/Ajax3-jquery/"/>
    <id>http://www.aiabby.top/2020/07/24/Ajax3-jquery/</id>
    <published>2020-07-24T13:47:54.000Z</published>
    <updated>2020-08-16T08:41:41.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="原生Ajax"><a href="#原生Ajax" class="headerlink" title="原生Ajax"></a>原生Ajax</h1><h2 id="封装Ajax"><a href="#封装Ajax" class="headerlink" title="封装Ajax"></a>封装Ajax</h2><figure class="hljs highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">getAjax</span>(<span class="hljs-params">httpUrl,callbackFn</span>) </span>&#123;<br>    <span class="hljs-keyword">var</span> xhr = <span class="hljs-keyword">new</span> XMLHttpRequest();<br>    <span class="hljs-comment">// 设置请求方法和路径</span><br>    xhr.open(<span class="hljs-string">'GET'</span>,httpUrl);<br>    <span class="hljs-comment">// 发送数据</span><br>    xhr.send()<br>    <span class="hljs-comment">// 监听后台是否返回数据</span><br>    xhr.onreadystatechange = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;<br>        <span class="hljs-keyword">if</span>(xhr.status==<span class="hljs-number">200</span>&amp;&amp;xhr.readyState ==<span class="hljs-number">4</span>)&#123;<br>           callbackFn(xhr)<br>        &#125;<br>    &#125;<br></code></pre></td></tr></table></figure><a id="more"></a><h2 id="调用Ajax"><a href="#调用Ajax" class="headerlink" title="调用Ajax"></a>调用Ajax</h2><figure class="hljs highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs javascript">getAjax(httpUrl,<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">xhr</span>) </span>&#123;<br>        <span class="hljs-built_in">console</span>.log(xhr)<br>        <span class="hljs-keyword">var</span> dataObj = <span class="hljs-built_in">JSON</span>.parse(xhr.response)<br>        <span class="hljs-built_in">document</span>.querySelector(<span class="hljs-string">'body'</span>).append(<span class="hljs-string">`&lt;h1&gt;<span class="hljs-subst">$&#123;res.title&#125;</span>&lt;/h1&gt;`</span>)<br>    &#125;)<br></code></pre></td></tr></table></figure><p>加上url后，使用异步的回调函数将JSON数据进行解析</p><h2 id="使用jQueryAjax"><a href="#使用jQueryAjax" class="headerlink" title="使用jQueryAjax"></a>使用jQueryAjax</h2><figure class="hljs highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs javascript">$.<span class="hljs-keyword">get</span>(httpUrl,function (res) &#123;<br>        <span class="hljs-built_in">console</span>.log(res)<br>        $(<span class="hljs-string">'body'</span>).append(<span class="hljs-string">`&lt;h1&gt;<span class="hljs-subst">$&#123;res.title&#125;</span>&lt;/h1&gt;`</span>)<br>    &#125;)<br></code></pre></td></tr></table></figure><p>不需要再对JSON进行解析</p><h2 id="其它写法"><a href="#其它写法" class="headerlink" title="其它写法"></a>其它写法</h2><figure class="hljs highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// 请求段子地址</span><br>    <span class="hljs-keyword">var</span> httpUrl1 = <span class="hljs-string">"https://api.apiopen.top/getJoke?page=1&amp;count10&amp;type=video"</span><br>    $.<span class="hljs-keyword">get</span>(httpUrl1).then(function (res) &#123;<br>        <span class="hljs-built_in">console</span>.log(res)<br>    &#125;)<br><span class="hljs-comment">//使用.then()并且将参数作为对象传入</span><br>    <span class="hljs-keyword">var</span> httpUrl2 = <span class="hljs-string">"https://api.apiopen.top/getJoke"</span><br>    <span class="hljs-keyword">var</span> options = &#123;<br>        <span class="hljs-attr">page</span>: <span class="hljs-number">1</span>,<br>        <span class="hljs-attr">count</span>: <span class="hljs-number">10</span>,<br>        <span class="hljs-attr">type</span>: <span class="hljs-string">"image"</span><br>    &#125;<br>    $.<span class="hljs-keyword">get</span>(httpUrl2, options).then(function (res) &#123;<br>        <span class="hljs-built_in">console</span>.log(res)<br>        res.result.forEach(<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">item, i</span>) </span>&#123;<br>            $(<span class="hljs-string">'body'</span>).append(<span class="hljs-string">`&lt;img src="<span class="hljs-subst">$&#123;item.images&#125;</span>"&gt;`</span>)<br>        &#125;)<br>    &#125;)<br></code></pre></td></tr></table></figure><h2 id="ajax"><a href="#ajax" class="headerlink" title="$.ajax"></a>$.ajax</h2><figure class="hljs highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs javascript">$.ajax(&#123;<br>        <span class="hljs-attr">url</span>: httpUrl2,<br>        <span class="hljs-attr">data</span>: <span class="hljs-string">"options"</span>,<span class="hljs-comment">//地址后面的参数</span><br>        <span class="hljs-attr">method</span>: <span class="hljs-string">"GET"</span>,<br>        <span class="hljs-comment">//成功执行的函数</span><br>        <span class="hljs-comment">// success:function () &#123;</span><br>        <span class="hljs-comment">//</span><br>        <span class="hljs-comment">// &#125;,</span><br>        <span class="hljs-comment">// // 失败执行的函数</span><br>        <span class="hljs-comment">// fail:function () &#123;</span><br>        <span class="hljs-comment">//</span><br>        <span class="hljs-comment">// &#125;,</span><br>        <span class="hljs-comment">//不管成功还是失败都会执行的函数</span><br>        <span class="hljs-attr">complete</span>: <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">res</span>) </span>&#123;<br>            <span class="hljs-built_in">console</span>.log(res)<br>            <span class="hljs-keyword">var</span> res = res.responseJSON;<br>            res.result.forEach(<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">item, i</span>) </span>&#123;<br>                $(<span class="hljs-string">'body'</span>).append(<span class="hljs-string">`&lt;img src="<span class="hljs-subst">$&#123;item.images&#125;</span>"&gt;`</span>)<br>            &#125;)<br>        &#125;<br>    &#125;)<br></code></pre></td></tr></table></figure><p><strong>$.ajax()方法是jQuery最底层的Ajax实现</strong></p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;原生Ajax&quot;&gt;&lt;a href=&quot;#原生Ajax&quot; class=&quot;headerlink&quot; title=&quot;原生Ajax&quot;&gt;&lt;/a&gt;原生Ajax&lt;/h1&gt;&lt;h2 id=&quot;封装Ajax&quot;&gt;&lt;a href=&quot;#封装Ajax&quot; class=&quot;headerlink&quot; title=&quot;封装Ajax&quot;&gt;&lt;/a&gt;封装Ajax&lt;/h2&gt;&lt;figure class=&quot;hljs highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;code class=&quot;hljs javascript&quot;&gt;&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;getAjax&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;httpUrl,callbackFn&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;br&gt;    &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; xhr = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; XMLHttpRequest();&lt;br&gt;    &lt;span class=&quot;hljs-comment&quot;&gt;// 设置请求方法和路径&lt;/span&gt;&lt;br&gt;    xhr.open(&lt;span class=&quot;hljs-string&quot;&gt;&#39;GET&#39;&lt;/span&gt;,httpUrl);&lt;br&gt;    &lt;span class=&quot;hljs-comment&quot;&gt;// 发送数据&lt;/span&gt;&lt;br&gt;    xhr.send()&lt;br&gt;    &lt;span class=&quot;hljs-comment&quot;&gt;// 监听后台是否返回数据&lt;/span&gt;&lt;br&gt;    xhr.onreadystatechange = &lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;)&lt;/span&gt;&amp;#123;&lt;br&gt;        &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt;(xhr.status==&lt;span class=&quot;hljs-number&quot;&gt;200&lt;/span&gt;&amp;amp;&amp;amp;xhr.readyState ==&lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;)&amp;#123;&lt;br&gt;           callbackFn(xhr)&lt;br&gt;        &amp;#125;&lt;br&gt;    &amp;#125;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
      <category term="前端" scheme="http://www.aiabby.top/categories/%E5%89%8D%E7%AB%AF/"/>
    
      <category term="Ajax" scheme="http://www.aiabby.top/categories/%E5%89%8D%E7%AB%AF/Ajax/"/>
    
    
      <category term="jQuery" scheme="http://www.aiabby.top/tags/jQuery/"/>
    
      <category term="Ajax" scheme="http://www.aiabby.top/tags/Ajax/"/>
    
  </entry>
  
  <entry>
    <title>Ajax2</title>
    <link href="http://www.aiabby.top/2020/07/23/Ajax2/"/>
    <id>http://www.aiabby.top/2020/07/23/Ajax2/</id>
    <published>2020-07-23T14:42:34.000Z</published>
    <updated>2020-07-23T15:18:00.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="关于Ajax"><a href="#关于Ajax" class="headerlink" title="关于Ajax"></a>关于Ajax</h1><p>对于在学习Ajax过程中，再看了各种教程，或者视频讲解时，粗略了解到我们可以在不刷新页面的情况下，通过Ajax的方式区获取新的内容</p><a id="more"></a><h2 id="发送Ajax请求的五个步骤"><a href="#发送Ajax请求的五个步骤" class="headerlink" title="发送Ajax请求的五个步骤"></a>发送Ajax请求的五个步骤</h2><ul><li>创建异步对象。即XMLHttpRequest对象。</li><li>使用open方法设置请求的参数。open(method,url,async)</li><li>发送请求</li><li>注册事件。注册onreadystatechange事件，状态改变时就会调用。</li><li>获取返回的数据</li></ul><p>并且对Ajax的五个步骤进行封装，将url和将要执行的请求方法或者回调函数进行封装复用</p><figure class="hljs highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">getAjax</span>(<span class="hljs-params">httpUrl,data,callbackFn</span>) </span>&#123;<br>    <span class="hljs-keyword">var</span> xhr = <span class="hljs-keyword">new</span> XMLHttpRequest();<br>    <span class="hljs-comment">// 设置请求方法和路径</span><br>    xhr.open(<span class="hljs-string">'GET'</span>,httpUrl+parseData(data));<br>    <span class="hljs-comment">// 发送数据</span><br>    xhr.send()<br>    <span class="hljs-comment">// 监听后台是否返回数据</span><br>    xhr.onreadystatechange = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;<br>        <span class="hljs-keyword">if</span>(xhr.status==<span class="hljs-number">200</span>&amp;&amp;xhr.readyState ==<span class="hljs-number">4</span>)&#123;<br>           callbackFn(xhr)<br>        &#125;<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">parseData</span>(<span class="hljs-params">data</span>) </span>&#123;<br>        <span class="hljs-keyword">var</span> str = <span class="hljs-string">"?"</span><br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> key <span class="hljs-keyword">in</span> data)&#123;<br>            str = str + key + <span class="hljs-string">"="</span> + data[key]+ <span class="hljs-string">"&amp;"</span>;<br>        &#125;<br>        str.substr(<span class="hljs-number">0</span>,str.length<span class="hljs-number">-1</span>)<br>        <span class="hljs-keyword">return</span> str<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="练习1"><a href="#练习1" class="headerlink" title="练习1"></a>练习1</h3><p>在大都数教程中会告诉我们，通过设置url就可以将数据进行返回</p><figure class="hljs highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> httpUrl = <span class="hljs-string">"https://api.apiopen.top/getJoke"</span><br>    <span class="hljs-keyword">var</span> data = &#123;<br>        <span class="hljs-attr">page</span>:<span class="hljs-number">1</span>,<br>        <span class="hljs-attr">count</span>:<span class="hljs-number">10</span>,<br>        <span class="hljs-attr">type</span>:<span class="hljs-string">"video"</span><br>    &#125;<br>    getAjax(httpUrl,data,<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">xhr</span>) </span>&#123;<br>        <span class="hljs-built_in">console</span>.log(xhr)<br>        <span class="hljs-keyword">var</span> datiObj = <span class="hljs-built_in">JSON</span>.parse(xhr.response)<br>        <span class="hljs-built_in">console</span>.log(datiObj)<br>    &#125;)<br></code></pre></td></tr></table></figure><img src="/2020/07/23/Ajax2/1.png"><p>这样就请求到了数据，但是还是不清楚我们请求到的数据要做什么，在实际的项目中ajax是怎么操作的</p><p>一直保持懵懂的了解基本api 的程度</p><h2 id="练习2"><a href="#练习2" class="headerlink" title="练习2"></a>练习2</h2><p>通过练习一个段子项目渲染页面来熟悉ajax操作</p><img src="/2020/07/23/Ajax2/2.png"><p>通过查看易点租的页面发现内部的商品结构全部是由js进行dom节点插入，我们实现一个类似今日头条的视频页面</p><figure class="hljs highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"videoList"</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"videoItem"</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"videoTop"</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"img"</span> <span class="hljs-attr">style</span>=<span class="hljs-string">'background-image: url("http://wimg.spriteapp.cn/picture/2020/0713/5f0c04f33bf50_wpd.jpg")'</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"button"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">h3</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"title"</span>&gt;</span>无知者无畏。。。看好自家小孩，以免酿成悲剧<span class="hljs-tag">&lt;/<span class="hljs-name">h3</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"icon"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span> <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"num"</span>&gt;</span>10<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span>次播放<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"videoBottom"</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">src</span>=<span class="hljs-string">"http://thirdwx.qlogo.cn/mmopen/vi_32/rlIeDLHvqo1MpvibllRxg4K4pBJ8CxRkN8Vtv5TpJjicdeetpuJtqqibAHEHC1IKibAHqaQ5DQKDBg9XOPib76HlIicA/132"</span> <span class="hljs-attr">alt</span>=<span class="hljs-string">""</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"headerImg"</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"author"</span>&gt;</span>老朽姓何<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></td></tr></table></figure><p>根据页面结构设置好视频列表的布局，然后我们需要编辑该盒子CSS样式，这个时候的图片素材是我们直接在结构中写的已知的链接，</p><p>接下来编写ajax请求数据获取所有的图片等资源</p><figure class="hljs highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> httpUrl = <span class="hljs-string">"https://api.apiopen.top/getJoke?page=1&amp;count10&amp;type=video"</span>;<br>    getAjax(httpUrl, <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">xhr</span>) </span>&#123;<br>        <span class="hljs-comment">//var resultObj = "数据获取不到"</span><br>        <span class="hljs-keyword">var</span> resultObj = <span class="hljs-built_in">JSON</span>.parse(xhr.response);<br>        <span class="hljs-built_in">console</span>.log(resultObj);<br>    &#125;)<br></code></pre></td></tr></table></figure><p><strong>getAjax()函数是我们引入的已经封装好的Ajax文件</strong></p><h3 id="那么接下来是我们如何将页面动态的渲染"><a href="#那么接下来是我们如何将页面动态的渲染" class="headerlink" title="那么接下来是我们如何将页面动态的渲染"></a>那么接下来是我们如何将页面动态的渲染</h3><ol><li>首先加载好了数据</li><li>我们要通过获取的数据渲染出视频列表，那么就需要进行循环的创建</li></ol><p><strong>将上方写好的videoItem注释掉</strong></p><figure class="hljs highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> httpUrl = <span class="hljs-string">"https://api.apiopen.top/getJoke?page=1&amp;count10&amp;type=video"</span>;<br>  getAjax(httpUrl, <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">xhr</span>) </span>&#123;<br>      <span class="hljs-keyword">var</span> resultObj = <span class="hljs-string">"数据获取不到"</span><br>      <span class="hljs-keyword">var</span> resultObj = <span class="hljs-built_in">JSON</span>.parse(xhr.response);<br>      <span class="hljs-built_in">console</span>.log(resultObj);<br>      <span class="hljs-comment">//将请求的结果赋值给videolist</span><br>      <span class="hljs-keyword">var</span> videoList = resultObj.result;<br>      renderVideoList(videoList);<br>  &#125;)<br>  <span class="hljs-comment">//编写渲染函数</span><br>   <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">renderVideoList</span>(<span class="hljs-params">videoList</span>) </span>&#123;<br>       <span class="hljs-comment">//循环创建内部节点</span><br>      videoList.forEach(<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">item, index</span>) </span>&#123;<br>          <span class="hljs-comment">//创建内部节点并添加类名</span><br>          <span class="hljs-keyword">var</span> videoItem = <span class="hljs-built_in">document</span>.createElement(<span class="hljs-string">"div"</span>)<br>          <span class="hljs-comment">//添加类名以便获取CSS样式</span><br>          videoItem.className = <span class="hljs-string">"videoItem"</span><br>          videoItem.innerHTML = <span class="hljs-string">`&lt;div class="videoTop"&gt;<br>              &lt;div class="img" style='background-image: url(<span class="hljs-subst">$&#123;item.thumbnail&#125;</span>)'&gt;&lt;/div&gt;<br>              &lt;button type="button"&gt;&lt;/button&gt;<br>              &lt;h3 class="title"&gt;<span class="hljs-subst">$&#123;item.text&#125;</span>&lt;/h3&gt;<br>              &lt;p&gt;&lt;span class="icon yanjing"&gt;&lt;/span&gt; &lt;span class="num"&gt;<span class="hljs-subst">$&#123;item.up&#125;</span>&lt;/span&gt;次播放&lt;/p&gt;<br>          &lt;/div&gt;`</span><br>          <span class="hljs-keyword">var</span> videoListDom = <span class="hljs-built_in">document</span>.querySelector(<span class="hljs-string">".videoList"</span>)<br>          videoListDom.appendChild(videoItem)<br>      &#125;)<br>  &#125;<br></code></pre></td></tr></table></figure><img src="/2020/07/23/Ajax2/4.png"><p>我们可以看到js渲染的页面全部获取到了ajax请求到的数据，包括每个栏目的图片、标题、观看量等。</p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;关于Ajax&quot;&gt;&lt;a href=&quot;#关于Ajax&quot; class=&quot;headerlink&quot; title=&quot;关于Ajax&quot;&gt;&lt;/a&gt;关于Ajax&lt;/h1&gt;&lt;p&gt;对于在学习Ajax过程中，再看了各种教程，或者视频讲解时，粗略了解到我们可以在不刷新页面的情况下，通过Ajax的方式区获取新的内容&lt;/p&gt;
    
    </summary>
    
    
      <category term="前端" scheme="http://www.aiabby.top/categories/%E5%89%8D%E7%AB%AF/"/>
    
      <category term="Ajax" scheme="http://www.aiabby.top/categories/%E5%89%8D%E7%AB%AF/Ajax/"/>
    
    
      <category term="Ajax" scheme="http://www.aiabby.top/tags/Ajax/"/>
    
  </entry>
  
  <entry>
    <title>VueRouter1</title>
    <link href="http://www.aiabby.top/2020/07/21/VueRouter/"/>
    <id>http://www.aiabby.top/2020/07/21/VueRouter/</id>
    <published>2020-07-21T09:29:16.000Z</published>
    <updated>2020-07-23T15:21:56.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Vue路由"><a href="#Vue路由" class="headerlink" title="Vue路由"></a>Vue路由</h1><h2 id="History模式"><a href="#History模式" class="headerlink" title="History模式"></a>History模式</h2><p><code>vue-router</code>默认是hash模式，使用这种模式后端不需要额外的处理，前端路由主要通过URL中的hash(#号)来实现不同页面之间的切换，并不会向后端发送请求，并且HTTP请求中不会包含hash相关的内容，</p><p>但是使用默认模式会url会出现一个#号，比较丑，所以可以使用history模式，这种模式充分利用 <code>history.pushState</code> API 来完成 URL 跳转而无须重新加载页面。</p><a id="more"></a><figure class="hljs highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> router = <span class="hljs-keyword">new</span> VueRouter(&#123;<br>  <span class="hljs-attr">mode</span>: <span class="hljs-string">'history'</span>,<br>  <span class="hljs-attr">routes</span>: [...]<br>&#125;)<br></code></pre></td></tr></table></figure><p>使用了history模式URL就会像正常的url，但是使用这种方式需要在后端进行配置，Vue官方有相对于Apache服务器，nginx，Nodejs等相关配置说明。甚至于使用Express框架时有相关的中间件配置。只需引用即可</p><h2 id="路由的使用"><a href="#路由的使用" class="headerlink" title="路由的使用"></a>路由的使用</h2><p>1、创建路由实例，参数为一个对象，这个配置对象中有一个属性：<code>routes</code>表示<strong>路由匹配规则</strong></p><figure class="hljs highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">let</span> router = <span class="hljs-keyword">new</span> Router(&#123;<br>    <span class="hljs-attr">routes</span> : [<br>        &#123; <span class="hljs-attr">path</span>: <span class="hljs-string">'/home'</span>, <span class="hljs-attr">component</span>: Home &#125;, <span class="hljs-comment">//当地址为/home时，显示Home组件</span><br>        &#123; <span class="hljs-attr">path</span>: <span class="hljs-string">'/goods'</span>, <span class="hljs-attr">component</span>: Goods &#125;,<br>        &#123; <span class="hljs-attr">path</span>: <span class="hljs-string">'/users'</span>, <span class="hljs-attr">component</span>: Users &#125;<br>    ]<br>&#125;);<br></code></pre></td></tr></table></figure><p>routes属性是一个数组，数组中的每一项都是匹配规则。</p><p>每一个规则都是一个对象，这个对象中有两个必须的属性</p><p><strong>path</strong>:表示监听的路由地址</p><p><strong>component</strong>：表示如果路由匹配到path，则展示相关的组件；</p><p>2、将路由规则对象router注册到vue实例中</p><figure class="hljs highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">new</span> Vue(&#123;<br>  <span class="hljs-attr">el</span>: <span class="hljs-string">"#app"</span>,<br>  <span class="hljs-comment">// 将路由对象注册到vue实例</span><br>  router<br>&#125;);<br></code></pre></td></tr></table></figure><p>3、一旦路由规则匹配成功，就会在vue-router提供的标签<strong><code>&lt;router-view&gt;</code></strong>上显示出来，这个标签就代表匹配成功后的component组件的显示位置</p><h2 id="router-link属性"><a href="#router-link属性" class="headerlink" title="router-link属性"></a>router-link属性</h2><p>我们之前的超链接使用a标签，在vue-router官方为我们提供了<code>router-link</code>的属性实现链接跳转</p><figure class="hljs highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs javascript">&lt;p&gt;<br>   &lt;!-- 使用 router-link 组件来导航. --&gt;<br>   &lt;!-- 通过传入 <span class="hljs-string">`to`</span> 属性指定链接. --&gt;<br>   &lt;!-- <span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">router-link</span>&gt;</span> 默认会被渲染成一个 `<span class="hljs-tag">&lt;<span class="hljs-name">a</span>&gt;</span>` 标签 --&gt;<br>   <span class="hljs-tag">&lt;<span class="hljs-name">router-link</span> <span class="hljs-attr">to</span>=<span class="hljs-string">"/foo"</span>&gt;</span>Go to Foo<span class="hljs-tag">&lt;/<span class="hljs-name">router-link</span>&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">router-link</span> <span class="hljs-attr">to</span>=<span class="hljs-string">"/bar"</span>&gt;</span>Go to Bar<span class="hljs-tag">&lt;/<span class="hljs-name">router-link</span>&gt;</span><br> <span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span></span><br></code></pre></td></tr></table></figure><p>并且我们也可以通过tag属性，tag=”span”，将默认的a标签转换成span标签。</p><h2 id="编程式导航"><a href="#编程式导航" class="headerlink" title="编程式导航"></a>编程式导航</h2><p>编程式导航就是通过js来实现页面跳转（之前都是通过标签router-link来跳转的），比如如果用户登录成功跳转道首页，这个判断的功能只能通过js来实现。</p><p>我在app.html添加一个按钮：</p><figure class="hljs highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">button</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">'goHome'</span>&gt;</span>跳转到首页<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br></code></pre></td></tr></table></figure><p>然后在app.js里面实现点击事件：</p><p>通过<code>父组件.$router.push(&#39;路由地址&#39;)</code> 或者是<code>父组件.$router.push({name:&#39;路由别名&#39;})</code>的方式进行跳转。</p><figure class="hljs highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs javascript">methods: &#123;<br>    goHome() &#123;<br>        <span class="hljs-keyword">this</span>.$router.push(<span class="hljs-string">'/home'</span>);<br>        <span class="hljs-keyword">this</span>.$router.push(&#123; <span class="hljs-attr">name</span>: <span class="hljs-string">'h'</span> &#125;);<br>    &#125;<br>&#125;,<br></code></pre></td></tr></table></figure><p><code>this.$router.push</code>和<code>this.$router.replace</code>的区别:</p><p>push会保留跳转前的地址，而replace不会。通过名字也可以看出端倪。</p><p>还有<code>this.$router.go(1)</code> 执行浏览指针的前进或者后退次数。</p><h2 id="路由嵌套"><a href="#路由嵌套" class="headerlink" title="路由嵌套"></a>路由嵌套</h2><p>我们现在想在/home路径下再接子路由a和b，形成嵌套路由/home/a或者/home/b形式的路由。</p><p>在路由配置规则数组中使用 <code>children</code> 属性，实现子路由功能。</p><figure class="hljs highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">let</span> router = <span class="hljs-keyword">new</span> Router(&#123;<br>    <span class="hljs-attr">routes</span>: [<br>        <span class="hljs-comment">// 路由重定向</span><br>        &#123; <span class="hljs-attr">path</span>: <span class="hljs-string">'/'</span>, <span class="hljs-attr">redirect</span>: <span class="hljs-string">'/home'</span> &#125;,<br>        &#123;<br>            <span class="hljs-attr">path</span>: <span class="hljs-string">'/home'</span>,<br>            <span class="hljs-attr">component</span>: Home,<br>            <span class="hljs-comment">// 使用children实现子路由</span><br>            <span class="hljs-attr">children</span>: [<br>                &#123; <span class="hljs-attr">path</span>: <span class="hljs-string">'a'</span>, <span class="hljs-attr">component</span>: A &#125;,<br>                &#123; <span class="hljs-attr">path</span>: <span class="hljs-string">'b'</span>, <span class="hljs-attr">component</span>: B &#125;<br>            ]<br>        &#125;,<br>        &#123; <span class="hljs-attr">path</span>: <span class="hljs-string">'/goods'</span>, <span class="hljs-attr">component</span>: Goods &#125;,<br>        &#123; <span class="hljs-attr">path</span>: <span class="hljs-string">'/users'</span>, <span class="hljs-attr">component</span>: Users &#125;<br>    ]<br>&#125;);<br></code></pre></td></tr></table></figure><p><strong>注意：子路由的匹配规则前面不要加/</strong></p><h3 id="当路由特别长的时候我们可以给路由起别名"><a href="#当路由特别长的时候我们可以给路由起别名" class="headerlink" title="当路由特别长的时候我们可以给路由起别名"></a>当路由特别长的时候我们可以给路由起别名</h3><p>起别名的方式就是往路由匹配规则加个<code>name</code>属性即可。</p><figure class="hljs highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">let</span> router = <span class="hljs-keyword">new</span> Router(&#123;<br>    <span class="hljs-attr">routes</span>: [<br>        &#123; <span class="hljs-attr">path</span>: <span class="hljs-string">'/'</span>, <span class="hljs-attr">redirect</span>: <span class="hljs-string">'/home'</span> &#125;,<br>        &#123;<br>            <span class="hljs-attr">path</span>: <span class="hljs-string">'/home'</span>,<br>            <span class="hljs-attr">component</span>: Home,<br>            <span class="hljs-attr">name</span>: <span class="hljs-string">'h'</span>,<br>            <span class="hljs-attr">children</span>: [<br>                &#123; <span class="hljs-attr">path</span>: <span class="hljs-string">'a'</span>, <span class="hljs-attr">component</span>: A, <span class="hljs-attr">name</span>: <span class="hljs-string">'a'</span> &#125;,<br>                &#123; <span class="hljs-attr">path</span>: <span class="hljs-string">'b'</span>, <span class="hljs-attr">component</span>: B, <span class="hljs-attr">name</span>: <span class="hljs-string">'b'</span> &#125;<br>            ]<br>        &#125;, <span class="hljs-comment">//当地址为/home时，显示Home组件</span><br>        &#123; <span class="hljs-attr">path</span>: <span class="hljs-string">'/goods'</span>, <span class="hljs-attr">component</span>: Goods, <span class="hljs-attr">name</span>: <span class="hljs-string">'g'</span> &#125;,<br>        &#123; <span class="hljs-attr">path</span>: <span class="hljs-string">'/users'</span>, <span class="hljs-attr">component</span>: Users, <span class="hljs-attr">name</span>: <span class="hljs-string">'u'</span> &#125;<br>    ]<br>&#125;);<br></code></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Vue路由&quot;&gt;&lt;a href=&quot;#Vue路由&quot; class=&quot;headerlink&quot; title=&quot;Vue路由&quot;&gt;&lt;/a&gt;Vue路由&lt;/h1&gt;&lt;h2 id=&quot;History模式&quot;&gt;&lt;a href=&quot;#History模式&quot; class=&quot;headerlink&quot; title=&quot;History模式&quot;&gt;&lt;/a&gt;History模式&lt;/h2&gt;&lt;p&gt;&lt;code&gt;vue-router&lt;/code&gt;默认是hash模式，使用这种模式后端不需要额外的处理，前端路由主要通过URL中的hash(#号)来实现不同页面之间的切换，并不会向后端发送请求，并且HTTP请求中不会包含hash相关的内容，&lt;/p&gt;
&lt;p&gt;但是使用默认模式会url会出现一个#号，比较丑，所以可以使用history模式，这种模式充分利用 &lt;code&gt;history.pushState&lt;/code&gt; API 来完成 URL 跳转而无须重新加载页面。&lt;/p&gt;
    
    </summary>
    
    
      <category term="前端" scheme="http://www.aiabby.top/categories/%E5%89%8D%E7%AB%AF/"/>
    
      <category term="Vue" scheme="http://www.aiabby.top/categories/%E5%89%8D%E7%AB%AF/Vue/"/>
    
    
      <category term="Router" scheme="http://www.aiabby.top/tags/Router/"/>
    
  </entry>
  
  <entry>
    <title>jquery04操作DOM</title>
    <link href="http://www.aiabby.top/2020/07/18/jquery04%E6%93%8D%E4%BD%9CDOM/"/>
    <id>http://www.aiabby.top/2020/07/18/jquery04%E6%93%8D%E4%BD%9CDOM/</id>
    <published>2020-07-18T14:13:14.000Z</published>
    <updated>2020-07-22T03:09:24.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="DOM操作的分三个方面"><a href="#DOM操作的分三个方面" class="headerlink" title="DOM操作的分三个方面"></a>DOM操作的分三个方面</h1><p>DOM Core（核心）、HTML-DOM和CSS-DOM</p><ol><li><p><strong>DOM Core</strong>JavaScript中的getElementById()、getElementsByTagName()、getAttribute()、setAttribute()等方法，都是DOM Core的组成部分。</p><figure class="hljs highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">//使用DOM Core获取表单：</span><br><span class="hljs-built_in">document</span>.getElementsByTagName(<span class="hljs-string">'form'</span>);<br><span class="hljs-comment">//使用DOM Core获取某元素的src属性方法：</span><br>element.getAttribute(<span class="hljs-string">'src'</span>)<br></code></pre></td></tr></table></figure></li><li><p><strong>HTML-DOM</strong>提供一些简明的记号来描述各种HTML元素的属性</p><a id="more"></a><figure class="hljs highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">//使用HTML-DOM来获取表单对象的方法：</span><br><span class="hljs-built_in">document</span>.forms;<br><span class="hljs-comment">//使用HTML-DOM来获取某元素的src属性的方法：</span><br>element.src<br></code></pre></td></tr></table></figure></li><li><p><strong>CSS-DOM</strong>是针对CSS的操作，主要是获取和设置style对象的各种属性</p><figure class="hljs highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">//设置某元素style对象字体颜色的方法；</span><br>element.style.color = <span class="hljs-string">"red"</span><br></code></pre></td></tr></table></figure></li></ol><h2 id="jquery中的DOM操作"><a href="#jquery中的DOM操作" class="headerlink" title="jquery中的DOM操作"></a>jquery中的DOM操作</h2><h3 id="查找节点"><a href="#查找节点" class="headerlink" title="查找节点"></a>查找节点</h3><figure class="hljs highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">//查找元素节点</span><br><span class="hljs-keyword">var</span> $li = $(<span class="hljs-string">'ul li'</span>);<span class="hljs-comment">//查找li;</span><br><span class="hljs-comment">//查找属性节点,利用选择器找到元素后，通过attr()方法来获取他的各种属性的值。</span><br><span class="hljs-keyword">var</span> p_txt = $(<span class="hljs-string">'p'</span>).attr(<span class="hljs-string">'title'</span>);<br><span class="hljs-comment">//attr();接收两个参数，一个参数为获取属性，两个参数为设置属性</span><br></code></pre></td></tr></table></figure><h3 id="创建节点-amp-插入节点"><a href="#创建节点-amp-插入节点" class="headerlink" title="创建节点&amp;插入节点"></a>创建节点&amp;插入节点</h3><figure class="hljs highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">//通过设置html来创建内容(推荐)</span><br>    $(<span class="hljs-string">'div'</span>).html(<span class="hljs-string">'&lt;h2&gt;hello  world&lt;/h2&gt;'</span>);<br>    <span class="hljs-comment">//append追加</span><br>    $(<span class="hljs-string">'div'</span>).append(h1);<br>    <span class="hljs-comment">//写法与append相反</span><br>    h3.appendTo(<span class="hljs-string">'div'</span>);<br>    $(<span class="hljs-string">'div'</span>).prepend(<span class="hljs-string">'&lt;h4&gt;前面追加&lt;/h4&gt;'</span>);<br><span class="hljs-comment">//在元素的后面插入节点</span><br>    $(<span class="hljs-string">'div'</span>).after(<span class="hljs-string">'&lt;p&gt;123&lt;/p&gt;'</span>);<br></code></pre></td></tr></table></figure><h3 id="使用删除节点"><a href="#使用删除节点" class="headerlink" title="使用删除节点"></a>使用删除节点</h3><p>1、<strong>remove()</strong>当某个节点用remove()方法删除后，该节点所包含的所有后代节点将同时被删除。这个方法的返回值是一个指向已被删除的节点的引用，因此可以在以后再使用这些元素。</p><figure class="hljs highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">//删除元素</span><br>   <span class="hljs-keyword">var</span> $(<span class="hljs-string">'li'</span>) = $(<span class="hljs-string">'ul li:eq(1)'</span>).remove();将ul中的第二个li删除<br>   $(<span class="hljs-string">'li'</span>).appendTo(<span class="hljs-string">"ul"</span>);<span class="hljs-comment">//再将删除的元素重新插入</span><br></code></pre></td></tr></table></figure><p>2、<strong>detach()</strong>方法和remove()方法类似，但是所有绑定的事件、附加的数据都会保留下来</p><p>3、<strong>empty()方法</strong>不是删除节点，而是清空节点</p><figure class="hljs highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs undefined">$(<span class="hljs-string">'div'</span>).empty();<span class="hljs-comment">//清空div内所有节点</span><br></code></pre></td></tr></table></figure><h3 id="替换节点"><a href="#替换节点" class="headerlink" title="替换节点"></a>替换节点</h3><p>使用replaceWith()和replaceAll()将匹配的元素替换成指定的元素</p><figure class="hljs highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs javascript">$(<span class="hljs-string">"p"</span>).replaceWith(<span class="hljs-string">"&lt;strong&gt;你喜欢的&lt;/strong&gt;"</span>);<br>$(<span class="hljs-string">"&lt;strong&gt;你喜欢的&lt;/strong&gt;"</span>).replaceAll(<span class="hljs-string">"p"</span>)<br></code></pre></td></tr></table></figure><h3 id="获取属性和设置属性"><a href="#获取属性和设置属性" class="headerlink" title="获取属性和设置属性"></a>获取属性和设置属性</h3><p> 想要替换p的title属性</p><figure class="hljs highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs undefined">$(<span class="hljs-string">"p"</span>).attr(<span class="hljs-string">"title"</span>,<span class="hljs-string">"change title"</span>)<br></code></pre></td></tr></table></figure><h3 id="删除属性"><a href="#删除属性" class="headerlink" title="删除属性"></a>删除属性</h3><p>removeAttr()删除元素的属性</p><h2 id="设置和获取HTML、文本和值"><a href="#设置和获取HTML、文本和值" class="headerlink" title="设置和获取HTML、文本和值"></a>设置和获取HTML、文本和值</h2><ol><li>.html()类似JavaScript中的innerHTML属性，可以用来读取或者设置某个元素中的HTML内容。</li><li>.text()类似innerText属性</li><li>val()方法</li></ol>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;DOM操作的分三个方面&quot;&gt;&lt;a href=&quot;#DOM操作的分三个方面&quot; class=&quot;headerlink&quot; title=&quot;DOM操作的分三个方面&quot;&gt;&lt;/a&gt;DOM操作的分三个方面&lt;/h1&gt;&lt;p&gt;DOM Core（核心）、HTML-DOM和CSS-DOM&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;DOM Core&lt;/strong&gt;JavaScript中的getElementById()、getElementsByTagName()、getAttribute()、setAttribute()等方法，都是DOM Core的组成部分。&lt;/p&gt;
&lt;figure class=&quot;hljs highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;code class=&quot;hljs javascript&quot;&gt;&lt;span class=&quot;hljs-comment&quot;&gt;//使用DOM Core获取表单：&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;hljs-built_in&quot;&gt;document&lt;/span&gt;.getElementsByTagName(&lt;span class=&quot;hljs-string&quot;&gt;&#39;form&#39;&lt;/span&gt;);&lt;br&gt;&lt;span class=&quot;hljs-comment&quot;&gt;//使用DOM Core获取某元素的src属性方法：&lt;/span&gt;&lt;br&gt;element.getAttribute(&lt;span class=&quot;hljs-string&quot;&gt;&#39;src&#39;&lt;/span&gt;)&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;HTML-DOM&lt;/strong&gt;提供一些简明的记号来描述各种HTML元素的属性&lt;/p&gt;&lt;/li&gt;&lt;/ol&gt;
    
    </summary>
    
    
      <category term="前端" scheme="http://www.aiabby.top/categories/%E5%89%8D%E7%AB%AF/"/>
    
      <category term="JQuery" scheme="http://www.aiabby.top/categories/%E5%89%8D%E7%AB%AF/JQuery/"/>
    
    
      <category term="javaScript" scheme="http://www.aiabby.top/tags/javaScript/"/>
    
      <category term="jQuery" scheme="http://www.aiabby.top/tags/jQuery/"/>
    
      <category term="DOM" scheme="http://www.aiabby.top/tags/DOM/"/>
    
  </entry>
  
  <entry>
    <title>vue后台管理系统</title>
    <link href="http://www.aiabby.top/2020/07/16/vue%E5%90%8E%E5%8F%B0%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F/"/>
    <id>http://www.aiabby.top/2020/07/16/vue%E5%90%8E%E5%8F%B0%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F/</id>
    <published>2020-07-16T14:31:24.000Z</published>
    <updated>2020-08-02T11:48:58.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="使用VueElementUI-thinkJS搭建后台管理系统"><a href="#使用VueElementUI-thinkJS搭建后台管理系统" class="headerlink" title="使用VueElementUI+thinkJS搭建后台管理系统"></a>使用VueElementUI+thinkJS搭建后台管理系统</h2><p>后台的核心就是提供数据，封装操作数据库的接口提供给前端调用。使用了Vue-element-admin的模板加thinkJS+Mysql快速的搭建起项目,</p><p>主要练习前端登录验证，数据列表，获取用户信息和elementUi组件。</p><a id="more"></a><h3 id="前端的登录过程"><a href="#前端的登录过程" class="headerlink" title="前端的登录过程"></a>前端的登录过程</h3><h4 id="首先在后台创建接口来处理前端的登录的相关请求。"><a href="#首先在后台创建接口来处理前端的登录的相关请求。" class="headerlink" title="首先在后台创建接口来处理前端的登录的相关请求。"></a>首先在后台创建接口来处理前端的登录的相关请求。</h4><p>1、创建登录接口</p><img src="/2020/07/16/vue后台管理系统/1.png"><p>2、使用JWT保持用户的登录状态，可以实现跨域的身份验证</p><figure class="hljs highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">//在config中配置jwt的加密和cookie</span><br><span class="hljs-attr">jwt</span>:&#123;<br>    <span class="hljs-attr">secret</span>:<span class="hljs-string">"passwordss"</span>,<br>    <span class="hljs-attr">cookie</span>:<span class="hljs-string">'jwt-token'</span>,<span class="hljs-comment">//cookie中字段的设置</span><br>    <span class="hljs-attr">expire</span>:<span class="hljs-number">3000</span><span class="hljs-comment">//秒，口令的有效时间</span><br>  &#125;,<br></code></pre></td></tr></table></figure><figure class="hljs highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><br>checkAuth()&#123;<br>    <span class="hljs-keyword">let</span> token = <span class="hljs-keyword">this</span>.ctx.headers[<span class="hljs-string">'x-token'</span>];<br>    <span class="hljs-comment">//sercet加密，exipre时间，this.config('jwt')获取config中的jwt配置</span><br>    <span class="hljs-keyword">const</span> &#123;secret,cookie,exipre&#125; = <span class="hljs-keyword">this</span>.config(<span class="hljs-string">'jwt'</span>)<br><br>    <span class="hljs-keyword">try</span> &#123;<br>      <span class="hljs-keyword">var</span> tokenObj = token ? jsonwebtoken.verify(token,secret):&#123;&#125;;<br>      <span class="hljs-keyword">this</span>.ctx.state.username = tokenObj.name;<br>    &#125; <span class="hljs-keyword">catch</span> (error) &#123;<br>      <span class="hljs-keyword">return</span> <span class="hljs-keyword">this</span>.authFail()<br>    &#125;<br><br>    <span class="hljs-keyword">if</span>(!tokenObj.name)&#123;<br>      <span class="hljs-keyword">return</span> <span class="hljs-keyword">this</span>.authFail()<br>    &#125;<br><br>    <span class="hljs-keyword">this</span>.updateAuth(token.name)<br>  &#125;<br><span class="hljs-comment">//更新token</span><br>  updateAuth(userName)&#123;<br>    <span class="hljs-keyword">const</span> userInfo = &#123;<br>      <span class="hljs-attr">name</span>:userName<br>    &#125;;<br>    <span class="hljs-comment">// 获取jwt的配置信息</span><br>    <span class="hljs-keyword">const</span> &#123;secret,cookie,expire&#125; = <span class="hljs-keyword">this</span>.config(<span class="hljs-string">'jwt'</span>)<br>    <span class="hljs-keyword">const</span> token = jsonwebtoken.sign(userInfo,secret,&#123;<span class="hljs-attr">expiresIn</span>:expire&#125;);<br>    <span class="hljs-keyword">this</span>.cookie(cookie,token);<br> <span class="hljs-comment">//客户端收到服务器返回的 JWT，可以储存在 Cookie 里面，也可以储存在 localStorage。</span><br><span class="hljs-comment">//此后，客户端每次与服务器通信，都要带上这个 JWT。你可以把它放在 Cookie 里面自动发送，但是这样不能跨域，所以更好的做法是放在 HTTP 请求的头信息Authorization字段里面。</span><br>    <span class="hljs-keyword">this</span>.header(<span class="hljs-string">'authoriztion'</span>,token);<br>    <span class="hljs-keyword">return</span> token;<br>  &#125;<br>&#125;;<br><span class="hljs-comment">// 失败处理</span><br>  authFail()&#123;<br>    <span class="hljs-keyword">this</span>.json(&#123;<span class="hljs-attr">error</span>:<span class="hljs-string">"JWT校验失败"</span>&#125;);<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>  &#125;<br></code></pre></td></tr></table></figure><p>随后在中间件中引入jwt</p><h5 id="JWT原理"><a href="#JWT原理" class="headerlink" title="JWT原理"></a>JWT原理</h5><p>JWT的原理是，服务器认证以后生成一个JSON对象，发回给用户，</p><figure class="hljs highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs json">&#123;<br>    <span class="hljs-attr">"姓名"</span>: <span class="hljs-string">"小刘"</span>,<br>    <span class="hljs-attr">"角色"</span>: <span class="hljs-string">"管理员"</span>,<br>    <span class="hljs-attr">"到期时间"</span>: <span class="hljs-string">"2020年8月1日0点0分"</span><br>&#125;<br></code></pre></td></tr></table></figure><p>以后，用户与服务端通信的时候，都要发回这个 JSON 对象。服务器完全只靠这个对象认定用户身份。为了防止用户篡改数据，服务器在生成这个对象的时候，会加上签名；</p><p>JWT的三个部分依次如下。</p><p>Header(头部)、Payload(负载)、Signature(签名)</p><p>Header.payload.Signature</p><h5 id="JWT的使用方式"><a href="#JWT的使用方式" class="headerlink" title="JWT的使用方式"></a>JWT的使用方式</h5><p>客户端收到服务器返回的JWT，可以存储在Cookie里面，也可以存储在localStorage。</p><p>此后，客户端每次与服务器通信，都要带上这个 JWT。你可以把它放在 Cookie 里面自动发送，但是这样不能跨域，所以更好的做法是放在 HTTP 请求的头信息<code>Authorization</code>字段里面。</p><figure class="hljs highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs undefined"><span class="hljs-symbol">Authorization:</span>Bearer<span class="hljs-params">&lt;token&gt;</span><br></code></pre></td></tr></table></figure><p>另一种方式是，在跨域的时候，JWT就放在POST请求的数据体里面</p><h4 id="进入前端的登录逻辑"><a href="#进入前端的登录逻辑" class="headerlink" title="进入前端的登录逻辑"></a>进入前端的登录逻辑</h4><p>1、在login.vue中修改路由并在router中修改路由，在根目录时跳转到login页</p><p>2、前端中封装axios请求，同时设置baseurl,并设置跨域</p><figure class="hljs highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs javascript">baseURL: process.env.VUE_APP_BASE_API, <span class="hljs-comment">// url = base url + request url</span><br><span class="hljs-comment">//在.env.development中将base设置</span><br>VUE_APP_BASE_API = <span class="hljs-string">'/api'</span><br><span class="hljs-comment">//在vue.config.js中设置代理服务器</span><br><span class="hljs-attr">proxy</span>:&#123;<br>      <span class="hljs-string">'/api'</span>:&#123;<br>        <span class="hljs-attr">target</span>:<span class="hljs-string">'http://127.0.0.1:8360'</span>,<br>        <span class="hljs-attr">pathRewrite</span>:&#123;<br>          <span class="hljs-string">'^/api'</span>:<span class="hljs-string">""</span><br>        &#125;<br>      &#125;<br>    &#125;<br></code></pre></td></tr></table></figure><p>3、编写登录请求</p><figure class="hljs highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">export</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">login</span>(<span class="hljs-params">data</span>) </span>&#123;<br>  <span class="hljs-keyword">return</span> request(&#123;<br>    <span class="hljs-attr">url</span>: <span class="hljs-string">'/user/login/login'</span>,<br>    <span class="hljs-attr">method</span>: <span class="hljs-string">'post'</span>,<br>    data<br>  &#125;)<br>&#125;<br><span class="hljs-keyword">export</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">getInfo</span>(<span class="hljs-params">token</span>) </span>&#123;<br>  <span class="hljs-keyword">return</span> request(&#123;<br>    <span class="hljs-attr">url</span>: <span class="hljs-string">'/admin/index/userInfo'</span>,<br>    <span class="hljs-attr">method</span>: <span class="hljs-string">'get'</span><br>  &#125;)<br>&#125;<br></code></pre></td></tr></table></figure><p>4、Vuex编写获取用户信息函数在数据库中获取用户名头像等</p><p>5、登出仅需删除token</p><figure class="hljs highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// user logout</span><br>logout(&#123; commit, state &#125;) &#123;<br>  <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-built_in">Promise</span>(<span class="hljs-function">(<span class="hljs-params">resolve, reject</span>) =&gt;</span> &#123;<br><br>      removeToken() <span class="hljs-comment">// must remove  token  first</span><br>      resetRouter()<br>      commit(<span class="hljs-string">'RESET_STATE'</span>)<br>      resolve()<br><br>  &#125;)<br>&#125;,<br></code></pre></td></tr></table></figure><h3 id="用户管理获取用户列表删除修改增加等"><a href="#用户管理获取用户列表删除修改增加等" class="headerlink" title="用户管理获取用户列表删除修改增加等"></a>用户管理获取用户列表删除修改增加等</h3><h4 id="后台创建用户管理接口"><a href="#后台创建用户管理接口" class="headerlink" title="后台创建用户管理接口"></a>后台创建用户管理接口</h4>{% asset_img 2.png %}<p>编写从数据库获取用户列表和删除列表等接口</p><h4 id="前端用户列表增删改查"><a href="#前端用户列表增删改查" class="headerlink" title="前端用户列表增删改查"></a>前端用户列表增删改查</h4><p>用户列表使用table组件，模板中匹配对应数据，在点击增加用户时设置跳转路由，跳转到对应增加信息的页面。</p><h4 id="列表分页操作"><a href="#列表分页操作" class="headerlink" title="列表分页操作"></a>列表分页操作</h4><figure class="hljs highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs javascript">&lt;el-pagination<br>      background<br>      layout="prev, pager, next"<br>      :total="total" @current-change="getPageUsers"&gt;<br>    &lt;/el-pagination&gt;<br>//total总条数从后端获取<br>//下一页<br>getPageUsers(page) &#123;<br>        console.log(page);<br>        userlist(&#123;page&#125;).then(response =&gt; &#123;<br>          this.list = response.userlist;<br>          this.total = response.total;<br>          console.log(this.list)<br>          this.listLoading = false<br>        &#125;)<br>      &#125;,<br></code></pre></td></tr></table></figure><h4 id="在删除时通过弹框提示"><a href="#在删除时通过弹框提示" class="headerlink" title="在删除时通过弹框提示"></a>在删除时通过弹框提示</h4><figure class="hljs highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">async</span> del(id) &#123;<br>        <span class="hljs-comment">//弹框</span><br>        <span class="hljs-keyword">this</span>.$confirm(<span class="hljs-string">'是否需要删除$&#123;id&#125;的用户?, 确认删除'</span>, <span class="hljs-string">'提示'</span>, &#123;<br>          <span class="hljs-attr">confirmButtonText</span>: <span class="hljs-string">'确定'</span>,<br>          <span class="hljs-attr">cancelButtonText</span>: <span class="hljs-string">'取消'</span>,<br>          <span class="hljs-attr">type</span>: <span class="hljs-string">'warning'</span><br>        &#125;).then(<span class="hljs-keyword">async</span> () =&gt; &#123;<br>          <span class="hljs-keyword">this</span>.listLoading = <span class="hljs-literal">true</span>;<br>          <span class="hljs-keyword">let</span> res = <span class="hljs-keyword">await</span> deluser(&#123;id&#125;);<br>          <span class="hljs-keyword">this</span>.listLoading = <span class="hljs-literal">false</span>;<br>          <span class="hljs-keyword">this</span>.fetchData()<br>          &#125;);<br>      &#125;<br></code></pre></td></tr></table></figure><h4 id="添加权限操作"><a href="#添加权限操作" class="headerlink" title="添加权限操作"></a>添加权限操作</h4><p>后台编写添加权限接口</p>{% asset_img 3.png %}<p>前台导出调用后台接口的请求给页面调用</p><figure class="hljs highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">export</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">addrule</span>(<span class="hljs-params">data</span>) </span>&#123;<br>  <span class="hljs-keyword">return</span> request(&#123;<br>    <span class="hljs-attr">url</span>:<span class="hljs-string">'/admin/rule/addrule'</span>,<br>    <span class="hljs-attr">method</span>:<span class="hljs-string">'post'</span>,<br>    <span class="hljs-attr">data</span>:data<br>  &#125;)<br>&#125;<br></code></pre></td></tr></table></figure><p>addrule页面中调用方法，当提交表单时</p><figure class="hljs highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs javascript">methods: &#123;<br>      onSubmit() &#123;<br>        <span class="hljs-keyword">this</span>.$message(<span class="hljs-string">'submit!'</span>)<br>        addrule(<span class="hljs-keyword">this</span>.form)<br>        <span class="hljs-keyword">this</span>.$router.push(<span class="hljs-string">'/user/rulelist'</span>)<br>      &#125;,<br>      onCancel() &#123;<br>        <span class="hljs-keyword">this</span>.$message(&#123;<br>          <span class="hljs-attr">message</span>: <span class="hljs-string">'cancel!'</span>,<br>          <span class="hljs-attr">type</span>: <span class="hljs-string">'warning'</span><br>        &#125;)<br>      &#125;<br>    &#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;使用VueElementUI-thinkJS搭建后台管理系统&quot;&gt;&lt;a href=&quot;#使用VueElementUI-thinkJS搭建后台管理系统&quot; class=&quot;headerlink&quot; title=&quot;使用VueElementUI+thinkJS搭建后台管理系统&quot;&gt;&lt;/a&gt;使用VueElementUI+thinkJS搭建后台管理系统&lt;/h2&gt;&lt;p&gt;后台的核心就是提供数据，封装操作数据库的接口提供给前端调用。使用了Vue-element-admin的模板加thinkJS+Mysql快速的搭建起项目,&lt;/p&gt;
&lt;p&gt;主要练习前端登录验证，数据列表，获取用户信息和elementUi组件。&lt;/p&gt;
    
    </summary>
    
    
      <category term="前端" scheme="http://www.aiabby.top/categories/%E5%89%8D%E7%AB%AF/"/>
    
      <category term="Vue" scheme="http://www.aiabby.top/categories/%E5%89%8D%E7%AB%AF/Vue/"/>
    
    
      <category term="框架" scheme="http://www.aiabby.top/tags/%E6%A1%86%E6%9E%B6/"/>
    
      <category term="thinkJS" scheme="http://www.aiabby.top/tags/thinkJS/"/>
    
  </entry>
  
  <entry>
    <title>jQuery03选择器</title>
    <link href="http://www.aiabby.top/2020/07/15/jQuery03%E9%80%89%E6%8B%A9%E5%99%A8/"/>
    <id>http://www.aiabby.top/2020/07/15/jQuery03%E9%80%89%E6%8B%A9%E5%99%A8/</id>
    <published>2020-07-15T09:22:16.000Z</published>
    <updated>2020-07-21T03:41:24.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="jQuery中的选择器"><a href="#jQuery中的选择器" class="headerlink" title="jQuery中的选择器"></a>jQuery中的选择器</h2><figure class="hljs highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs javascript">id选择器   $(<span class="hljs-string">"#dev"</span>);<br>标签选择器  $(<span class="hljs-string">"p"</span>);<br>类选择器    $(<span class="hljs-string">".cls"</span>);<br><span class="hljs-comment">//层次选择器</span><br>$(<span class="hljs-string">"#dv span"</span>);  <span class="hljs-comment">//div这个父级元素中所有的span标签</span><br>$(<span class="hljs-string">"#dv&gt;span"</span>)   <span class="hljs-comment">//div这个父级元素的所有**直接子元素**span标签</span><br>$(<span class="hljs-string">"#dv~span"</span>)   <span class="hljs-comment">//div这个父级元素后面的兄弟元素</span><br></code></pre></td></tr></table></figure><p>原生方式封装$</p><a id="more"></a><figure class="hljs highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> $ = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">selector</span>)</span>&#123;<br>    <span class="hljs-comment">//传入的选择器通过querySelector查找到赋值给domList</span><br>    <span class="hljs-keyword">var</span> domList = <span class="hljs-built_in">document</span>.querySelectorAll(selector);<br>    <span class="hljs-comment">//将选择器domList进行遍历</span><br>    domList.__proto__.html = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">value</span>)</span>&#123;<br>        domList.forEach(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">item,i</span>)</span>&#123;<br>            item.innerHTML = value;<br>        &#125;)<br>    &#125;<br>    <span class="hljs-keyword">return</span> domList;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="基本过滤选择器"><a href="#基本过滤选择器" class="headerlink" title="基本过滤选择器"></a>基本过滤选择器</h3><figure class="hljs highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// :odd奇数选择</span><br>$(<span class="hljs-string">"li:odd"</span>).css(<span class="hljs-string">"background"</span>, <span class="hljs-string">"red"</span>);<br><br><span class="hljs-comment">// :even偶数选择</span><br>$(<span class="hljs-string">"li:even"</span>).css(<span class="hljs-string">"background"</span>, <span class="hljs-string">"green"</span>);<br><br><span class="hljs-comment">// :eq(index)索引选择器</span><br>$(<span class="hljs-string">"ul li:eq(3)"</span>).css(<span class="hljs-string">"font-size"</span>, <span class="hljs-string">"30px"</span>);<span class="hljs-comment">//设置第四个li的字体</span><br><br><span class="hljs-comment">// :lt(index)小于索引</span><br>$(<span class="hljs-string">"li:lt(6)"</span>).css(<span class="hljs-string">"font-size"</span>, <span class="hljs-string">"30px"</span>);<br><br><span class="hljs-comment">// :gt(index)大于该索引</span><br>$(<span class="hljs-string">".ulList1 li:gt(7)"</span>).css(<span class="hljs-string">"font-size"</span>, <span class="hljs-string">"40px"</span>);<br><br><span class="hljs-comment">// :first第一个</span><br>$(<span class="hljs-string">".ulList li:first"</span>).css(<span class="hljs-string">"font-size"</span>, <span class="hljs-string">"40px"</span>);<br><br><span class="hljs-comment">// :last最后一个</span><br>$(<span class="hljs-string">"li:last"</span>).css(<span class="hljs-string">"font-size"</span>, <span class="hljs-string">"40px"</span>);<br></code></pre></td></tr></table></figure><h3 id="筛选选择器"><a href="#筛选选择器" class="headerlink" title="筛选选择器"></a>筛选选择器</h3><figure class="hljs highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs javascript">.prev();      该元素前一个兄弟元素<br>.prevAll();   该元素前面所有兄弟元素<br>.next();      该元素后一个兄弟元素<br>.nextAll();   该元素后面所有兄弟元素<br>.parnet();    该元素的父级元素<br>.find();      后代寻找选择器（要指定参数）例：<br>jqul.find(<span class="hljs-string">"li"</span>).css(<span class="hljs-string">"background"</span>, <span class="hljs-string">"pink"</span>);<br>.sibling();   该元素所有兄弟元素<br></code></pre></td></tr></table></figure><h3 id="通过jQuery选择器来实现一个tab切换组件"><a href="#通过jQuery选择器来实现一个tab切换组件" class="headerlink" title="通过jQuery选择器来实现一个tab切换组件"></a>通过jQuery选择器来实现一个tab切换组件</h3><img src="/2020/07/15/jQuery03选择器/1.png"><p>点击不同按钮切换显示不同的内容：</p><p>设置三个内容隐藏，当点击对应按钮时为按钮和对应的内容添加active样式。</p><img src="/2020/07/15/jQuery03选择器/2.png"><p>使用jquery仅需两行代码即可实现，选中元素样式的添加和兄弟元素的样式删除。</p><h2 id="jquery的样式操作"><a href="#jquery的样式操作" class="headerlink" title="jquery的样式操作"></a>jquery的样式操作</h2><figure class="hljs highlight mel"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs undefined"><span class="hljs-comment">//设置在元素属性上，优先级高</span><br>    $(<span class="hljs-string">'h1'</span>).css(<span class="hljs-string">'background'</span>,<span class="hljs-string">'skyblue'</span>);<br>    <span class="hljs-comment">//一次性设置多个样式,传入一个对象。</span><br>    $(<span class="hljs-string">'h1'</span>).css(&#123;<br>        <span class="hljs-keyword">color</span>:<span class="hljs-string">'red'</span>,<br>        border:<span class="hljs-string">'3px solid #ccc'</span>,<br>        borderRadius:<span class="hljs-string">'10px'</span><span class="hljs-comment">//使用驼峰命名方式，如果要使用border-radius方式需加引号</span><br>    &#125;)<br></code></pre></td></tr></table></figure><p>通过.css()方法设置元素的样式</p><figure class="hljs highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs js">  &lt;style&gt;<br>        .d1&#123;<br>            width: 400px;background-color: skyblue;height: 400px;opacity: 0;<br>        &#125;<br>        .d1.active&#123;opacity: 1&#125;<br>    &lt;/style&gt;<br>    &lt;script src="jquery-1.12.1.min.js"&gt;&lt;/script&gt;<br>&lt;/head&gt;<br>&lt;body&gt;<br>&lt;div class="d1"&gt;&lt;/div&gt;<br>&lt;button&gt;切换显示d1&lt;/button&gt;<br>&lt;script&gt;<br>    $('button').click(function () &#123;<br>        if($('.d1').hasClass('active'))&#123;<br>            $('.d1').removeClass('active')<br>        &#125;else&#123;<br>            $('.d1').addClass('active')<br>        &#125;<br>        // $('.d1').toggleClass('active')<br>    &#125;)<br></code></pre></td></tr></table></figure><p>.hasClass()判断元素是否含有此样式</p><p>.addClass()为元素增加类样式</p><p>.removeClass()为元素删除类样式</p><p>.toggleClass()当元素有此样式时删除，没有时增加</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;jQuery中的选择器&quot;&gt;&lt;a href=&quot;#jQuery中的选择器&quot; class=&quot;headerlink&quot; title=&quot;jQuery中的选择器&quot;&gt;&lt;/a&gt;jQuery中的选择器&lt;/h2&gt;&lt;figure class=&quot;hljs highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;code class=&quot;hljs javascript&quot;&gt;id选择器   $(&lt;span class=&quot;hljs-string&quot;&gt;&quot;#dev&quot;&lt;/span&gt;);&lt;br&gt;标签选择器  $(&lt;span class=&quot;hljs-string&quot;&gt;&quot;p&quot;&lt;/span&gt;);&lt;br&gt;类选择器    $(&lt;span class=&quot;hljs-string&quot;&gt;&quot;.cls&quot;&lt;/span&gt;);&lt;br&gt;&lt;span class=&quot;hljs-comment&quot;&gt;//层次选择器&lt;/span&gt;&lt;br&gt;$(&lt;span class=&quot;hljs-string&quot;&gt;&quot;#dv span&quot;&lt;/span&gt;);  &lt;span class=&quot;hljs-comment&quot;&gt;//div这个父级元素中所有的span标签&lt;/span&gt;&lt;br&gt;$(&lt;span class=&quot;hljs-string&quot;&gt;&quot;#dv&amp;gt;span&quot;&lt;/span&gt;)   &lt;span class=&quot;hljs-comment&quot;&gt;//div这个父级元素的所有**直接子元素**span标签&lt;/span&gt;&lt;br&gt;$(&lt;span class=&quot;hljs-string&quot;&gt;&quot;#dv~span&quot;&lt;/span&gt;)   &lt;span class=&quot;hljs-comment&quot;&gt;//div这个父级元素后面的兄弟元素&lt;/span&gt;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;原生方式封装$&lt;/p&gt;
    
    </summary>
    
    
      <category term="前端" scheme="http://www.aiabby.top/categories/%E5%89%8D%E7%AB%AF/"/>
    
      <category term="JQuery" scheme="http://www.aiabby.top/categories/%E5%89%8D%E7%AB%AF/JQuery/"/>
    
    
      <category term="javaScript" scheme="http://www.aiabby.top/tags/javaScript/"/>
    
      <category term="jQuery" scheme="http://www.aiabby.top/tags/jQuery/"/>
    
      <category term="选择器" scheme="http://www.aiabby.top/tags/%E9%80%89%E6%8B%A9%E5%99%A8/"/>
    
      <category term="样式" scheme="http://www.aiabby.top/tags/%E6%A0%B7%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>Cookie与session</title>
    <link href="http://www.aiabby.top/2020/07/13/cookie%E4%B8%8Esession/"/>
    <id>http://www.aiabby.top/2020/07/13/cookie%E4%B8%8Esession/</id>
    <published>2020-07-13T14:54:31.000Z</published>
    <updated>2020-07-13T15:16:52.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Cookie"><a href="#Cookie" class="headerlink" title="Cookie"></a>Cookie</h2><p>HTTP Cookie（也叫Web Cookie或浏览器Cookie）是服务器发送到用户浏览器并保存在本地的一小块数据，它会在浏览器下次向同一服务器再发起请求时被携带并发送到服务器上。通常，它用于告知服务端两个请求是否来自同一浏览器，如保持用户的登录状态。Cookie使基于<a href="https://link.zhihu.com/?target=https%3A//developer.mozilla.org/en-US/docs/Web/HTTP/Overview%23HTTP_is_stateless_but_not_sessionless" target="_blank" rel="noopener">无状态</a>的HTTP协议记录稳定的状态信息成为了可能。</p><a id="more"></a><p>客户端浏览器会将Cookie存储起来，当再次请求该网站时，浏览器将请求地址和Cookie一同交给服务器，服务器检查Cookie来辨认用户的状态。</p><p>如果没有Cookie，那么在我们购物时会出现这样的场景。</p><p>输入用户名和密码，跳转到主页<br>C：点击添加购物车<br>B：不好意思，你是谁阿？这个添加购物车的按钮，需要获得登录权限之后才能使用<br>C：于是很憋屈地再次输入用户名和密码，打算再点击添加购物车的按钮<br>B：不好意思，你是谁阿？这个添加购物车的按钮，需要获得登录权限之后才能使用<br>C：…….</p><h2 id="session"><a href="#session" class="headerlink" title="session"></a>session</h2><p>session是另一种记录服务器和客户端会话状态的机制。</p><p>当第一次请求时服务器会创建Session返回SessionID给浏览器，当第二次请求时，浏览器会将SessionID传递给服务器进行验证。</p><p><strong>Cookie是客户端保存的用户信息的一种机制，用来记录 用户信息，可以说它是实现Session的一种方式。</strong></p><h2 id="session的实现方式"><a href="#session的实现方式" class="headerlink" title="session的实现方式"></a>session的实现方式</h2><p>1、借助Cookie的sessionId发送的方式</p><p>2、通过LocalStorage的方式</p><p>3、URL回写的方式，这是客户端禁止接收Cookie之后的方法。</p><p>4、隐藏表单字段（hidden）</p><h2 id="Cookie与session的区别"><a href="#Cookie与session的区别" class="headerlink" title="Cookie与session的区别"></a>Cookie与session的区别</h2><ul><li><strong>安全性：</strong> Session 比 Cookie 安全，Session 是存储在服务器端的，Cookie 是存储在客户端的。</li><li><strong>存取值的类型不同</strong>：Cookie 只支持存字符串数据，想要设置其他类型的数据，需要将其转换成字符串，Session 可以存任意数据类型。</li><li><strong>有效期不同：</strong> Cookie 可设置为长时间保持，比如我们经常使用的默认登录功能，Session 一般失效时间较短，客户端关闭（默认情况下）或者 Session 超时都会失效。</li><li><strong>存储大小不同：</strong> 单个 Cookie 保存的数据不能超过 4K，Session 可存储数据远高于 Cookie，但是当访问量过多，会占用过多的服务器资源。</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Cookie&quot;&gt;&lt;a href=&quot;#Cookie&quot; class=&quot;headerlink&quot; title=&quot;Cookie&quot;&gt;&lt;/a&gt;Cookie&lt;/h2&gt;&lt;p&gt;HTTP Cookie（也叫Web Cookie或浏览器Cookie）是服务器发送到用户浏览器并保存在本地的一小块数据，它会在浏览器下次向同一服务器再发起请求时被携带并发送到服务器上。通常，它用于告知服务端两个请求是否来自同一浏览器，如保持用户的登录状态。Cookie使基于&lt;a href=&quot;https://link.zhihu.com/?target=https%3A//developer.mozilla.org/en-US/docs/Web/HTTP/Overview%23HTTP_is_stateless_but_not_sessionless&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;无状态&lt;/a&gt;的HTTP协议记录稳定的状态信息成为了可能。&lt;/p&gt;
    
    </summary>
    
    
      <category term="网络" scheme="http://www.aiabby.top/categories/%E7%BD%91%E7%BB%9C/"/>
    
    
      <category term="Cookie" scheme="http://www.aiabby.top/tags/Cookie/"/>
    
      <category term="session" scheme="http://www.aiabby.top/tags/session/"/>
    
  </entry>
  
  <entry>
    <title>7-7记</title>
    <link href="http://www.aiabby.top/2020/07/07/7-7%E8%AE%B0/"/>
    <id>http://www.aiabby.top/2020/07/07/7-7%E8%AE%B0/</id>
    <published>2020-07-07T13:01:39.000Z</published>
    <updated>2020-07-07T13:13:08.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="rem布局"><a href="#rem布局" class="headerlink" title="rem布局"></a>rem布局</h3><p>新建rem.js文件创建自定义函数</p><figure class="hljs highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs js">(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">resize</span>(<span class="hljs-params"></span>)</span>&#123;<br>        <span class="hljs-keyword">var</span> baseFontSize = <span class="hljs-number">100</span>  <span class="hljs-comment">//设计稿100px相当于1rem</span><br>        <span class="hljs-keyword">var</span> designWidth = <span class="hljs-number">750</span>;<span class="hljs-comment">//设计稿宽度</span><br>        <span class="hljs-keyword">var</span> width = <span class="hljs-built_in">window</span>.innerWidth;<span class="hljs-comment">//屏幕宽度</span><br>        <span class="hljs-keyword">var</span> currentFontSize = (width/designWidth) * <span class="hljs-number">100</span>;<br>        <span class="hljs-built_in">document</span>.querySelector(<span class="hljs-string">'html'</span>).style.fontSize = currentFontSize + <span class="hljs-string">'px'</span><br>    &#125;<br><br><br><br><br>    <span class="hljs-built_in">window</span>.onresize = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;<br>        resize()<br>    &#125;<br>    <span class="hljs-built_in">document</span>.addEventListener(<span class="hljs-string">'DOMContentLoaded'</span>,resize)<br>&#125;())<br></code></pre></td></tr></table></figure><h3 id="关于mockjs的使用"><a href="#关于mockjs的使用" class="headerlink" title="关于mockjs的使用"></a>关于mockjs的使用</h3><p>当我们没有得到从后端传递来的数据时，可以在了解数据的类型之后，通过Mockjs在前端进行模拟数据的获取。</p><p>首先安装Mockjs</p><p>在api文件夹下新建数据文件夹（ServerData）在文件夹下创建数据文件position.js</p><p>在mockjs文件中首先导入Mockjs</p><p>导入postion文件</p><figure class="hljs highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs undefined"><span class="hljs-selector-tag">Mock</span><span class="hljs-selector-class">.mock</span>(<span class="hljs-string">'/api/posi'</span>,position)<br></code></pre></td></tr></table></figure><p>此时我们获取数据的接口为</p><figure class="hljs highlight coffeescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs undefined"><span class="hljs-keyword">export</span> const getPosiData = <span class="hljs-function"><span class="hljs-params">()</span>=&gt;</span>&#123;<br><span class="hljs-keyword">return</span> axios.request(&#123;<br> url:<span class="hljs-string">'posi'</span>,<br> method:<span class="hljs-string">'get'</span><br>&#125;)<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;rem布局&quot;&gt;&lt;a href=&quot;#rem布局&quot; class=&quot;headerlink&quot; title=&quot;rem布局&quot;&gt;&lt;/a&gt;rem布局&lt;/h3&gt;&lt;p&gt;新建rem.js文件创建自定义函数&lt;/p&gt;
&lt;figure class=&quot;hljs highlight js&quot;&gt;&lt;t
      
    
    </summary>
    
    
      <category term="前端" scheme="http://www.aiabby.top/categories/%E5%89%8D%E7%AB%AF/"/>
    
      <category term="rem" scheme="http://www.aiabby.top/categories/%E5%89%8D%E7%AB%AF/rem/"/>
    
    
      <category term="模拟数据" scheme="http://www.aiabby.top/tags/%E6%A8%A1%E6%8B%9F%E6%95%B0%E6%8D%AE/"/>
    
  </entry>
  
  <entry>
    <title>7-2周记</title>
    <link href="http://www.aiabby.top/2020/07/02/7-2%E5%91%A8%E8%AE%B0/"/>
    <id>http://www.aiabby.top/2020/07/02/7-2%E5%91%A8%E8%AE%B0/</id>
    <published>2020-07-02T01:22:55.000Z</published>
    <updated>2020-07-02T02:03:58.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="层叠"><a href="#层叠" class="headerlink" title="层叠"></a>层叠</h3><p>对统一元素应用多个规则（样式）时，可能会包含冲突的声明，类似我们通过标签选择器，id选择器，类选择器分别为h1，指定不同字体，那么这个h1最终会采用哪种字体呢。</p><p>层叠就这一系列的规则，它决定了当不同选择器为元素设置样式时如何解决冲突。</p><a id="more"></a><p>层叠会依据三种条件来解决冲突，</p><ol><li>样式表的来源：样式是从哪里来的，包含我们自己写的样式和浏览器的样式等。</li><li>选择器的优先级：在多种选择器中，哪种选择器更重要。</li><li>源码的顺序：样式在样式表中出现的顺序。</li></ol><p>浏览器的默认样式被称作用户代理样式，也就是说让我们不设置样式时，浏览器会自动给元素添加一些样式，它的优先级很低，当我们设置样式时，会覆盖掉浏览器样式。</p><p>同时浏览器将优先级分为两部分：HTML的行内样式和选择器样式。如果使用HTML的style属性写样式，会覆盖掉任何来自样式表的样式</p><p>选择器的优先级</p><ul><li>id选择器的优先级要大于类选择器，那么当我们使用id选择器为h1设置颜色为红色，类选择器设置为黑色，浏览器就会将h1设置为红色，因为id选择器的优先级要高</li><li>如果选择器的id选择器更多，比如h1设置了三个id选择器，那么使用两个id选择器的样式会胜出</li><li>如果id选择器的数量一致，那么拥有更多类选择器的样式会胜出。</li></ul><p><strong>如果我们在CSS中写了一个声明，但是没有生效，一般就是被更高的优先级规则覆盖了，所以在大型项目中，通常让优先级尽可能低，这样当我们需要覆盖一些样式时才有更多的选择空间</strong></p><p>处理层叠的一些经验</p><ol><li>尽量不使用ID选择器，就算只使用一个ID也会大幅提高有心计，当需要覆盖这个优先级时，通常找不到另一个有意义的ID</li><li>尽量不适用！imporant，它比ID更难覆盖。</li></ol>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;层叠&quot;&gt;&lt;a href=&quot;#层叠&quot; class=&quot;headerlink&quot; title=&quot;层叠&quot;&gt;&lt;/a&gt;层叠&lt;/h3&gt;&lt;p&gt;对统一元素应用多个规则（样式）时，可能会包含冲突的声明，类似我们通过标签选择器，id选择器，类选择器分别为h1，指定不同字体，那么这个h1最终会采用哪种字体呢。&lt;/p&gt;
&lt;p&gt;层叠就这一系列的规则，它决定了当不同选择器为元素设置样式时如何解决冲突。&lt;/p&gt;
    
    </summary>
    
    
      <category term="前端" scheme="http://www.aiabby.top/categories/%E5%89%8D%E7%AB%AF/"/>
    
      <category term="CSS" scheme="http://www.aiabby.top/categories/%E5%89%8D%E7%AB%AF/CSS/"/>
    
    
      <category term="层叠" scheme="http://www.aiabby.top/tags/%E5%B1%82%E5%8F%A0/"/>
    
  </entry>
  
  <entry>
    <title>6-19CSS相关问题</title>
    <link href="http://www.aiabby.top/2020/06/19/6-19/"/>
    <id>http://www.aiabby.top/2020/06/19/6-19/</id>
    <published>2020-06-19T02:42:30.000Z</published>
    <updated>2020-06-21T14:48:08.000Z</updated>
    
    <content type="html"><![CDATA[<ul><li><p>text-indent:-999px;当做一个a链接的图片按钮时，可以用于在添加完图片时将原本的字隐藏，只显示图片作为链接按钮</p><img src="/2020/06/19/6-19/1.png"><a id="more"></a></li><li><p>content用于在元素的::before和::after伪元素中插入内容。例如在自定义复选框样式时，</p><img src="/2020/06/19/6-19/2.png"><p>使用label覆盖input，设置label的样式通过content设置在点击状态时显示背景图片</p></li><li><p>label标签表示用户界面中某个元素的说明。将一个 <code>&lt;label&gt;</code> 和一个 <a href="https://developer.mozilla.org/zh-CN/docs/Web/HTML/Element/input" target="_blank" rel="noopener">``</a> 元素相关联主要有这些优点：</p><ul><li>标签文本不仅与其相应的文本输入元素在视觉上相关联，程序中也是如此。 这意味着，当用户聚焦到这个表单输入元素时，屏幕阅读器可以读出标签，让使用辅助技术的用户更容易理解应输入什么数据。</li><li>你可以点击关联的标签来聚焦或者激活这个输入元素，就像直接点击输入元素一样。这扩大了元素的可点击区域，让包括使用触屏设备在内的用户更容易激活这个元素。</li></ul><p>将一个 <code>&lt;label&gt;</code> 和一个 <code>&lt;input&gt;</code> 元素匹配在一起，你需要给 <code>&lt;input&gt;</code> 一个 <code>id</code> 属性。而 <code>&lt;label&gt;</code> 需要一个 <code>for</code> 属性，其值和  <code>&lt;input&gt;</code> 的 <code>id</code> 一样。</p><p>另外，你也可以将 <code>&lt;input&gt;</code> 直接放在 <code>&lt;label&gt;</code> 里，此时则不需要 <code>for</code> 和 <code>id</code> 属性，因为关联已隐含存在</p></li><li><p>给父元素overflow：hidden；zoom：1；清除浮动。</p></li><li><p>移动端布局</p><ol><li>做移动端的两种方式，一个项目分为PC端适配和移动端布局，判断设备进行切换</li><li>一种PC移动端同时适配的响应式页面，适应pc页面和移动端页面，</li><li>@media screen and(max-width:300px)当页面宽度小于300像素时，使用此内容中的样式</li><li>宽度设为100%，盒子自动继承父盒子宽度</li></ol><p>轮播图</p><figure class="hljs highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs css">&lt;div class="btnList"&gt;<br>            &lt;div class="btn pre"&gt;&lt;&lt;/div&gt;<br>            &lt;div class="btn next"&gt;&gt;&lt;/div&gt;<br>        &lt;/div&gt;<br>.swiper .btn.pre&#123;width: 100px;height: 60px;line-height: 60px;text-align: center;background-color: rgba(0,0, 0, 0.6);color: #ffffff;position: absolute;top: calc(50% - 30px);font-size: 35px;&#125;<br><br>.swiper .btn.next&#123;width: 100px;height: 60px;line-height: 60px;text-align: center;background-color: rgba(0,0, 0, 0.6);color: #ffffff;position: absolute;right: 0;;top: calc(50% - 30px);font-size: 35px;&#125;<br></code></pre></td></tr></table></figure><figure class="hljs highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> preBtn = <span class="hljs-built_in">document</span>.querySelector(<span class="hljs-string">".swiper .pre"</span>);<br>        <span class="hljs-keyword">var</span> nextBtn = <span class="hljs-built_in">document</span>.querySelector(<span class="hljs-string">".swiper .next"</span>);<br>        <span class="hljs-keyword">var</span> imgListDivs = <span class="hljs-built_in">document</span>.querySelectorAll(<span class="hljs-string">".swiper .imgItems"</span>);<br>        <span class="hljs-comment">// 图片数组的索引</span><br>        <span class="hljs-keyword">var</span> currentImg = <span class="hljs-number">0</span>;<br>        <span class="hljs-comment">// 点击事件</span><br>        nextBtn.onclick=<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;<br>            currentImg = currentImg + <span class="hljs-number">1</span>;<br>            <span class="hljs-comment">// 点击到最后一张图片，回到起点</span><br>            <span class="hljs-keyword">if</span>(currentImg&gt;=imgListDivs.length)&#123;<br>                currentImg= <span class="hljs-number">0</span>;<br>            &#125;<br>            <span class="hljs-comment">// 初始化，将所有的img列表的active去掉</span><br>            imgListDivs.forEach(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">item,i</span>)</span>&#123;<br>                item.classList.remove(<span class="hljs-string">"active"</span>)<br>            &#125;)<br>            <span class="hljs-comment">// 点击后索引加1，active移动到下一个元素显示下一张图片</span><br>            imgListDivs[currentImg].classList.add(<span class="hljs-string">"active"</span>)<br>            <br>        &#125;<br>        preBtn.onclick=<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;<br>            currentImg = currentImg - <span class="hljs-number">1</span>;<br>            <span class="hljs-keyword">if</span>(currentImg&lt;<span class="hljs-number">0</span>)&#123;<br>                currentImg= imgListDivs.length<span class="hljs-number">-1</span>;<br>            &#125;<br>            <span class="hljs-comment">// 初始化，将所有的img列表的active去掉</span><br>            imgListDivs.forEach(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">item,i</span>)</span>&#123;<br>                item.classList.remove(<span class="hljs-string">"active"</span>)<br>            &#125;)<br>            imgListDivs[currentImg].classList.add(<span class="hljs-string">"active"</span>)<br>            <br>        &#125;<br></code></pre></td></tr></table></figure></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;ul&gt;
&lt;li&gt;&lt;p&gt;text-indent:-999px;当做一个a链接的图片按钮时，可以用于在添加完图片时将原本的字隐藏，只显示图片作为链接按钮&lt;/p&gt;
&lt;img src=&quot;/2020/06/19/6-19/1.png&quot;&gt;&lt;/li&gt;&lt;/ul&gt;
    
    </summary>
    
    
      <category term="前端" scheme="http://www.aiabby.top/categories/%E5%89%8D%E7%AB%AF/"/>
    
      <category term="CSS" scheme="http://www.aiabby.top/categories/%E5%89%8D%E7%AB%AF/CSS/"/>
    
    
      <category term="CSS3" scheme="http://www.aiabby.top/tags/CSS3/"/>
    
  </entry>
  
  <entry>
    <title>vue项目问题</title>
    <link href="http://www.aiabby.top/2020/06/01/vue%E9%A1%B9%E7%9B%AE%E9%97%AE%E9%A2%98/"/>
    <id>http://www.aiabby.top/2020/06/01/vue%E9%A1%B9%E7%9B%AE%E9%97%AE%E9%A2%98/</id>
    <published>2020-06-01T15:42:10.000Z</published>
    <updated>2020-06-01T15:52:56.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="vue踩坑"><a href="#vue踩坑" class="headerlink" title="vue踩坑"></a>vue踩坑</h2><p>今天在执行项目时碰到这样的问题首先是项目</p><img src="/2020/06/01/vue项目问题/7.png"><a id="more"></a><p>这是一个点歌系统，后端node+express那么这个表单在上传文件时也就是歌曲时。</p><img src="/2020/06/01/vue项目问题/3.png"><p>报了这样一个错，检查跨域并没有问题，项目本身也不会有问题，毕竟早就完美运行过了</p><p>更换浏览器发现同样错误</p><img src="/2020/06/01/vue项目问题/8.png"><p>当发送请求时</p><img src="/2020/06/01/vue项目问题/88.png"><p>这个fs引起了注意，最终发现谷歌浏览器最近的MP3压缩格式后缀改成了mpeg。</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;vue踩坑&quot;&gt;&lt;a href=&quot;#vue踩坑&quot; class=&quot;headerlink&quot; title=&quot;vue踩坑&quot;&gt;&lt;/a&gt;vue踩坑&lt;/h2&gt;&lt;p&gt;今天在执行项目时碰到这样的问题首先是项目&lt;/p&gt;
&lt;img src=&quot;/2020/06/01/vue项目问题/7.png&quot;&gt;
    
    </summary>
    
    
      <category term="前端" scheme="http://www.aiabby.top/categories/%E5%89%8D%E7%AB%AF/"/>
    
      <category term="Vue" scheme="http://www.aiabby.top/categories/%E5%89%8D%E7%AB%AF/Vue/"/>
    
    
      <category term="javaScript" scheme="http://www.aiabby.top/tags/javaScript/"/>
    
      <category term="框架" scheme="http://www.aiabby.top/tags/%E6%A1%86%E6%9E%B6/"/>
    
      <category term="bug" scheme="http://www.aiabby.top/tags/bug/"/>
    
  </entry>
  
  <entry>
    <title>微信小程序</title>
    <link href="http://www.aiabby.top/2020/05/20/%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F/"/>
    <id>http://www.aiabby.top/2020/05/20/%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F/</id>
    <published>2020-05-20T04:38:07.000Z</published>
    <updated>2020-05-20T04:38:40.000Z</updated>
    
    <content type="html"><![CDATA[<ol><li><p>x小程序没有DOM对象，一切基于组件化</p></li><li><p>小程序的4个重要文件</p><p>wxml—&gt;view结构—&gt; 类似HTML</p><p>wxss—&gt;view样式—-&gt; 类似CSS</p><p>js</p><p>json—&gt;数据—–&gt;json文件</p><a id="more"></a></li><li><p>需要储备的知识</p><p>理解事件机制</p><p>组件化</p><p>数据绑定</p><p>Flex布局</p><p>移动端适配</p></li></ol><p>根目录下的App()表示注册一个小程序 必须在app.js中调用且只能调用一次</p><p>根目录下的app.json文件用来对微信小程序进行全局配置，包含文件的路径，底部tab栏，默认窗口表现等。</p><p>根目录下的app.wxss中可以看到采用了flex布局。</p><h2 id="微信中的事件"><a href="#微信中的事件" class="headerlink" title="微信中的事件"></a>微信中的事件</h2><p>事件分为冒泡事件和非冒泡事件：</p><ol><li>冒泡事件：使用<code>bind</code>当一个组件上的事件被触发后，该事件会向父节点传递。</li><li>非冒泡事件：使用<code>catch</code>当一个组件上的事件被触发后，该事件不会向父节点传递。</li></ol><h2 id="列表渲染"><a href="#列表渲染" class="headerlink" title="列表渲染"></a>列表渲染</h2><figure class="hljs highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs js">&lt;block wx:for="&#123;&#123;content&#125;&#125;" wx:key="index"&gt;<br>&lt;view class="content"&gt;<br>&lt;view class="name"&gt;姓名：&#123;&#123;item.name&#125;&#125;&lt;/view&gt;<br>&lt;view class="phone"&gt;手机号：&#123;&#123;item.phone&#125;&#125;&lt;/view&gt;<br>&lt;/view&gt;<br>&lt;/block&gt;<br>//设置通信列表数据，content为列表名，name和phone为json数据的一个key<br>data: &#123;<br>    //设置通信列表数据<br>    content:[<br>      &#123;name:"qi", phone:"12344444"&#125;,<br>      &#123;name:"qi1", phone:"12344444"&#125;,<br>      &#123;name:"qi2", phone:"12344444"&#125;,<br>      &#123;name:"qi3", phone:"12344444"&#125;,<br>      &#123;name:"qi4", phone:"12344444"&#125;,<br>    ]<br>  &#125;,<br></code></pre></td></tr></table></figure><ul><li><p>页面跳转：</p><figure class="hljs highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs undefined"><span class="hljs-selector-tag">wx</span><span class="hljs-selector-class">.navigateTo</span>(&#123;<br>  <span class="hljs-attribute">url</span>:<span class="hljs-string">'test/'</span>,<br>  events:&#123;&#125;,<br>  <span class="hljs-selector-tag">success</span>: <span class="hljs-selector-tag">function</span>(<span class="hljs-selector-tag">data</span>)&#123;<br>    <br>  &#125;<br>&#125;)<br></code></pre></td></tr></table></figure></li><li><p>swiper组件</p><figure class="hljs highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">view</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"container"</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">swiper</span> <span class="hljs-attr">indicator-dots</span>=<span class="hljs-string">"&#123;&#123;indicatorDots&#125;&#125;"</span><span class="hljs-attr">autoplay</span>=<span class="hljs-string">"&#123;&#123;autoplay&#125;&#125;"</span> <span class="hljs-attr">interval</span>=<span class="hljs-string">"&#123;&#123;interval&#125;&#125;"</span> <span class="hljs-attr">duration</span>=<span class="hljs-string">"&#123;&#123;duration&#125;&#125;"</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">swiper-item</span> <span class="hljs-attr">wx:for</span>=<span class="hljs-string">"&#123;&#123;background&#125;&#125;"</span> <span class="hljs-attr">wx:key</span>=<span class="hljs-string">"index"</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">image</span> <span class="hljs-attr">src</span>=<span class="hljs-string">"&#123;&#123;item&#125;&#125;"</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"swiper-item"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">image</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">swiper-item</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">swiper</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">view</span>&gt;</span><br></code></pre></td></tr></table></figure><figure class="hljs highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs css">、.container&#123;<br>  justify-content: start;<br>    //发现swiper一直在container中居中显示，是container有一个padding200rpx的样式<br>  padding: 0;<br>&#125;<br>swiper&#123;<br>  width: 100%;<br>  height: 400rpx;<br>&#125;<br>.swiper-item&#123;<br>  width: 100%;<br>  height: 100%;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>列表循环</p><figure class="hljs highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">view</span> <span class="hljs-attr">wx:for</span>=<span class="hljs-string">"&#123;&#123;array&#125;&#125;"</span>&gt;</span><br>  &#123;&#123;index&#125;&#125;: &#123;&#123;item.message&#125;&#125;<br><span class="hljs-tag">&lt;/<span class="hljs-name">view</span>&gt;</span><br>//使用wx:for-item 可以指定数组当前元素的变量名<br>//使用 wx:for-index 可以指定数组当前下标的变量名<br></code></pre></td></tr></table></figure></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;ol&gt;
&lt;li&gt;&lt;p&gt;x小程序没有DOM对象，一切基于组件化&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;小程序的4个重要文件&lt;/p&gt;
&lt;p&gt;wxml—&amp;gt;view结构—&amp;gt; 类似HTML&lt;/p&gt;
&lt;p&gt;wxss—&amp;gt;view样式—-&amp;gt; 类似CSS&lt;/p&gt;
&lt;p&gt;js&lt;/p&gt;
&lt;p&gt;json—&amp;gt;数据—–&amp;gt;json文件&lt;/p&gt;&lt;/li&gt;&lt;/ol&gt;
    
    </summary>
    
    
      <category term="微信小程序" scheme="http://www.aiabby.top/categories/%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F/"/>
    
    
      <category term="小程序" scheme="http://www.aiabby.top/tags/%E5%B0%8F%E7%A8%8B%E5%BA%8F/"/>
    
  </entry>
  
</feed>
