<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Yo_huanjun</title>
  
  <subtitle>Practice makes perfect.</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://www.lhjailj.top/"/>
  <updated>2021-03-21T12:14:09.572Z</updated>
  <id>http://www.lhjailj.top/</id>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>计算机是如何读懂我们的程序的呢</title>
    <link href="http://www.lhjailj.top/2021/03/21/2021-3-21-%E8%AE%A1%E7%AE%97%E6%9C%BA%E6%98%AF%E5%A6%82%E4%BD%95%E8%AF%BB%E6%87%82%E6%88%91%E4%BB%AC%E7%9A%84%E7%A8%8B%E5%BA%8F%E7%9A%84%E5%91%A2/"/>
    <id>http://www.lhjailj.top/2021/03/21/2021-3-21-%E8%AE%A1%E7%AE%97%E6%9C%BA%E6%98%AF%E5%A6%82%E4%BD%95%E8%AF%BB%E6%87%82%E6%88%91%E4%BB%AC%E7%9A%84%E7%A8%8B%E5%BA%8F%E7%9A%84%E5%91%A2/</id>
    <published>2021-03-21T11:30:15.000Z</published>
    <updated>2021-03-21T12:14:09.572Z</updated>
    
    <content type="html"><![CDATA[<p>事实上当我们上第一节编程课时会了解到，我们所学的语言是高级语言，计算机并不能看懂我们的程序，我们需要编译器进行编译，计算机读取编译器编译后的结果，并完成我们想要执行的操作，但是当我们第一次使用ide当我们在文本中敲上正确的语法像这样</p><figure class="hljs highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java">#include &lt;stdio.h&gt;<br>  <br> int main() &#123;<br>printf("Hello World!")<br>&#125;<br></code></pre></td></tr></table></figure><p>当我们按下运行，我们的工作被保存了，结果被输出了，我们得到了实时的结果。</p><p>但是事实上计算机读取当的文件是这样的</p><p>11100101100010010100100001010101</p><p>他们供计算机读取的列表，由二进制编写，也叫做机器码，我们经常可以看到计算机只能读取0，和1，为什么计算机只能读取这样的程序呢？</p><p>涉及到计算机的核心，处理器，<code>CPU</code>，处理器已经内置了处理这些指令的电路，只有当相应的指令被输入时。正确的电路才能连接在一起，完成对应的操作。指令中的某些0和1会引起某些晶体管的打开或关闭，最终将正确的电路连接到一起。</p><p>所以一开始我们的定义变量，if条件，循环，和函数，将转变为对应的机器指令。传达给计算机，这些高阶的结果可以让我们更轻松的思考程序。</p><p>但是如何将我们的一些程序翻译成计算机可读的机器语言，我们可以举简单的例子</p><figure class="hljs highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>  <span class="hljs-keyword">int</span> x;<br>  x = <span class="hljs-number">3</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>我们定义一个变量x，并对其赋值为3，它看起来有某种结构，但是对于计算机，只是毫无意义的字符序列。只是文本，将源码传入编译器。</p><p>编译器首先将文本分为单独的标记，有点像编译器在理解程序中的单词含义，接着标记被分为多层次的结构，就是所谓的解析树</p><img src="/2021/03/21/2021-3-21-计算机是如何读懂我们的程序的呢/1.png"><p>接着编译器记录程序的上下文，包括变量和函数的名字，最后一步遍历树，转译成机器码</p><p>转译成机机器码确实有点难读和解释</p><img src="/2021/03/21/2021-3-21-计算机是如何读懂我们的程序的呢/2.jpg"><p>实际上读起来还很难，将其写成汇编代码</p><img src="/2021/03/21/2021-3-21-计算机是如何读懂我们的程序的呢/3.jpg"><img src="/2021/03/21/2021-3-21-计算机是如何读懂我们的程序的呢/4.jpg"><p>这里的步骤记录了这块内存中创建了变量x，并给他赋值为3，简单的赋值语句就这样完成了，但是条件语句与循环就变得没那么简单，因为并没有等价的语句，而要用现有指令来模拟它们的行为，在if语句中让我们执行下面这块代码</p><img src="/2021/03/21/2021-3-21-计算机是如何读懂我们的程序的呢/5.jpg"><p>只有当条件为真时执行这段代码，否则跳过这段代码，在汇编中，块中代码可以正常转译，但这之前还有条件指令<code>cmpl</code>以及下面的条件跳转指令<code>jg</code>，处理器根据前一条指令的结果，知道是否应该执行此跳转，该指令在处理器中临时设置一些标志，这样就可以记住一些结果当执行到跳转时用来判断，如果不符合跳出执行，执行器就会忽略该跳出指令，条件继续符合，继续执行块中的代码</p><p>但是有一个问题，如果在一台电脑编译程序，复制到另一台电脑并尝试运行它，可能不会工作，因为不同电脑可能有不同操作系统和不同的处理器，处理器可能使用了不同的机器指令！！！！</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;事实上当我们上第一节编程课时会了解到，我们所学的语言是高级语言，计算机并不能看懂我们的程序，我们需要编译器进行编译，计算机读取编译器编译后的结果，并完成我们想要执行的操作，但是当我们第一次使用ide当我们在文本中敲上正确的语法像这样&lt;/p&gt;
&lt;figure class=&quot;h
      
    
    </summary>
    
    
      <category term="计算机" scheme="http://www.lhjailj.top/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA/"/>
    
    
  </entry>
  
  <entry>
    <title>理解理解Vue的mixin</title>
    <link href="http://www.lhjailj.top/2021/03/17/2021-3-17-%E7%90%86%E8%A7%A3%E7%90%86%E8%A7%A3Vue%E7%9A%84mixin/"/>
    <id>http://www.lhjailj.top/2021/03/17/2021-3-17-%E7%90%86%E8%A7%A3%E7%90%86%E8%A7%A3Vue%E7%9A%84mixin/</id>
    <published>2021-03-17T14:21:57.000Z</published>
    <updated>2021-03-17T14:52:25.677Z</updated>
    
    <content type="html"><![CDATA[<p>mixin翻译为混入，创建它时也是创建一个对象，他也有data，也有生命周期，也有methods方法，所以根据官网的说法，他可以灵活的分发Vue组件中的可复用功能，当组件使用混入对象时，所有的对象选项都将被混合进入该组件本身的选项，也就是把mixin中的data与组件实例的对象混合在一起，那么当两者之间有重复时，会以特定的方式进行合并。</p><p>如果data中的变量与mixin中的变量冲突（也就是重复），那么以data中的变量优先，如果没有在data中发现该变量，则选择mixin中的变量</p><p>生命周期将会合并为一个数组，如果发生冲突，mixin先执行，实例后执行</p><p>methods，coimponent,directives将会合并为一个对象，如果出现冲突，取组件实例中的方法</p><a id="more"></a><figure class="hljs highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> myMixin = &#123;<br>  <span class="hljs-attr">methods</span>: &#123;<br>    foo() &#123;<br>      <span class="hljs-built_in">console</span>.log(<span class="hljs-string">'foo'</span>)<br>    &#125;,<br>    conflicting() &#123;<br>      <span class="hljs-built_in">console</span>.log(<span class="hljs-string">'from mixin'</span>)<br>    &#125;<br>  &#125;<br>&#125;<br><br><span class="hljs-keyword">const</span> app = Vue.createApp(&#123;<br>  <span class="hljs-attr">mixins</span>: [myMixin],<br>  <span class="hljs-attr">methods</span>: &#123;<br>    bar() &#123;<br>      <span class="hljs-built_in">console</span>.log(<span class="hljs-string">'bar'</span>)<br>    &#125;,<br>    conflicting() &#123;<br>      <span class="hljs-built_in">console</span>.log(<span class="hljs-string">'from self'</span>)<br>    &#125;<br>  &#125;<br>&#125;)<br><br><span class="hljs-keyword">const</span> vm = app.mount(<span class="hljs-string">'#mixins-basic'</span>)<br><br>vm.foo() <span class="hljs-comment">// =&gt; "foo"</span><br>vm.bar() <span class="hljs-comment">// =&gt; "bar"</span><br>vm.conflicting() <span class="hljs-comment">// =&gt; "from self"</span><br></code></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;mixin翻译为混入，创建它时也是创建一个对象，他也有data，也有生命周期，也有methods方法，所以根据官网的说法，他可以灵活的分发Vue组件中的可复用功能，当组件使用混入对象时，所有的对象选项都将被混合进入该组件本身的选项，也就是把mixin中的data与组件实例的对象混合在一起，那么当两者之间有重复时，会以特定的方式进行合并。&lt;/p&gt;
&lt;p&gt;如果data中的变量与mixin中的变量冲突（也就是重复），那么以data中的变量优先，如果没有在data中发现该变量，则选择mixin中的变量&lt;/p&gt;
&lt;p&gt;生命周期将会合并为一个数组，如果发生冲突，mixin先执行，实例后执行&lt;/p&gt;
&lt;p&gt;methods，coimponent,directives将会合并为一个对象，如果出现冲突，取组件实例中的方法&lt;/p&gt;
    
    </summary>
    
    
      <category term="前端" scheme="http://www.lhjailj.top/categories/%E5%89%8D%E7%AB%AF/"/>
    
      <category term="Vue" scheme="http://www.lhjailj.top/categories/%E5%89%8D%E7%AB%AF/Vue/"/>
    
    
      <category term="slot" scheme="http://www.lhjailj.top/tags/slot/"/>
    
  </entry>
  
  <entry>
    <title>2021-3-14-Vueslot简析</title>
    <link href="http://www.lhjailj.top/2021/03/14/2021-3-14-Vueslot%E7%AE%80%E6%9E%90/"/>
    <id>http://www.lhjailj.top/2021/03/14/2021-3-14-Vueslot%E7%AE%80%E6%9E%90/</id>
    <published>2021-03-14T12:59:03.000Z</published>
    <updated>2021-03-18T01:14:27.705Z</updated>
    
    <content type="html"><![CDATA[<p>关于slot，在组件化的模式下，通常遇到一个会多次使用的元素，例如封装一个后台管理系统常需要用到的表格，弹窗等等组件，但是通常在复用性高的情况下又有略微的不同，例如一个弹窗，有的情况可能需要仅仅展示一个图片一个按钮，有时又需要展示出这个弹窗的标题，那么根据不同的情况，我们会在这个组件中穿插不同的元素，这个时候就需要用到插槽。</p><a id="more"></a><img src="/2021/03/14/2021-3-14-Vueslot简析/1.png"><p>例：我们定义了一个子组件<code>myform</code>，并且在父组件中调用了两次，但是第一次我们需要在input下面放上点击按钮，而第二次并不需要，这个时候slot就派上了用场</p><figure class="hljs highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> app = Vue.createApp(&#123;<br>      data() &#123;<br>        <span class="hljs-keyword">return</span> &#123;<br>          <span class="hljs-attr">needButton</span>: <span class="hljs-string">'我需要一个按钮'</span>,<br>          <span class="hljs-attr">noNeed</span>: <span class="hljs-string">'不太需要'</span><br>        &#125;<br>      &#125;,<br>      <span class="hljs-attr">template</span>: <span class="hljs-string">`<br>        &lt;myform :text="needButton"&gt;<br>          &lt;button&gt;按钮&lt;/button&gt;<br>          &lt;hr /&gt;<br>        &lt;/myform&gt;<br>        &lt;myform :text="noNeed" /&gt;<br>      `</span><br>    &#125;)<br><br>    app.component(<span class="hljs-string">'myform'</span>, &#123;<br>      <span class="hljs-attr">props</span>: [<span class="hljs-string">'text'</span>],<br>      <span class="hljs-attr">methods</span>: &#123;<br>        handleClick() &#123;<br>          alert(<span class="hljs-number">123</span>)<br>        &#125;<br>      &#125;,<br>      <span class="hljs-attr">template</span>: <span class="hljs-string">`&lt;div&gt;<br>        &lt;input /&gt;<br>        &lt;div @click="handleClick"&gt;&#123;&#123;text&#125;&#125;&lt;/div&gt;<br>        &lt;slot /&gt;<br>        &lt;/div&gt;`</span><br>    &#125;)<br>    <span class="hljs-keyword">const</span> vm = app.mount(<span class="hljs-string">'#root'</span>)<br></code></pre></td></tr></table></figure><p>上面我们将不太确定的具体需要什么元素的位置使用slot代替，当我们在父组件调用子组件时，插入的元素将自动被slot元素承载</p><h3 id="具名插槽"><a href="#具名插槽" class="headerlink" title="具名插槽"></a>具名插槽</h3>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;关于slot，在组件化的模式下，通常遇到一个会多次使用的元素，例如封装一个后台管理系统常需要用到的表格，弹窗等等组件，但是通常在复用性高的情况下又有略微的不同，例如一个弹窗，有的情况可能需要仅仅展示一个图片一个按钮，有时又需要展示出这个弹窗的标题，那么根据不同的情况，我们会在这个组件中穿插不同的元素，这个时候就需要用到插槽。&lt;/p&gt;
    
    </summary>
    
    
      <category term="前端" scheme="http://www.lhjailj.top/categories/%E5%89%8D%E7%AB%AF/"/>
    
      <category term="Vue" scheme="http://www.lhjailj.top/categories/%E5%89%8D%E7%AB%AF/Vue/"/>
    
    
      <category term="slot" scheme="http://www.lhjailj.top/tags/slot/"/>
    
  </entry>
  
  <entry>
    <title>2021-3-14CSS简写</title>
    <link href="http://www.lhjailj.top/2021/03/14/2021-3-14CSS%E7%AE%80%E5%86%99/"/>
    <id>http://www.lhjailj.top/2021/03/14/2021-3-14CSS%E7%AE%80%E5%86%99/</id>
    <published>2021-03-14T11:46:40.000Z</published>
    <updated>2021-03-14T12:00:23.836Z</updated>
    
    <content type="html"><![CDATA[<p>关于合理的简写：</p><figure class="hljs highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-tag">background</span>: <span class="hljs-selector-tag">blue</span>;<br><span class="hljs-selector-tag">background-color</span>: <span class="hljs-selector-tag">blue</span>;<br></code></pre></td></tr></table></figure><p>前者是简写，可以确保你得到一个蓝色的纯色背景，但是如果你使用展开式的单个属性，那么这个元素的背景最终可能显示为一个粉红色的图案，一张图片，或者其他任何东西，因为同时可能会有一条<code>background-image</code>在其作用，展开式的写法不会帮助我们清空所有其他相关的属性，<strong>你设置了一个蓝色背景，又在下面几行设置了一张背景图片，那么你永远也看不到这个蓝色的背景图片!</strong></p>{% asset_img 1.png %}<p>比如我们要实现li前面的背景图片可以设置</p><figure class="hljs highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs CSS">background:  #badcfe url(./images/icon2.gif) no-repeat left center;<br></code></pre></td></tr></table></figure><p>但是这个是我在设置<code>list-style-image</code>无效的情况下的无奈之举</p><p>当时使用的是dl自定义列表，那么要使用</p><figure class="hljs highlight CSS"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs CSS"><span class="hljs-selector-tag">display</span>: <span class="hljs-selector-tag">list-item</span>;<br><span class="hljs-selector-tag">list-style</span>: <span class="hljs-selector-tag">url</span>()<br></code></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;关于合理的简写：&lt;/p&gt;
&lt;figure class=&quot;hljs highlight css&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/s
      
    
    </summary>
    
    
      <category term="前端" scheme="http://www.lhjailj.top/categories/%E5%89%8D%E7%AB%AF/"/>
    
      <category term="CSS" scheme="http://www.lhjailj.top/categories/%E5%89%8D%E7%AB%AF/CSS/"/>
    
    
      <category term="CSS3" scheme="http://www.lhjailj.top/tags/CSS3/"/>
    
  </entry>
  
  <entry>
    <title>HTTP请求参数</title>
    <link href="http://www.lhjailj.top/2020/11/08/2020-01-10-%E5%85%B3%E4%BA%8EHTTP%E8%AF%B7%E6%B1%82%E5%8F%82%E6%95%B0/"/>
    <id>http://www.lhjailj.top/2020/11/08/2020-01-10-%E5%85%B3%E4%BA%8EHTTP%E8%AF%B7%E6%B1%82%E5%8F%82%E6%95%B0/</id>
    <published>2020-11-08T10:14:41.000Z</published>
    <updated>2021-03-10T09:32:21.473Z</updated>
    
    <content type="html"><![CDATA[<h2 id="HTTP请求参数的三种格式"><a href="#HTTP请求参数的三种格式" class="headerlink" title="HTTP请求参数的三种格式"></a>HTTP请求参数的三种格式</h2><p>记录关于<code>Query String Parameters</code>、<code>Form Data</code>、 <code>Request Payload</code>,三种格式的区别</p><h3 id="Query-String-Parameters"><a href="#Query-String-Parameters" class="headerlink" title="Query String Parameters"></a><code>Query String Parameters</code></h3><p>格式为?key=value&amp;key=value</p><p>参数通过url String的形式传递，常用在GET请求方式时使用，那么通过postman等测试工具测试接口时，要根据对应方式，对应类型去添加参数，</p><h3 id="Form-Data"><a href="#Form-Data" class="headerlink" title="Form Data"></a><code>Form Data</code></h3><p>当Content-Type为<code>application/x-www-form-urlencoded;charset=utf-8</code>时，参数以<code>Form Data</code>的形式传递给接口，但是不会显示在url上</p><h2 id="Request-Playload"><a href="#Request-Playload" class="headerlink" title="Request Playload"></a><code>Request Playload</code></h2><p>当Content-Type为<code>application/json;charset=utf-8</code>时，参数会以Request payload的形式，数据以json的形式传递给接口，并且不会显示在接口的url上</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;HTTP请求参数的三种格式&quot;&gt;&lt;a href=&quot;#HTTP请求参数的三种格式&quot; class=&quot;headerlink&quot; title=&quot;HTTP请求参数的三种格式&quot;&gt;&lt;/a&gt;HTTP请求参数的三种格式&lt;/h2&gt;&lt;p&gt;记录关于&lt;code&gt;Query String Par
      
    
    </summary>
    
    
      <category term="网络" scheme="http://www.lhjailj.top/categories/%E7%BD%91%E7%BB%9C/"/>
    
    
      <category term="Http" scheme="http://www.lhjailj.top/tags/Http/"/>
    
  </entry>
  
  <entry>
    <title>20201029Http</title>
    <link href="http://www.lhjailj.top/2020/10/29/2020-10-29-Http%E7%AE%80%E4%BB%8B/"/>
    <id>http://www.lhjailj.top/2020/10/29/2020-10-29-Http%E7%AE%80%E4%BB%8B/</id>
    <published>2020-10-29T14:30:52.000Z</published>
    <updated>2021-03-10T09:34:09.509Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Http简介"><a href="#Http简介" class="headerlink" title="Http简介"></a>Http简介</h2><p>HTTP协议是Hyper Text Transfer Protocol（超文本传输协议）的缩写,是用于从万维网（WWW:World Wide Web ）服务器传输超文本到本地浏览器的传送协议。</p><p>HTTP是一个基于TCP/IP通信协议来传递数据（HTML 文件, 图片文件, 查询结果等）。</p><p>HTTP是一个属于应用层的面向对象的协议，由于其简捷、快速的方式，适用于分布式超媒体信息系统。它于1990年提出，经过几年的使用与发展，得到不断地完善和扩展。目前在WWW中使用的是HTTP/1.0的第六版，HTTP/1.1的规范化工作正在进行之中，而且HTTP-NG(Next Generation of HTTP)的建议已经提出。</p><a id="more"></a><p>HTTP协议工作于客户端-服务端架构为上。浏览器作为HTTP客户端通过URL向HTTP服务端即WEB服务器发送所有请求。Web服务器根据接收到的请求后，向客户端发送响应信息。</p><h2 id="http的工作方式"><a href="#http的工作方式" class="headerlink" title="http的工作方式"></a>http的工作方式</h2><p><strong>http</strong>采用请求/响应的工作方式</p><p>服务器不断监听TCP端口等待客户端发送请求，当客户端发送请求是建立TCP连接，以http请求报文的形式发送页面请求，服务器以响应报文的方式发送响应，</p><p>http的每次通信都必须包含头部信息（HTTP header），用来描述一些元数据，其他的新增功能还包括状态吗（status code）,多字符集支持、多部分发送、权限（authorization）、缓存（cache）、内容编码（content encoding）等</p><h3 id="请求格式"><a href="#请求格式" class="headerlink" title="请求格式"></a>请求格式</h3><figure class="hljs highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs http"><span class="hljs-keyword">GET</span> <span class="hljs-string">/</span> HTTP/1.0<br><span class="hljs-attribute">User-Agent</span>: Mozilla/5.0 (Macintosh; Intel Mac OS X 10_10_5)<br><span class="hljs-attribute">Accept</span>: */*<br></code></pre></td></tr></table></figure><p>Accept：在发送请求的时候告诉服务器自己可以接受哪些数据格式</p><h3 id="响应格式"><a href="#响应格式" class="headerlink" title="响应格式"></a>响应格式</h3><figure class="hljs highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs http">HTTP/1.0 <span class="hljs-number">200</span> OK <br><span class="hljs-attribute">Content-Type</span>: text/plain<br><span class="hljs-attribute">Content-Length</span>: 137582<br><span class="hljs-attribute">Expires</span>: Thu, 05 Dec 1997 16:00:00 GMT<br><span class="hljs-attribute">Last-Modified</span>: Wed, 5 August 1996 15:55:28 GMT<br><span class="hljs-attribute">Server</span>: Apache 0.84<br><br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span>Hello World<span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span></span><br></code></pre></td></tr></table></figure><h3 id="content-Type字段"><a href="#content-Type字段" class="headerlink" title="content Type字段"></a>content Type字段</h3><p>关于字符的编码，1.0版本规定，头部信息必须是ASCII码，后面的数据可以是任何形式，所以服务器响应的时候必须告诉客户端数据是什么格式，content Type的作用就是表明数据的格式</p><ul><li>text/plain</li><li>text/html</li><li>text/css</li><li>image/jpeg</li><li>image/png</li><li>image/svg+xml</li><li>audio/mp4</li><li>video/mp4</li><li>application/javascript</li><li>application/pdf</li><li>application/zip</li><li>application/atom+xml</li></ul><h3 id="关于http1-0的缺点"><a href="#关于http1-0的缺点" class="headerlink" title="关于http1.0的缺点"></a>关于http1.0的缺点</h3><p>每个TCP连接只能发送一个请求，发送数据完毕，连接就要关闭，如果还要请求其他资源，就必须再新建一个连接。TCP新建的成本很高，需要进行三次握手，所以当网页加载外部资源越来越多的时候，这个问题就愈发突出了</p><h2 id="HTTP1-1"><a href="#HTTP1-1" class="headerlink" title="HTTP1.1"></a>HTTP1.1</h2><p>1.1版最大的变化就是引入了持久连接，即TCP连接默认不关闭，可以被多个请求服用，不用声明Connection：keep-alive</p><p>客户端和服务器发现对方一段时间没有活动，就可以主动关闭连接。</p><h2 id="HTTP请求方法"><a href="#HTTP请求方法" class="headerlink" title="HTTP请求方法"></a>HTTP请求方法</h2><p>GET请求：请求指定页面的信息，并返回实体主体</p><p>HEAD：类似get请求，只不过返回的响应中没有具体的内容，用于获取报头</p><p>POST：像指定资源提交数据进行处理请求，（例如提交表单或上传文件，数据被包含在请求体中</p><p>PUT：从客户端向服务器传送的数据取代指定的文档的内容</p><p>DELETE：请求服务器删除指定页面</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Http简介&quot;&gt;&lt;a href=&quot;#Http简介&quot; class=&quot;headerlink&quot; title=&quot;Http简介&quot;&gt;&lt;/a&gt;Http简介&lt;/h2&gt;&lt;p&gt;HTTP协议是Hyper Text Transfer Protocol（超文本传输协议）的缩写,是用于从万维网（WWW:World Wide Web ）服务器传输超文本到本地浏览器的传送协议。&lt;/p&gt;
&lt;p&gt;HTTP是一个基于TCP/IP通信协议来传递数据（HTML 文件, 图片文件, 查询结果等）。&lt;/p&gt;
&lt;p&gt;HTTP是一个属于应用层的面向对象的协议，由于其简捷、快速的方式，适用于分布式超媒体信息系统。它于1990年提出，经过几年的使用与发展，得到不断地完善和扩展。目前在WWW中使用的是HTTP/1.0的第六版，HTTP/1.1的规范化工作正在进行之中，而且HTTP-NG(Next Generation of HTTP)的建议已经提出。&lt;/p&gt;
    
    </summary>
    
    
      <category term="网络" scheme="http://www.lhjailj.top/categories/%E7%BD%91%E7%BB%9C/"/>
    
    
      <category term="Http" scheme="http://www.lhjailj.top/tags/Http/"/>
    
  </entry>
  
  <entry>
    <title>2020_1027mysql</title>
    <link href="http://www.lhjailj.top/2020/10/26/2020-10-27-mysql/"/>
    <id>http://www.lhjailj.top/2020/10/26/2020-10-27-mysql/</id>
    <published>2020-10-26T13:01:09.000Z</published>
    <updated>2021-03-10T10:16:14.112Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Msql数据库概述"><a href="#Msql数据库概述" class="headerlink" title="Msql数据库概述"></a>Msql数据库概述</h1><p>Msql为关系数据库，关系数据库的特点：</p><ul><li>理论基础：集合论和关系代数</li><li>具体表象：用二维表（有行和列）组织数据</li><li>编程语言：结构化查询语言（sql）</li></ul><a id="more"></a><h2 id="mac的msql启动"><a href="#mac的msql启动" class="headerlink" title="mac的msql启动"></a>mac的msql启动</h2><p>启动mySql服务:sudo /usr/local/mysql/support-files/mysql.server start，<strong>输入本机密码</strong></p><p>关闭：sudo /usr/local/mysql/support-files/mysql.server stop</p><p>连接mysql：/usr/local/MySQL/bin/mysql -u root -p   输入数据库密码：<strong><strong>**</strong></strong></p><p>退出：exit</p><h2 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h2><p>查看所有数据库</p><figure class="hljs highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mysql">show databases;<br></code></pre></td></tr></table></figure><p>这里要注意加上<strong>分号</strong></p><p>切换到指定数据库</p><figure class="hljs highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mysq">use mysql;<br></code></pre></td></tr></table></figure><p>查看数据库下所有的表</p><figure class="hljs highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mysql">show tables;<br></code></pre></td></tr></table></figure><h3 id="基本操作"><a href="#基本操作" class="headerlink" title="基本操作"></a>基本操作</h3><p>通常可以将SQL分为三类：DDL（数据定义语言）、DML（数据操作语言）、DCL（数据控制语言）。DDL主要用于创建（ceate）、删除（drop）、修改（alter）数据库中的对象，比如创建、删除、和修改二维表；DML主要负责插入数据（insert）、删除数据（delete）、更新数据（update）和查询（select）；DCL通常用于授予权限（grant）和召回权限（revoke）</p><ol><li><p>DDL数据定义语言</p><figure class="hljs highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><code class="hljs mysql">-- 如果存在名为school的数据库就删除它<br>drop database if exists school;<br><br>-- 创建名为school的数据库并设置默认的字符集和排序方式<br>create database school default charset utf8;<br><br>-- 切换到school数据库上下文环境<br>use school;<br><br>-- 创建学院表<br>create table tb_college<br>(<br>collid int auto_increment comment &apos;编号&apos;,<br>collname varchar(50) not null comment &apos;名称&apos;,<br>collintro varchar(500) default &apos;&apos; comment &apos;介绍&apos;,<br>primary key (collid)<br>);<br><br>-- 创建学生表<br>create table tb_student<br>(<br>stuid int not null comment &apos;学号&apos;,<br>stuname varchar(20) not null comment &apos;姓名&apos;,<br>stusex boolean default 1 comment &apos;性别&apos;,<br>stubirth date not null comment &apos;出生日期&apos;,<br>stuaddr varchar(255) default &apos;&apos; comment &apos;籍贯&apos;,<br>collid int not null comment &apos;所属学院&apos;,<br>primary key (stuid),<br>foreign key (collid) references tb_college (collid)<br>);<br><br>-- 创建教师表<br>create table tb_teacher<br>(<br>teaid int not null comment &apos;工号&apos;,<br>teaname varchar(20) not null comment &apos;姓名&apos;,<br>teatitle varchar(10) default &apos;助教&apos; comment &apos;职称&apos;,<br>collid int not null comment &apos;所属学院&apos;,<br>primary key (teaid),<br>foreign key (collid) references tb_college (collid)<br>);<br><br>-- 创建课程表<br>create table tb_course<br>(<br>couid int not null comment &apos;编号&apos;,<br>couname varchar(50) not null comment &apos;名称&apos;,<br>coucredit int not null comment &apos;学分&apos;,<br>teaid int not null comment &apos;授课老师&apos;,<br>primary key (couid),<br>foreign key (teaid) references tb_teacher (teaid)<br>);<br><br>-- 创建选课记录表<br>create table tb_record<br>(<br>recid int auto_increment comment &apos;选课记录编号&apos;,<br>sid int not null comment &apos;选课学生&apos;,<br>cid int not null comment &apos;所选课程&apos;,<br>seldate datetime default now() comment &apos;选课时间日期&apos;,<br>score decimal(4,1) comment &apos;考试成绩&apos;,<br>primary key (recid),<br>foreign key (sid) references tb_student (stuid),<br>foreign key (cid) references tb_course (couid),<br>unique (sid, cid)<br>);<br></code></pre></td></tr></table></figure></li><li><p>DML</p><figure class="hljs highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><code class="hljs mysql">-- 插入学院数据<br>insert into tb_college (collname, collintro) values <br>(&apos;计算机学院&apos;, &apos;计算机学院1958年设立计算机专业，1981年建立计算机科学系，1998年设立计算机学院，2005年5月，为了进一步整合教学和科研资源，学校决定，计算机学院和软件学院行政班子合并统一运作、实行教学和学生管理独立运行的模式。 学院下设三个系：计算机科学与技术系、物联网工程系、计算金融系；两个研究所：图象图形研究所、网络空间安全研究院（2015年成立）；三个教学实验中心：计算机基础教学实验中心、IBM技术中心和计算机专业实验中心。&apos;),<br>(&apos;外国语学院&apos;, &apos;四川大学外国语学院设有7个教学单位，6个文理兼收的本科专业；拥有1个一级学科博士授予点，3个二级学科博士授予点，5个一级学科硕士学位授权点，5个二级学科硕士学位授权点，5个硕士专业授权领域，同时还有2个硕士专业学位（MTI）专业；有教职员工210余人，其中教授、副教授80余人，教师中获得中国国内外名校博士学位和正在职攻读博士学位的教师比例占专任教师的60%以上。&apos;),<br>(&apos;经济管理学院&apos;, &apos;四川大学经济学院前身是创办于1905年的四川大学经济科；已故经济学家彭迪先、张与九、蒋学模、胡寄窗、陶大镛、胡代光，以及当代学者刘诗白等曾先后在此任教或学习；1905年，四川大学设经济科；1924年，四川大学经济系成立；1998年，四川大学经济管理学院变更为四川大学经济学院。&apos;);<br><br>-- 插入学生数据<br>insert into tb_student (stuid, stuname, stusex, stubirth, stuaddr, collid) values<br>(1001, &apos;杨逍&apos;, 1, &apos;1990-3-4&apos;, &apos;四川成都&apos;, 1),<br>(1002, &apos;任我行&apos;, 1, &apos;1992-2-2&apos;, &apos;湖南长沙&apos;, 1),<br>(1033, &apos;王语嫣&apos;, 0, &apos;1989-12-3&apos;, &apos;四川成都&apos;, 1),<br>(1572, &apos;岳不群&apos;, 1, &apos;1993-7-19&apos;, &apos;陕西咸阳&apos;, 1),<br>(1378, &apos;纪嫣然&apos;, 0, &apos;1995-8-12&apos;, &apos;四川绵阳&apos;, 1),<br>(1954, &apos;林平之&apos;, 1, &apos;1994-9-20&apos;, &apos;福建莆田&apos;, 1),<br>(2035, &apos;东方不败&apos;, 1, &apos;1988-6-30&apos;, null, 2),<br>(3011, &apos;林震南&apos;, 1, &apos;1985-12-12&apos;, &apos;福建莆田&apos;, 3),<br>(3755, &apos;项少龙&apos;, 1, &apos;1993-1-25&apos;, null, 3),<br>(3923, &apos;杨不悔&apos;, 0, &apos;1985-4-17&apos;, &apos;四川成都&apos;, 3),<br>(4040, &apos;隔壁老王&apos;, 1, &apos;1989-1-1&apos;, &apos;四川成都&apos;, 2);<br><br>-- 删除学生数据<br>delete from tb_student where stuid=4040;<br><br>-- 更新学生数据<br>update tb_student set stuname=&apos;杨过&apos;, stuaddr=&apos;湖南长沙&apos; where stuid=1001;<br><br>-- 插入老师数据<br>insert into tb_teacher (teaid, teaname, teatitle, collid) values <br>(1122, &apos;张三丰&apos;, &apos;教授&apos;, 1),<br>(1133, &apos;宋远桥&apos;, &apos;副教授&apos;, 1),<br>(1144, &apos;杨逍&apos;, &apos;副教授&apos;, 1),<br>(2255, &apos;范遥&apos;, &apos;副教授&apos;, 2),<br>(3366, &apos;韦一笑&apos;, &apos;讲师&apos;, 3);<br><br>-- 插入课程数据<br>insert into tb_course (couid, couname, coucredit, teaid) values <br>(1111, &apos;Python程序设计&apos;, 3, 1122),<br>(2222, &apos;Web前端开发&apos;, 2, 1122),<br>(3333, &apos;操作系统&apos;, 4, 1122),<br>(4444, &apos;计算机网络&apos;, 2, 1133),<br>(5555, &apos;编译原理&apos;, 4, 1144),<br>(6666, &apos;算法和数据结构&apos;, 3, 1144),<br>(7777, &apos;经贸法语&apos;, 3, 2255),<br>(8888, &apos;成本会计&apos;, 2, 3366),<br>(9999, &apos;审计学&apos;, 3, 3366);<br><br>-- 插入选课数据<br>insert into tb_record (sid, cid, seldate, score) values <br>(1001, 1111, &apos;2017-09-01&apos;, 95),<br>(1001, 2222, &apos;2017-09-01&apos;, 87.5),<br>(1001, 3333, &apos;2017-09-01&apos;, 100),<br>(1001, 4444, &apos;2018-09-03&apos;, null),<br>(1001, 6666, &apos;2017-09-02&apos;, 100),<br>(1002, 1111, &apos;2017-09-03&apos;, 65),<br>(1002, 5555, &apos;2017-09-01&apos;, 42),<br>(1033, 1111, &apos;2017-09-03&apos;, 92.5),<br>(1033, 4444, &apos;2017-09-01&apos;, 78),<br>(1033, 5555, &apos;2017-09-01&apos;, 82.5),<br>(1572, 1111, &apos;2017-09-02&apos;, 78),<br>(1378, 1111, &apos;2017-09-05&apos;, 82),<br>(1378, 7777, &apos;2017-09-02&apos;, 65.5),<br>(2035, 7777, &apos;2018-09-03&apos;, 88),<br>(2035, 9999, default, null),<br>(3755, 1111, default, null),<br>(3755, 8888, default, null),<br>(3755, 9999, &apos;2017-09-01&apos;, 92);<br></code></pre></td></tr></table></figure><figure class="hljs highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br></pre></td><td class="code"><pre><code class="hljs mysql">-- 查询所有学生信息<br>select * from tb_student;<br><br>-- 查询所以课程名称及学分（投影和别名）<br>select counname, coucredit from tb_course;<br>select couname as 课程名称, coucredit as 学分 from tb_course;<br><br>-- 查询所以学生的姓名和性别（条件运算）<br>select stuname as 姓名, case stusex when 1 then &apos;男&apos; else &apos;女&apos; end as 性别 from tb_student;<br>select stuname as 姓名, if(stusex, &apos;男&apos;, &apos;女&apos;) as 性别 from tb_student;<br><br>-- 查询所有女学生的姓名和出生日期(筛选)<br>select stuname, stubirth from tb_student where stusex=0;<br><br>-- 查询所有80后学生的姓名、性别和出生日期(筛选)<br>select stuname, stusex, stubirth from tb_student where stubirth&gt;=&apos;1980-1-1&apos; and stubirth&lt;=&apos;1989-12-31&apos;;<br>select stuname, stusex, stubirth from tb_student where stubirth between &apos;1980-1-1&apos; and &apos;1989-12-31&apos;;<br><br>-- 查询姓&quot;杨&quot;的学生姓名和性别(模糊)<br>select stuname, stusex from tb_student where stuname like &apos;杨%&apos;;<br><br>-- 查询姓&quot;杨&quot;名字两个字的学生姓名和性别(模糊)<br>select stuname, stusex from tb_student where stuname like &apos;杨_&apos;;<br><br>-- 查询姓&quot;杨&quot;名字三个字的学生姓名和性别(模糊)<br>select stuname, stusex from tb_student where stuname like &apos;杨__&apos;;<br><br>-- 查询名字中有&quot;不&quot;字或&quot;嫣&quot;字的学生的姓名(模糊)<br>select stuname, stusex from tb_student where stuname like &apos;%不%&apos; or stuname like &apos;%嫣%&apos;;<br><br>-- 查询没有录入家庭住址的学生姓名(空值)<br>select stuname from tb_student where stuaddr is null;<br><br>-- 查询录入了家庭住址的学生姓名(空值)<br>select stuname from tb_student where stuaddr is not null;<br><br>-- 查询学生选课的所有日期(去重)<br>select distinct seldate from tb_record;<br><br>-- 查询学生的家庭住址(去重)<br>select distinct stuaddr from tb_student where stuaddr is not null;<br><br>-- 查询男学生的姓名和生日按年龄从大到小排列(排序)<br>select stuname as 姓名, datediff(curdate(), stubirth) div 365 as 年龄 from tb_student where stusex=1 order by 年龄 desc;<br><br>-- 查询年龄最大的学生的出生日期(聚合函数)<br>select min(stubirth) from tb_student;<br><br>-- 查询年龄最小的学生的出生日期(聚合函数)<br>select max(stubirth) from tb_student;<br><br>-- 查询男女学生的人数(分组和聚合函数)<br>select stusex, count(*) from tb_student group by stusex;<br><br>-- 查询课程编号为1111的课程的平均成绩(筛选和聚合函数)<br>select avg(score) from tb_record where cid=1111;<br><br>-- 查询学号为1001的学生所有课程的平均分(筛选和聚合函数)<br>select avg(score) from tb_record where sid=1001;<br><br>-- 查询每个学生的学号和平均成绩(分组和聚合函数)<br>select sid as 学号, avg(score) as 平均分 from tb_record group by sid;<br><br>-- 查询平均成绩大于等于90分的学生的学号和平均成绩<br>-- 分组以前的筛选使用where子句 / 分组以后的筛选使用having子句<br>select sid as 学号, avg(score) as 平均分 from tb_record group by sid having 平均分&gt;=90;<br><br>-- 查询年龄最大的学生的姓名(子查询/嵌套的查询)<br>select stuname from tb_student where stubirth=( select min(stubirth) from tb_student );<br><br>-- 查询年龄最大的学生姓名和年龄(子查询+运算)<br>select stuname as 姓名, datediff(curdate(), stubirth) div 365 as 年龄 from tb_student where stubirth=( select min(stubirth) from tb_student );<br><br>-- 查询选了两门以上的课程的学生姓名(子查询/分组条件/集合运算)<br>select stuname from tb_student where stuid in ( select stuid from tb_record group by stuid having count(stuid)&gt;2 );<br><br>-- 查询学生姓名、课程名称以及成绩(连接查询)<br>select stuname, couname, score from tb_student t1, tb_course t2, tb_record t3 where stuid=sid and couid=cid and score is not null;<br><br>-- 查询学生姓名、课程名称以及成绩按成绩从高到低查询第11-15条记录(内连接+分页)<br>select stuname, couname, score from tb_student inner join tb_record on stuid=sid inner join tb_course on couid=cid where score is not null order by score desc limit 5 offset 10;<br><br>select stuname, couname, score from tb_student inner join tb_record on stuid=sid inner join tb_course on couid=cid where score is not null order by score desc limit 10, 5;<br><br>-- 查询选课学生的姓名和平均成绩(子查询和连接查询)<br>select stuname, avgmark from tb_student, ( select sid, avg(score) as avgmark from tb_record group by sid ) temp where stuid=sid;<br><br>select stuname, avgmark from tb_student inner join ( select sid, avg(score) as avgmark from tb_record group by sid ) temp on stuid=sid;<br><br>-- 查询每个学生的姓名和选课数量(左外连接和子查询)<br>select stuname, ifnull(total, 0) from tb_student left outer join ( select sid, count(sid) as total from tb_record group by sid ) temp on stuid=sid;<br></code></pre></td></tr></table></figure></li></ol>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Msql数据库概述&quot;&gt;&lt;a href=&quot;#Msql数据库概述&quot; class=&quot;headerlink&quot; title=&quot;Msql数据库概述&quot;&gt;&lt;/a&gt;Msql数据库概述&lt;/h1&gt;&lt;p&gt;Msql为关系数据库，关系数据库的特点：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;理论基础：集合论和关系代数&lt;/li&gt;
&lt;li&gt;具体表象：用二维表（有行和列）组织数据&lt;/li&gt;
&lt;li&gt;编程语言：结构化查询语言（sql）&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
    
      <category term="数据库" scheme="http://www.lhjailj.top/categories/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
    
      <category term="mysql" scheme="http://www.lhjailj.top/tags/mysql/"/>
    
  </entry>
  
  <entry>
    <title>Session&amp;&amp;cookie</title>
    <link href="http://www.lhjailj.top/2020/10/14/2020-10-14Sessioncookie/"/>
    <id>http://www.lhjailj.top/2020/10/14/2020-10-14Sessioncookie/</id>
    <published>2020-10-14T00:31:53.000Z</published>
    <updated>2021-03-14T13:00:02.300Z</updated>
    
    <content type="html"><![CDATA[<p>Session和Cookie产生的原因：</p><p>因为Http的一个显著特征为无状态！无状态意味着它不记录请求它的用户信息，无法区分是否来自同一个用户。</p><a id="more"></a><h2 id="Session"><a href="#Session" class="headerlink" title="Session"></a>Session</h2><h3 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h3><p>在计算机中，尤其是在网络应用中，称为“会话控制”。Session 对象存储特定用户会话所需的属性及配置信息。这样，当用户在应用程序的 Web 页之间跳转时，存储在 Session 对象中的变量将不会丢失，而是在整个用户会话中一直存在下去。当用户请求来自应用程序的 Web 页时，如果该用户还没有会话，则 Web 服务器将自动创建一个 Session 对象。当会话过期或被放弃后，服务器将终止该会话。</p><p>session是另一种记录服务器和客户端会话状态的机制。</p><ol><li>用户第一次请求服务器时，服务器端会生成一个sessionid</li><li>服务器端将生成的sessionid返回给客户端，通过set-cookie</li><li>客户端收到sessionid会将它保存在cookie中，当客户端再次访问服务端时会带上这个sessionid</li><li>当服务端再次接收到来自客户端的请求时，会先去检查是否存在sessionid，不存在就新建一个sessionid重复1,2的流程，如果存在就去遍历服务端的session文件，找到与这个sessionid相对应的文件，文件中的键值便是sessionid，值为当前用户的一些信息</li><li>此后的请求都会交换这个 Session ID，进行有状态的会话。</li></ol><h2 id="Session的实现方式"><a href="#Session的实现方式" class="headerlink" title="Session的实现方式"></a>Session的实现方式</h2><p>1、借助Cookie的sessionId发送的方式</p><p>2、通过LocalStorage的方式</p><p>3、URL回写的方式，这是客户端禁止接收Cookie之后的方法。</p><p>4、隐藏表单字段（hidden）</p><h2 id="Cookie"><a href="#Cookie" class="headerlink" title="Cookie"></a>Cookie</h2><p>HTTP Cookie（也叫Web Cookie或浏览器Cookie）是服务器发送到用户浏览器并保存在本地的一小块数据，它会在浏览器下次向同一服务器再发起请求时被携带并发送到服务器上。通常，它用于告知服务端两个请求是否来自同一浏览器，如保持用户的登录状态。Cookie使基于<a href="https://link.zhihu.com/?target=https%3A//developer.mozilla.org/en-US/docs/Web/HTTP/Overview%23HTTP_is_stateless_but_not_sessionless" target="_blank" rel="noopener">无状态</a>的HTTP协议记录稳定的状态信息成为了可能。</p><p>可以看到上面实现Session的方式第一项就是借助Cookie去携带Sessionid，所以可以说Cookie也是实现Session的一种方式</p><h2 id="Session与Cookie的区别"><a href="#Session与Cookie的区别" class="headerlink" title="Session与Cookie的区别"></a>Session与Cookie的区别</h2><ul><li><strong>安全性：</strong> Session 比 Cookie 安全，Session 是存储在服务器端的，Cookie 是存储在客户端的。</li><li><strong>存取值的类型不同</strong>：Cookie 只支持存字符串数据，想要设置其他类型的数据，需要将其转换成字符串，Session 可以存任意数据类型。</li><li><strong>有效期不同：</strong> Cookie 可设置为长时间保持，比如我们经常使用的默认登录功能，Session 一般失效时间较短，客户端关闭（默认情况下）或者 Session 超时都会失效。</li><li><strong>存储大小不同：</strong> 单个 Cookie 保存的数据不能超过 4K，Session 可存储数据远高于 Cookie，但是当访问量过多，会占用过多的服务器资源。</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Session和Cookie产生的原因：&lt;/p&gt;
&lt;p&gt;因为Http的一个显著特征为无状态！无状态意味着它不记录请求它的用户信息，无法区分是否来自同一个用户。&lt;/p&gt;
    
    </summary>
    
    
      <category term="网络" scheme="http://www.lhjailj.top/categories/%E7%BD%91%E7%BB%9C/"/>
    
    
      <category term="Cookie" scheme="http://www.lhjailj.top/tags/Cookie/"/>
    
      <category term="session" scheme="http://www.lhjailj.top/tags/session/"/>
    
  </entry>
  
  <entry>
    <title>Promise</title>
    <link href="http://www.lhjailj.top/2020/08/27/2021-08-27Promise/"/>
    <id>http://www.lhjailj.top/2020/08/27/2021-08-27Promise/</id>
    <published>2020-08-27T06:32:23.000Z</published>
    <updated>2021-03-15T15:39:41.144Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Promise"><a href="#Promise" class="headerlink" title="Promise"></a>Promise</h1><p>Promise 是异步编程的解决方案，比传统的解决方案–回调函数和事件–更合理和强大。</p><h2 id="回调异步来处理异步"><a href="#回调异步来处理异步" class="headerlink" title="回调异步来处理异步"></a>回调异步来处理异步</h2><p>在JS中的异步处理，第一时间想到的就是利用回调函数</p><p>通过回调实现x+y运算</p><figure class="hljs highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">//利用回调函数的异步处理</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">add</span>(<span class="hljs-params">getX, getY, cb</span>) </span>&#123;<br>  <span class="hljs-keyword">var</span> x, y;<br>  getX(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">xVal</span>)</span>&#123;<br>    x = xVal;<br>    <span class="hljs-comment">//去判断是否有值</span><br>    <span class="hljs-keyword">if</span>(y != <span class="hljs-literal">undefined</span>) &#123;<br>      cb(x + y);<br>    &#125;<br>  &#125;);<br>  getY(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">yVal</span>)</span>&#123;<br>    y = yVal;<br>    <span class="hljs-comment">//去判断是否有值</span><br>    <span class="hljs-keyword">if</span>(x != <span class="hljs-literal">undefined</span>) &#123;<br>      cb(x + y);<br>    &#125;<br>  &#125;);<br>&#125;<br>add(fetchX, fetchY, <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">sum</span>)</span>&#123;<br>  <span class="hljs-built_in">console</span>.log(sum)<br>&#125;)<br></code></pre></td></tr></table></figure><a id="more"></a><p>我们将x和y作为未来值，进行了一个运算add()</p><p>回调多了会出现层层嵌套，可读性变差，调试困难</p><p>一旦有所松动就会牵一发而动全身</p><p>当回调函数嵌套过多时</p><figure class="hljs highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs javascript">doA(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;<br>  doB();<br>  doC(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;<br>    doD();<br>  &#125;)<br>  doE()<br>&#125;)<br>doF()<br></code></pre></td></tr></table></figure><p>尽管你能够正确的确定实际的运行顺序，但是，这一眼看上去确实比较复杂</p><p>实际的运行顺序</p><ul><li>doA()</li><li>doF()</li><li>doB()</li><li>doC()</li><li>doE()</li><li>doD()</li></ul><p>这还只是简易模式，真正的异步JavaScript程序代码要混乱的多，使这种追踪难度成倍增加</p><p>回调的函数优美度不足，同时缺少信任度</p><p>尽管我们的大脑能够以顺序的方式（这个，然后这个，然后这个）计划一系列任务，但大脑运作的事件化的本质使得控制流的恢复/重试/复制几乎不费什么力气。如果你出外办事的时候发现把购物清单落在了家里，那么这一天并不会因为你没有预知到这一点就成为世界末日了。你的大脑很容易就能针对这个小意外做出计划：回家拿清单，然后立刻返回商店就是了。</p><p>但是，手工硬编码（即使包含了硬编码的出错处理）回调的脆弱本性可就远没有这么优雅了。一旦你指定（也就是预先计划）了所有的可能事件和路径，代码就会变得非常复杂，以至于无法维护和更新。这才是回调地狱的真正问题所在！嵌套和缩进基本上只是转移注意力的枝节而已。</p><p>用Promise实现x+y</p><figure class="hljs highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">add</span>(<span class="hljs-params">xPromise, yPromise</span>) </span>&#123;<br>  <span class="hljs-comment">//.all方法接受一个promise数组并返回一个新的promise，这个新的promise等待数组中的所有promise完成</span><br>  <span class="hljs-keyword">return</span> <span class="hljs-built_in">Promise</span>.all([xPromise, yPromise])<br>  <span class="hljs-comment">//promise决议之后，将取得x和y的值并加在一起</span><br>  .then(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">value</span>)</span>&#123;<br>    <span class="hljs-comment">//value是来自于之前决议的promise的数组,那么value[0]就是第一个promise的结果，value[2]就是第二个promise的结果</span><br>    <span class="hljs-keyword">return</span> values[<span class="hljs-number">0</span>] + value[<span class="hljs-number">1</span>]<br>  &#125;)<br>&#125;<br>add(fetchX(), fetchY())<br>.then(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">sum</span>)</span>&#123;<br>  <span class="hljs-built_in">console</span>.log(sum)<br>&#125;)<br></code></pre></td></tr></table></figure><p><code>Promise</code>将类似的异步处理对象和处理规则规范化，并按照统一的接口编写，采取了规定之外的写法会报错</p><h2 id="基本用法"><a href="#基本用法" class="headerlink" title="基本用法"></a>基本用法</h2><figure class="hljs highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">new</span> <span class="hljs-built_in">Promise</span>(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">resolve, reject</span>) </span>&#123;<br>  <span class="hljs-comment">//待处理的异步逻辑</span><br>  <span class="hljs-comment">//处理结束后，调用resolve或者reject方法</span><br>&#125;)<br></code></pre></td></tr></table></figure><p>promise实例有三种状态：</p><ol><li>pending：初始状态，位履行或者拒绝</li><li>fulfilled： 意味着操作成功完成</li><li>rejected： 操作失败</li></ol><p>当promise从pending状态进行决议转为fulfilled或者出现某种异常信息导致转为reject，当其中任一一种情况出现时，Promise对象的then方法绑定的处理方法（handles）就会被调用，<strong><code>then</code>方法有两个函数参数</strong>分别指定成功与失败状态的<code>resolve</code>方法和<code>reject</code>方法的回调函数</p><p>下面这个例子阐述了promise为完成的状态：<code>promise</code>p中定义了一个定时器，当2s过后将8传递给resolve，将promise状态变为完成状态，然后定义定时器在1s后输出promise p的结果，那么1s过后promsie的状态还未确定，所以输出结果为pending，只有当promsie结果变为fulfilled才会输出结果</p><figure class="hljs highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">let</span> p = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Promise</span>(<span class="hljs-function">(<span class="hljs-params">resolve, reject</span>) =&gt;</span> setTimeout(resolve, <span class="hljs-number">2000</span>, <span class="hljs-number">8</span>))<br>setTimeout(<span class="hljs-built_in">console</span>.log, <span class="hljs-number">1000</span>, p)<br></code></pre></td></tr></table></figure><p>例：在最开始我无法理解的就是resolve与reject是成功与失败，但是为什么使用他们，为什么将处理结果传递给了这个两个函数 ，<strong>最后我们要注意文档的两句话，Promise接受一个函数作为参数</strong>，也就是下面new Promise的参数function。<strong>同时这个函数又接收了两个函数作为参数，resolve，reject</strong>,我们调用readFIle方法读取文件，那么返回的结果要么成功返回文件的数据，或是失败返回一个err，那么resolve和reject的作用就来了，我们根据结果的不同来去设置这个promise在何种条件下变为何种状态，<strong>所以resolve的作用是将这个promise的状态变为成功，reject变为失败就可以理解了，如果返回了文件的数据，我们就使用resolve将这个promise的状态变为成功，否则就变为reject</strong></p><figure class="hljs highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> p = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Promise</span>(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">resolve, reject</span>) </span>&#123;<br>   fs.readFile(<span class="hljs-string">'./hello.md'</span>, <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">er,data</span>) </span>&#123;<br>      <span class="hljs-keyword">if</span>(err)&#123;<br>        reject(err)<span class="hljs-comment">//如果请求失败状态转为rejected</span><br>      &#125;<br>     resolve(data)<span class="hljs-comment">//如果请求成功状态转为fulfilled</span><br>   &#125;)<br>&#125;)<br><span class="hljs-comment">//promise状态确定时调用then方法,包含两种状态的回调函数</span><br>p.then(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">value</span>) </span>&#123;<br>  <span class="hljs-built_in">console</span>.log(value.data)<span class="hljs-comment">//第一个函数为成功时的回调</span><br>&#125;,<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">reason</span>)</span>&#123;<br>  <span class="hljs-built_in">console</span>.log(<span class="hljs-string">'读取失败'</span>)<br>&#125;)<br></code></pre></td></tr></table></figure><p>使用Promise封装ajax请求</p><figure class="hljs highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> getJSON = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">url</span>) </span>&#123;<br>  <span class="hljs-keyword">const</span> promise = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Promise</span>(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">resolve, reject</span>)</span>&#123;<br>    <span class="hljs-keyword">const</span> handler = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>&#123;<br>      <span class="hljs-keyword">if</span> (<span class="hljs-keyword">this</span>.readyState !== <span class="hljs-number">4</span>) &#123;<br>        <span class="hljs-keyword">return</span>;<br>      &#125;<br>      <span class="hljs-keyword">if</span> (<span class="hljs-keyword">this</span>.status === <span class="hljs-number">200</span>) &#123;<br>        <span class="hljs-comment">// 当满足了返回数据请求的时候，我们将promise状态变为成功，那么我们就可以在通过.then方法获取到返回的res</span><br>        resolve(<span class="hljs-keyword">this</span>.response);<br>      &#125; <span class="hljs-keyword">else</span> &#123;<br>        reject(<span class="hljs-keyword">new</span> <span class="hljs-built_in">Error</span>(<span class="hljs-keyword">this</span>.statusText));<br>      &#125;<br>    &#125;;<br>    <span class="hljs-keyword">const</span> client = <span class="hljs-keyword">new</span> XMLHttpRequest();<br>    client.open(<span class="hljs-string">"GET"</span>, url);<br>    client.onreadystatechange = handler;<br>    client.responseType = <span class="hljs-string">"json"</span>;<br>    client.setRequestHeader(<span class="hljs-string">"Accept"</span>, <span class="hljs-string">"application/json"</span>);<br>    client.send();<br><br>  &#125;);<br><br>  <span class="hljs-keyword">return</span> promise;<br>&#125;;<br><br>getJSON(<span class="hljs-string">"/posts.json"</span>).then(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">json</span>) </span>&#123;<br>  <span class="hljs-built_in">console</span>.log(<span class="hljs-string">'Contents: '</span> + json);<br>&#125;, <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">error</span>) </span>&#123;<br>  <span class="hljs-built_in">console</span>.error(<span class="hljs-string">'出错了'</span>, error);<br>&#125;);<br></code></pre></td></tr></table></figure><p>如果调用<code>resolve</code>函数和<code>reject</code>函数时带有参数，那么它们的参数会被传递给回调函数。<code>reject</code>函数的参数通常是<code>Error</code>对象的实例，表示抛出的错误；<code>resolve</code>函数的参数除了正常的值以外，还可能是另一个 Promise 实例，比如像下面这样。</p><figure class="hljs highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> p1 = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Promise</span>(<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">resolve, reject</span>) </span>&#123;<br>  <span class="hljs-comment">// ...</span><br>&#125;);<br><br><span class="hljs-keyword">const</span> p2 = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Promise</span>(<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">resolve, reject</span>) </span>&#123;<br>  <span class="hljs-comment">// ...</span><br>  resolve(p1);<br>&#125;)<br></code></pre></td></tr></table></figure><p>p1与p2都是Promise的实例，但是p2的resolve方法将作为p1的参数，如果调用的时候p1的状态时pending，那么p2的回调函数就会等待p1的状态的改变，如果p1的状态已经确定那么p2的回调函数就会立刻执行。</p><h2 id="链式操作"><a href="#链式操作" class="headerlink" title="链式操作"></a>链式操作</h2><p>Promise可以使用链式操作的原因是因为Promise.prototype.then方法返回的是一个新的Promise对象，因此可以采用链式写法</p><figure class="hljs highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs javascript">getJSON(<span class="hljs-string">'1.json'</span>).then(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">json</span>) </span>&#123;<br>  <span class="hljs-keyword">return</span> json.name<br>&#125;).then(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">name</span>) </span>&#123;<br>  <span class="hljs-comment">//proceed</span><br>&#125;)<br></code></pre></td></tr></table></figure><p>上述代码使用then方法，依次指定了两个回调函数。第一个回调函数完成以后，会将返回结果作为参数，传入第二个回调函数。</p><h2 id="关于async函数"><a href="#关于async函数" class="headerlink" title="关于async函数"></a>关于async函数</h2><p>只要函数名之前加上async关键字，就表明该函数内部有异步操作。该异步操作应该返回一个Promise对象，前面用await关键字注明。当函数执行的时候，一旦遇到await就会先返回，等到触发的异步操作完成，再接着执行函数体内后面的语句。</p><figure class="hljs highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">async</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">getStockPrice</span>(<span class="hljs-params">symbol, currency</span>) </span>&#123;<br>    <span class="hljs-keyword">let</span> price = <span class="hljs-keyword">await</span> getStockPrice(symbol);<br>    <span class="hljs-keyword">return</span> convert(price, currency);<br>&#125;<br></code></pre></td></tr></table></figure><p>上面代码是一个获取股票报价的函数，函数前面的async关键字，表明该函数将返回一个Promise对象。调用该函数时，当遇到await关键字，立即返回它后面的表达式（getStockPrice函数）产生的Promise对象，不再执行函数体内后面的语句。等到getStockPrice完成，再自动回到函数体内，执行剩下的语句。</p><p>另一个例子</p><figure class="hljs highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">timeout</span>(<span class="hljs-params">ms</span>) </span>&#123;<br>  <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-built_in">Promise</span>(<span class="hljs-function">(<span class="hljs-params">resolve</span>) =&gt;</span> &#123;<br>    setTimeout(resolve, ms);<br>  &#125;);<br>&#125;<br><span class="hljs-keyword">async</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">asyncValue</span>(<span class="hljs-params">value</span>) </span>&#123;<br>  <span class="hljs-keyword">await</span> timeout(<span class="hljs-number">50</span>);<br>  <span class="hljs-keyword">return</span> value;<br>&#125;<br></code></pre></td></tr></table></figure><p>上面代码中，asyncvalue函数前面有async关键字，表明函数体内有异步操作。执行的时候，遇到await语句就会先返回，等到timeout函数执行完毕再喊回value</p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Promise&quot;&gt;&lt;a href=&quot;#Promise&quot; class=&quot;headerlink&quot; title=&quot;Promise&quot;&gt;&lt;/a&gt;Promise&lt;/h1&gt;&lt;p&gt;Promise 是异步编程的解决方案，比传统的解决方案–回调函数和事件–更合理和强大。&lt;/p&gt;
&lt;h2 id=&quot;回调异步来处理异步&quot;&gt;&lt;a href=&quot;#回调异步来处理异步&quot; class=&quot;headerlink&quot; title=&quot;回调异步来处理异步&quot;&gt;&lt;/a&gt;回调异步来处理异步&lt;/h2&gt;&lt;p&gt;在JS中的异步处理，第一时间想到的就是利用回调函数&lt;/p&gt;
&lt;p&gt;通过回调实现x+y运算&lt;/p&gt;
&lt;figure class=&quot;hljs highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;code class=&quot;hljs javascript&quot;&gt;&lt;span class=&quot;hljs-comment&quot;&gt;//利用回调函数的异步处理&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;add&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;getX, getY, cb&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;br&gt;  &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; x, y;&lt;br&gt;  getX(&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;xVal&lt;/span&gt;)&lt;/span&gt;&amp;#123;&lt;br&gt;    x = xVal;&lt;br&gt;    &lt;span class=&quot;hljs-comment&quot;&gt;//去判断是否有值&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt;(y != &lt;span class=&quot;hljs-literal&quot;&gt;undefined&lt;/span&gt;) &amp;#123;&lt;br&gt;      cb(x + y);&lt;br&gt;    &amp;#125;&lt;br&gt;  &amp;#125;);&lt;br&gt;  getY(&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;yVal&lt;/span&gt;)&lt;/span&gt;&amp;#123;&lt;br&gt;    y = yVal;&lt;br&gt;    &lt;span class=&quot;hljs-comment&quot;&gt;//去判断是否有值&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt;(x != &lt;span class=&quot;hljs-literal&quot;&gt;undefined&lt;/span&gt;) &amp;#123;&lt;br&gt;      cb(x + y);&lt;br&gt;    &amp;#125;&lt;br&gt;  &amp;#125;);&lt;br&gt;&amp;#125;&lt;br&gt;add(fetchX, fetchY, &lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;sum&lt;/span&gt;)&lt;/span&gt;&amp;#123;&lt;br&gt;  &lt;span class=&quot;hljs-built_in&quot;&gt;console&lt;/span&gt;.log(sum)&lt;br&gt;&amp;#125;)&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
      <category term="前端" scheme="http://www.lhjailj.top/categories/%E5%89%8D%E7%AB%AF/"/>
    
      <category term="JavaScript" scheme="http://www.lhjailj.top/categories/%E5%89%8D%E7%AB%AF/JavaScript/"/>
    
      <category term="对象" scheme="http://www.lhjailj.top/categories/%E5%89%8D%E7%AB%AF/JavaScript/%E5%AF%B9%E8%B1%A1/"/>
    
    
      <category term="ES6" scheme="http://www.lhjailj.top/tags/ES6/"/>
    
      <category term="Promise" scheme="http://www.lhjailj.top/tags/Promise/"/>
    
      <category term="异步" scheme="http://www.lhjailj.top/tags/%E5%BC%82%E6%AD%A5/"/>
    
  </entry>
  
  <entry>
    <title>迭代器Iterator</title>
    <link href="http://www.lhjailj.top/2020/08/26/2020-08-26-%E8%BF%AD%E4%BB%A3%E5%99%A8Iterator/"/>
    <id>http://www.lhjailj.top/2020/08/26/2020-08-26-%E8%BF%AD%E4%BB%A3%E5%99%A8Iterator/</id>
    <published>2020-08-25T22:34:10.000Z</published>
    <updated>2021-03-10T10:05:30.967Z</updated>
    
    <content type="html"><![CDATA[<h1 id="迭代器"><a href="#迭代器" class="headerlink" title="迭代器"></a>迭代器</h1><p>迭代器（Iterator）是一种接口，为各种不同的数据结构提供统一的访问机制，任何数据结构只要部署Iterator接口，就可以完成遍历操作。</p><p>1、ES6创造了一种新的遍历命令for…of循环，Iterator接口主要供for…of循环使用</p><p>2、原生具备Iterator接口的数据可使用for of遍历</p><a id="more"></a><p>生成一个数组使用for…of遍历</p><figure class="hljs highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs javascript">&lt;script&gt;<br>       <span class="hljs-keyword">const</span> Arr = [<span class="hljs-string">'唐僧'</span>, <span class="hljs-string">'猪八戒'</span>, <span class="hljs-string">'孙悟空'</span>, <span class="hljs-string">'沙僧'</span>]<br>       <span class="hljs-keyword">for</span>(<span class="hljs-keyword">let</span> i <span class="hljs-keyword">of</span> Arr) &#123;<br>           <span class="hljs-built_in">console</span>.log(i)<span class="hljs-comment">//唐僧 猪八戒 孙悟空 沙僧</span><br>       &#125;<br>   &lt;<span class="hljs-regexp">/script&gt;</span><br></code></pre></td></tr></table></figure><p>生成一个数组使用for…in遍历</p><figure class="hljs highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> Arr = [<span class="hljs-string">'唐僧'</span>, <span class="hljs-string">'猪八戒'</span>, <span class="hljs-string">'孙悟空'</span>, <span class="hljs-string">'沙僧'</span>]<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">let</span> i <span class="hljs-keyword">in</span> Arr) &#123;<br>            <span class="hljs-built_in">console</span>.log(i)<br>        &#125;<br></code></pre></td></tr></table></figure><p><strong>for in循环保存的是键名，而for of保存的是键值</strong></p><h2 id="谁可以使用"><a href="#谁可以使用" class="headerlink" title="谁可以使用"></a>谁可以使用</h2><p>可以看到在该数组的方法中有一个<code>Symbol(Symbol.iterator)</code>方法</p><figure class="hljs highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">let</span> iterator = Arr[<span class="hljs-built_in">Symbol</span>.iterator]()<br>        <span class="hljs-built_in">console</span>.log(iterator)<br></code></pre></td></tr></table></figure>{% asset_img 4.png %}<h2 id="工作原理"><a href="#工作原理" class="headerlink" title="工作原理"></a>工作原理</h2><ol><li>创建一个指针对象，指向当前数据结构的起始位置</li><li>第一次调用对象<code>next</code>方法，指针自动指向数据结构的第一个成员</li><li>接下来不断调用next方法，指针一直往后移动，直到指向最后一个成员</li><li>每调用next方法返回一个包含value和done属性的对象</li></ol><figure class="hljs highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> Arr = [<span class="hljs-string">'唐僧'</span>, <span class="hljs-string">'猪八戒'</span>, <span class="hljs-string">'孙悟空'</span>, <span class="hljs-string">'沙僧'</span>]<br>        <span class="hljs-keyword">let</span> iterator = Arr[<span class="hljs-built_in">Symbol</span>.iterator]()<br>        <span class="hljs-built_in">console</span>.log(iterator.next())<br>        <span class="hljs-built_in">console</span>.log(iterator.next())<br>        <span class="hljs-built_in">console</span>.log(iterator.next())<br>        <span class="hljs-built_in">console</span>.log(iterator.next())<br>        <span class="hljs-built_in">console</span>.log(iterator.next())<br></code></pre></td></tr></table></figure><p>当<code>done</code>为true时，表示循环已经完成</p><h2 id="自定义遍历数据"><a href="#自定义遍历数据" class="headerlink" title="自定义遍历数据"></a>自定义遍历数据</h2><figure class="hljs highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> banji = &#123;<br>        <span class="hljs-attr">name</span>: <span class="hljs-string">"终极一班"</span>,<br>        <span class="hljs-attr">stus</span>: [<br>            <span class="hljs-string">'xiaoming'</span>,<br>            <span class="hljs-string">'xiaobai'</span>,<br>            <span class="hljs-string">'xiaohei'</span>,<br>            <span class="hljs-string">'xiaoli'</span>,<br>            <span class="hljs-string">'xiaoning'</span><br>        ],<br>        [<span class="hljs-built_in">Symbol</span>.iterator]()&#123;<br>            <span class="hljs-keyword">let</span> index = <span class="hljs-number">0</span><br>            <span class="hljs-keyword">return</span> &#123;<br>                <span class="hljs-attr">next</span>: <span class="hljs-function"><span class="hljs-params">()</span>=&gt;</span>&#123;<br>                    <span class="hljs-keyword">if</span>(index&lt; <span class="hljs-keyword">this</span>.stus.length)&#123;<br>                        <span class="hljs-keyword">const</span> result = &#123;<span class="hljs-attr">value</span>: <span class="hljs-keyword">this</span>.stus[index], <span class="hljs-attr">done</span>: <span class="hljs-literal">false</span>&#125;<br>                        index++<br>                        <span class="hljs-keyword">return</span> result<br>                    &#125;<span class="hljs-keyword">else</span> &#123;<br>                        <span class="hljs-keyword">return</span> &#123;<span class="hljs-attr">value</span>: <span class="hljs-literal">undefined</span>, <span class="hljs-attr">done</span>: <span class="hljs-literal">true</span>&#125;<br>                    &#125;<br>                    <br>                &#125;<br>            &#125;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">let</span> v <span class="hljs-keyword">of</span> banji) &#123;<br>        <span class="hljs-built_in">console</span>.log(v)<br>    &#125;<br><span class="hljs-comment">//其中的if判断可以优化</span><br><span class="hljs-comment">//优化</span><br>       index &lt; <span class="hljs-keyword">this</span>.stus.length ? <br>       &#123;<span class="hljs-attr">value</span>: <span class="hljs-keyword">this</span>.stus[index++], <span class="hljs-attr">done</span>:<span class="hljs-literal">false</span>&#125; : <br>       &#123;<span class="hljs-attr">value</span>: <span class="hljs-literal">undefined</span>, <span class="hljs-attr">done</span>: <span class="hljs-literal">true</span>&#125;<br><span class="hljs-comment">//再优化</span><br><span class="hljs-keyword">let</span> _this = <span class="hljs-keyword">this</span><br><span class="hljs-keyword">return</span> index &lt; _this.stus.length ?<br>&#123;<span class="hljs-attr">value</span>: _this.stus[index++]&#125; :<br>&#123;<span class="hljs-attr">done</span>: <span class="hljs-literal">true</span>&#125;;<br></code></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;迭代器&quot;&gt;&lt;a href=&quot;#迭代器&quot; class=&quot;headerlink&quot; title=&quot;迭代器&quot;&gt;&lt;/a&gt;迭代器&lt;/h1&gt;&lt;p&gt;迭代器（Iterator）是一种接口，为各种不同的数据结构提供统一的访问机制，任何数据结构只要部署Iterator接口，就可以完成遍历操作。&lt;/p&gt;
&lt;p&gt;1、ES6创造了一种新的遍历命令for…of循环，Iterator接口主要供for…of循环使用&lt;/p&gt;
&lt;p&gt;2、原生具备Iterator接口的数据可使用for of遍历&lt;/p&gt;
    
    </summary>
    
    
      <category term="前端" scheme="http://www.lhjailj.top/categories/%E5%89%8D%E7%AB%AF/"/>
    
      <category term="JavaScript" scheme="http://www.lhjailj.top/categories/%E5%89%8D%E7%AB%AF/JavaScript/"/>
    
      <category term="对象" scheme="http://www.lhjailj.top/categories/%E5%89%8D%E7%AB%AF/JavaScript/%E5%AF%B9%E8%B1%A1/"/>
    
      <category term="控制抽象对象" scheme="http://www.lhjailj.top/categories/%E5%89%8D%E7%AB%AF/JavaScript/%E5%AF%B9%E8%B1%A1/%E6%8E%A7%E5%88%B6%E6%8A%BD%E8%B1%A1%E5%AF%B9%E8%B1%A1/"/>
    
    
      <category term="javascript" scheme="http://www.lhjailj.top/tags/javascript/"/>
    
      <category term="ES6" scheme="http://www.lhjailj.top/tags/ES6/"/>
    
      <category term="迭代器" scheme="http://www.lhjailj.top/tags/%E8%BF%AD%E4%BB%A3%E5%99%A8/"/>
    
  </entry>
  
  <entry>
    <title>深拷贝与浅拷贝</title>
    <link href="http://www.lhjailj.top/2020/08/20/2020-8-20%E6%B7%B1%E6%8B%B7%E8%B4%9D%E4%B8%8E%E6%B5%85%E6%8B%B7%E8%B4%9D/"/>
    <id>http://www.lhjailj.top/2020/08/20/2020-8-20%E6%B7%B1%E6%8B%B7%E8%B4%9D%E4%B8%8E%E6%B5%85%E6%8B%B7%E8%B4%9D/</id>
    <published>2020-08-20T13:28:09.000Z</published>
    <updated>2021-03-14T12:59:52.367Z</updated>
    
    <content type="html"><![CDATA[<h1 id="深拷贝与浅拷贝"><a href="#深拷贝与浅拷贝" class="headerlink" title="深拷贝与浅拷贝"></a>深拷贝与浅拷贝</h1><h2 id="基本类型"><a href="#基本类型" class="headerlink" title="基本类型"></a>基本类型</h2><p>提到深拷贝与浅拷贝就要探讨js中的数据类型，基本类型例如，<code>Number</code>,<code>String</code>等，他们的值是不可变的，动态的修改了基本数据类型的值它的原始值也是不会改变的</p><figure class="hljs highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> s = <span class="hljs-string">"abc"</span><br><span class="hljs-built_in">console</span>.log(st[<span class="hljs-number">1</span>]=<span class="hljs-string">"d"</span>)<br><span class="hljs-built_in">console</span>.log(s)<span class="hljs-comment">//abc</span><br></code></pre></td></tr></table></figure><a id="more"></a><h2 id="引用类型"><a href="#引用类型" class="headerlink" title="引用类型"></a>引用类型</h2><p>引用类型是存放在堆内存中的，变量实际上存放着一个放在栈内存的指针，引用类型可以直接改变它的值</p><h2 id="浅拷贝"><a href="#浅拷贝" class="headerlink" title="浅拷贝"></a>浅拷贝</h2><p>浅拷贝是将原对象或数组的引用直接赋给新对象，新数组它们只是原对象的一个引用</p><p>首先我们通过赋值复制一个数组</p><figure class="hljs highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> obj1 = &#123;<br>       <span class="hljs-string">'name'</span> : <span class="hljs-string">'zhangsan'</span>,<br>       <span class="hljs-string">'age'</span> :  <span class="hljs-string">'18'</span>,<br>       <span class="hljs-string">'language'</span> : [<span class="hljs-number">1</span>,[<span class="hljs-number">2</span>,<span class="hljs-number">3</span>],[<span class="hljs-number">4</span>,<span class="hljs-number">5</span>]],<br>   &#125;;<br><br>   <span class="hljs-keyword">var</span> obj2 = obj1;<br><br><br>   <span class="hljs-keyword">var</span> obj3 = shallowCopy(obj1);<br>   <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">shallowCopy</span>(<span class="hljs-params">src</span>) </span>&#123;<br>       <span class="hljs-keyword">var</span> dst = &#123;&#125;;<br>       <span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> prop <span class="hljs-keyword">in</span> src) &#123;<br>           <span class="hljs-keyword">if</span> (src.hasOwnProperty(prop)) &#123;<br>               dst[prop] = src[prop];<br>           &#125;<br>       &#125;<br>       <span class="hljs-keyword">return</span> dst;<br>   &#125;<br><br>   obj2.name = <span class="hljs-string">"lisi"</span>;<br>   obj3.age = <span class="hljs-string">"20"</span>;<br><br>   obj2.language[<span class="hljs-number">1</span>] = [<span class="hljs-string">"二"</span>,<span class="hljs-string">"三"</span>];<br>   obj3.language[<span class="hljs-number">2</span>] = [<span class="hljs-string">"四"</span>,<span class="hljs-string">"五"</span>];<br><br>   <span class="hljs-built_in">console</span>.log(obj1);  <br>   <span class="hljs-comment">//obj1 = &#123;</span><br>   <span class="hljs-comment">//    'name' : 'lisi',</span><br>   <span class="hljs-comment">//    'age' :  '18',</span><br>   <span class="hljs-comment">//    'language' : [1,["二","三"],["四","五"]],</span><br>   <span class="hljs-comment">//&#125;;</span><br><br>   <span class="hljs-built_in">console</span>.log(obj2);<br>   <span class="hljs-comment">//obj2 = &#123;</span><br>   <span class="hljs-comment">//    'name' : 'lisi',</span><br>   <span class="hljs-comment">//    'age' :  '18',</span><br>   <span class="hljs-comment">//    'language' : [1,["二","三"],["四","五"]],</span><br>   <span class="hljs-comment">//&#125;;</span><br><br>   <span class="hljs-built_in">console</span>.log(obj3);<br>   <span class="hljs-comment">//obj3 = &#123;</span><br>   <span class="hljs-comment">//    'name' : 'zhangsan',</span><br>   <span class="hljs-comment">//    'age' :  '20',</span><br>   <span class="hljs-comment">//    'language' : [1,["二","三"],["四","五"]],</span><br>   <span class="hljs-comment">//&#125;;</span><br></code></pre></td></tr></table></figure><p>如果属性是基本数据类型，拷贝的就是基本类型的值，如果属性是引用类型拷贝的就是内存地址，所以如果其中一个对像改变了，这个引用类型的属性或者说是地就会影响到另一个对像。</p><h2 id="深拷贝"><a href="#深拷贝" class="headerlink" title="深拷贝"></a>深拷贝</h2><p>创建一个新的对像和数组，将原对象的各个属性的值（数组的所有元素）拷贝过来，<strong>是值而不是引用</strong></p><figure class="hljs highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> array = [<br>    &#123; <span class="hljs-attr">number</span>: <span class="hljs-number">1</span> &#125;,<br>    &#123; <span class="hljs-attr">number</span>: <span class="hljs-number">2</span> &#125;,<br>    &#123; <span class="hljs-attr">number</span>: <span class="hljs-number">3</span> &#125;<br>];<br><span class="hljs-keyword">var</span> copyArray = <span class="hljs-built_in">JSON</span>.parse(<span class="hljs-built_in">JSON</span>.stringify(array))<br>copyArray[<span class="hljs-number">0</span>].number = <span class="hljs-number">100</span>;<br><span class="hljs-built_in">console</span>.log(array); <span class="hljs-comment">//  [&#123;number: 1&#125;, &#123; number: 2 &#125;, &#123; number: 3 &#125;]</span><br><span class="hljs-built_in">console</span>.log(copyArray); <span class="hljs-comment">// [&#123;number: 100&#125;, &#123; number: 2 &#125;, &#123; number: 3 &#125;]</span><br></code></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;深拷贝与浅拷贝&quot;&gt;&lt;a href=&quot;#深拷贝与浅拷贝&quot; class=&quot;headerlink&quot; title=&quot;深拷贝与浅拷贝&quot;&gt;&lt;/a&gt;深拷贝与浅拷贝&lt;/h1&gt;&lt;h2 id=&quot;基本类型&quot;&gt;&lt;a href=&quot;#基本类型&quot; class=&quot;headerlink&quot; title=&quot;基本类型&quot;&gt;&lt;/a&gt;基本类型&lt;/h2&gt;&lt;p&gt;提到深拷贝与浅拷贝就要探讨js中的数据类型，基本类型例如，&lt;code&gt;Number&lt;/code&gt;,&lt;code&gt;String&lt;/code&gt;等，他们的值是不可变的，动态的修改了基本数据类型的值它的原始值也是不会改变的&lt;/p&gt;
&lt;figure class=&quot;hljs highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;code class=&quot;hljs javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; s = &lt;span class=&quot;hljs-string&quot;&gt;&quot;abc&quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;hljs-built_in&quot;&gt;console&lt;/span&gt;.log(st[&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;]=&lt;span class=&quot;hljs-string&quot;&gt;&quot;d&quot;&lt;/span&gt;)&lt;br&gt;&lt;span class=&quot;hljs-built_in&quot;&gt;console&lt;/span&gt;.log(s)&lt;span class=&quot;hljs-comment&quot;&gt;//abc&lt;/span&gt;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
      <category term="前端" scheme="http://www.lhjailj.top/categories/%E5%89%8D%E7%AB%AF/"/>
    
      <category term="JavaScript" scheme="http://www.lhjailj.top/categories/%E5%89%8D%E7%AB%AF/JavaScript/"/>
    
      <category term="对象" scheme="http://www.lhjailj.top/categories/%E5%89%8D%E7%AB%AF/JavaScript/%E5%AF%B9%E8%B1%A1/"/>
    
    
      <category term="javascript" scheme="http://www.lhjailj.top/tags/javascript/"/>
    
  </entry>
  
  <entry>
    <title>Date函数</title>
    <link href="http://www.lhjailj.top/2020/08/17/2020-8-17-Date%E5%87%BD%E6%95%B0/"/>
    <id>http://www.lhjailj.top/2020/08/17/2020-8-17-Date%E5%87%BD%E6%95%B0/</id>
    <published>2020-08-17T09:40:18.000Z</published>
    <updated>2021-03-10T09:37:56.265Z</updated>
    
    <content type="html"><![CDATA[<h1 id="JS日期"><a href="#JS日期" class="headerlink" title="JS日期"></a>JS日期</h1><h2 id="关于创建时间对象"><a href="#关于创建时间对象" class="headerlink" title="关于创建时间对象"></a>关于创建时间对象</h2><h3 id="创建日期对象的四种方法"><a href="#创建日期对象的四种方法" class="headerlink" title="创建日期对象的四种方法"></a>创建日期对象的四种方法</h3><p><code>new Date()</code></p><p><code>new Date(year, month,day, hours, minutes, seconds, milliseconds)</code></p><p><code>new Date(milliseconds)</code></p><p><code>new Date(date string)</code></p><p>1、不传参数创建日期</p><figure class="hljs highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> d = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Date</span>();<span class="hljs-comment">//Mon Aug 17 2020 17:47:35 GMT+0800 (中国标准时间)</span><br></code></pre></td></tr></table></figure><p>2、加入年月日等参数</p><a id="more"></a><figure class="hljs highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> d = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Date</span>(<span class="hljs-number">2020</span>, <span class="hljs-number">11</span>, <span class="hljs-number">11</span>);<span class="hljs-comment">//Fri Dec 11 2020 00:00:00 GMT+0800 (中国标准时间)</span><br><span class="hljs-comment">//为日期指定内容</span><br></code></pre></td></tr></table></figure><p>注：<strong>对于月份来说一月的索引为0，12月为11</strong></p><p>所以我们在获取月份时也要注意+1才是正确的我们所说的月份</p><p>3、如果只传入一个参数，则按照毫秒为参数添加进函数,将返回一个按照零时加上毫秒数的新的日期对象</p><figure class="hljs highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> d = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Date</span>(<span class="hljs-number">0</span>);<br></code></pre></td></tr></table></figure><p>JavaScript 将日期存储为自 1970 年 1 月 1 日 00:00:00 UTC（协调世界时）以来的毫秒数。</p><p>零时间是 1970 年 1 月 1 日 00:00:00 UTC。</p><p>4、传入时间字符串会返回一个新的日期对象</p><figure class="hljs highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> d = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Date</span>(<span class="hljs-string">"October 13, 2014 11:13:00"</span>);<br></code></pre></td></tr></table></figure><h3 id="日期的获取方法"><a href="#日期的获取方法" class="headerlink" title="日期的获取方法"></a>日期的获取方法</h3><h3 id="关于-new-Date"><a href="#关于-new-Date" class="headerlink" title="关于+new Date()"></a>关于+new Date()</h3><p>这个操作是将日期函数转换类型</p><p>以毫秒显示</p><p>对时间进行格式化,后端提供以秒为单位的时间数据</p><p>将其转换为00:00:00（小时：分钟：秒），并且位数为一位数时，进行补0，避免出现3:20这样的时间应该显示为03:20。</p><figure class="hljs highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs javascript">formateTime(seconds) &#123;<br>      <span class="hljs-keyword">if</span> (seconds &lt; <span class="hljs-number">60</span>) &#123;<br>        <span class="hljs-keyword">return</span> seconds.toString().padStart(<span class="hljs-number">2</span>, <span class="hljs-string">'0'</span>)<br>      &#125;<br>      <span class="hljs-keyword">if</span> (seconds &lt; <span class="hljs-number">3600</span>) &#123;<br>        <span class="hljs-keyword">const</span> m = <span class="hljs-built_in">String</span>(<span class="hljs-built_in">parseInt</span>(seconds / <span class="hljs-number">60</span>)).padStart(<span class="hljs-number">2</span>, <span class="hljs-string">'0'</span>)<br>        <span class="hljs-keyword">const</span> s = <span class="hljs-built_in">String</span>(<span class="hljs-built_in">parseInt</span>(seconds % <span class="hljs-number">60</span>)).padStart(<span class="hljs-number">2</span>, <span class="hljs-string">'0'</span>)<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">`<span class="hljs-subst">$&#123;m&#125;</span>:<span class="hljs-subst">$&#123;s&#125;</span>`</span><br>      &#125;<br>      <span class="hljs-keyword">const</span> h = <span class="hljs-built_in">String</span>(<span class="hljs-built_in">parseInt</span>(seconds / <span class="hljs-number">3600</span>)).padStart(<span class="hljs-number">2</span>, <span class="hljs-string">'0'</span>)<br>      <span class="hljs-keyword">const</span> m = <span class="hljs-built_in">String</span>(<span class="hljs-built_in">parseInt</span>((seconds % <span class="hljs-number">3600</span>) / <span class="hljs-number">60</span>)).padStart(<span class="hljs-number">2</span>, <span class="hljs-string">'0'</span>)<br>      <span class="hljs-keyword">const</span> s = <span class="hljs-built_in">String</span>(<span class="hljs-built_in">parseInt</span>((seconds % <span class="hljs-number">3600</span>) % <span class="hljs-number">60</span>)).padStart(<span class="hljs-number">2</span>, <span class="hljs-string">'0'</span>)<br>      <span class="hljs-keyword">return</span> <span class="hljs-string">`<span class="hljs-subst">$&#123;h&#125;</span>:<span class="hljs-subst">$&#123;m&#125;</span>:<span class="hljs-subst">$&#123;s&#125;</span>`</span><br>    &#125;<br></code></pre></td></tr></table></figure><h3 id="时间戳转换"><a href="#时间戳转换" class="headerlink" title="时间戳转换"></a>时间戳转换</h3><p>new Date(1598338225474)，如果是秒为单位需要乘1000</p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;JS日期&quot;&gt;&lt;a href=&quot;#JS日期&quot; class=&quot;headerlink&quot; title=&quot;JS日期&quot;&gt;&lt;/a&gt;JS日期&lt;/h1&gt;&lt;h2 id=&quot;关于创建时间对象&quot;&gt;&lt;a href=&quot;#关于创建时间对象&quot; class=&quot;headerlink&quot; title=&quot;关于创建时间对象&quot;&gt;&lt;/a&gt;关于创建时间对象&lt;/h2&gt;&lt;h3 id=&quot;创建日期对象的四种方法&quot;&gt;&lt;a href=&quot;#创建日期对象的四种方法&quot; class=&quot;headerlink&quot; title=&quot;创建日期对象的四种方法&quot;&gt;&lt;/a&gt;创建日期对象的四种方法&lt;/h3&gt;&lt;p&gt;&lt;code&gt;new Date()&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;new Date(year, month,day, hours, minutes, seconds, milliseconds)&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;new Date(milliseconds)&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;new Date(date string)&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;1、不传参数创建日期&lt;/p&gt;
&lt;figure class=&quot;hljs highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;code class=&quot;hljs javascript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; d = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;Date&lt;/span&gt;();&lt;span class=&quot;hljs-comment&quot;&gt;//Mon Aug 17 2020 17:47:35 GMT+0800 (中国标准时间)&lt;/span&gt;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;2、加入年月日等参数&lt;/p&gt;
    
    </summary>
    
    
      <category term="前端" scheme="http://www.lhjailj.top/categories/%E5%89%8D%E7%AB%AF/"/>
    
      <category term="JavaScript" scheme="http://www.lhjailj.top/categories/%E5%89%8D%E7%AB%AF/JavaScript/"/>
    
    
      <category term="JS" scheme="http://www.lhjailj.top/tags/JS/"/>
    
      <category term="Date对象" scheme="http://www.lhjailj.top/tags/Date%E5%AF%B9%E8%B1%A1/"/>
    
  </entry>
  
  <entry>
    <title>记this的指向</title>
    <link href="http://www.lhjailj.top/2020/08/01/2020-08-01%E8%AE%B0this%E7%9A%84%E6%8C%87%E5%90%91/"/>
    <id>http://www.lhjailj.top/2020/08/01/2020-08-01%E8%AE%B0this%E7%9A%84%E6%8C%87%E5%90%91/</id>
    <published>2020-08-01T13:27:39.000Z</published>
    <updated>2021-03-10T09:38:20.758Z</updated>
    
    <content type="html"><![CDATA[<h2 id="this的指向"><a href="#this的指向" class="headerlink" title="this的指向"></a>this的指向</h2><p>this的指向在函数的定义的时候是确定不了的，只有函数执行的时候才能确定this到底指向谁，所以this的最终指向的是调用它的对象（理论上）</p><p>第一个例子</p><figure class="hljs highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">app</span>(<span class="hljs-params"></span>)</span>&#123;<br>    <span class="hljs-keyword">var</span> user = <span class="hljs-string">"bpp"</span>; <br>    <span class="hljs-built_in">console</span>.log(user);<span class="hljs-comment">//undefined</span><br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-keyword">this</span>);<span class="hljs-comment">//window</span><br>&#125;<br>app()在全局作用域<span class="hljs-built_in">window</span>中调用app()<br></code></pre></td></tr></table></figure><p>此时this最终指向的是调用它的对象window，相当于<code>window.app()</code></p><a id="more"></a><p>第二个例子</p><figure class="hljs highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> temp = &#123;<br>    <span class="hljs-attr">user</span>: <span class="hljs-string">'name'</span>,<br>    <span class="hljs-attr">fn</span>:<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;<br>        <span class="hljs-built_in">console</span>.log(<span class="hljs-keyword">this</span>.user);<span class="hljs-comment">//name</span><br>    &#125;<br>&#125;<br>temp.fn()<br></code></pre></td></tr></table></figure><p>此时因为是对象temp调用了fn，所以this指向它的调用者temp</p><p>例子三证明了我们的this指向它的调用者是一个理论上的说法</p><figure class="hljs highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> temp = &#123;<br>    <span class="hljs-attr">user</span>: <span class="hljs-string">'name'</span>,<br>    <span class="hljs-attr">fn</span>:<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;<br>        <span class="hljs-built_in">console</span>.log(<span class="hljs-keyword">this</span>.user);<span class="hljs-comment">//name</span><br>    &#125;<br>&#125;<br><span class="hljs-built_in">window</span>.temp.fn()<br></code></pre></td></tr></table></figure><p><strong>通过window调用发现this没有指向window</strong></p><p>例子四</p><figure class="hljs highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs undefined">var <span class="hljs-keyword">temp</span> = &#123;<br><span class="hljs-keyword">user</span>:<span class="hljs-string">'yy'</span><br>temp2：&#123;<br> <span class="hljs-keyword">user</span>: <span class="hljs-string">'name'</span>,<br>    fn:<span class="hljs-keyword">function</span>()&#123;<br>        console.log(this.<span class="hljs-keyword">user</span>);//<span class="hljs-type">name</span><br>  &#125;<br> &#125;  <br>&#125;<br><span class="hljs-keyword">temp</span>.temp2.fn()<br></code></pre></td></tr></table></figure><p>这里的temp2是通过temp点出来的，this同样没有指向它说明</p><ol><li>如果一个函数中有this没有通过上一级对象调用，那么它指向window</li><li>如果有上一级对象调用，那么this指向它的上一级对象</li><li>如果这个函数被多个对象嵌套，那么尽管这个函数被最外层的对象调用，this也指向它的上一级对象。</li></ol><p><strong>特殊情况</strong></p><figure class="hljs highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> temp1 = &#123;<br>    <span class="hljs-attr">b</span>:&#123;<br>        a = <span class="hljs-number">10</span>,<br>        <span class="hljs-attr">fn</span>:<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;<br>        <span class="hljs-built_in">console</span>.log(<span class="hljs-keyword">this</span>.a);<span class="hljs-comment">//undefined</span><br>        <span class="hljs-built_in">console</span>.log(<span class="hljs-keyword">this</span>);<span class="hljs-comment">//window</span><br>  &#125;<br>   &#125;<br>  <br>&#125;<br><span class="hljs-keyword">var</span> j = temp1.b.fn;<br>j()<br></code></pre></td></tr></table></figure><p>此时的this没有指向最后调用它的b，因为在fn赋值给变量j的时候函数并没有运行，最终指向的是window</p><p>构造函数的this</p><figure class="hljs highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">fn</span>(<span class="hljs-params"></span>)</span>&#123;<br>    <span class="hljs-keyword">this</span>.user= <span class="hljs-string">"aaa"</span>;<br>&#125;<br><span class="hljs-keyword">var</span> a = <span class="hljs-keyword">new</span> fn();<br><span class="hljs-built_in">console</span>.log(a.user);<span class="hljs-comment">//aaa</span><br></code></pre></td></tr></table></figure><p>这里之所以对象a可以点出函数Fn里面的user是因为new关键字可以改变this的指向，将这个this指向对象a，为什么我说a是对象，因为用了new关键字就是创建一个对象实例，理解这句话可以想想我们的例子3，我们这里用变量a创建了一个Fn的实例（相当于复制了一份Fn到对象a里面），此时仅仅只是创建，并没有执行，而调用这个函数Fn的是对象a，那么this指向的自然是对象a，那么为什么对象a中会有user，因为你已经复制了一份Fn函数到对象a中，用了new关键字就等同于复制了一份。</p><p>　　除了上面的这些以外，我们还可以自行改变this的指向，关于自行改变this的指向请看<a href="http://www.cnblogs.com/pssp/p/5215621.html" target="_blank" rel="noopener">JavaScript中call,apply,bind方法的总结</a>这篇文章，详细的说明了我们如何手动更改this的指向。</p><p>当this碰到return时</p><figure class="hljs highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">fn</span>(<span class="hljs-params"></span>)</span>&#123;<br>    <span class="hljs-keyword">this</span>.uer=<span class="hljs-string">"aaa"</span>;<br>    <span class="hljs-keyword">return</span> &#123;&#125;<br>&#125;<br><span class="hljs-keyword">var</span> a = <span class="hljs-keyword">new</span> fn();<br><span class="hljs-built_in">console</span>.log(a.user); <span class="hljs-comment">//undefined</span><br></code></pre></td></tr></table></figure><figure class="hljs highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">fn</span>(<span class="hljs-params"></span>)  <br></span>&#123;  <br>    <span class="hljs-keyword">this</span>.user = <span class="hljs-string">'aaaa'</span>;  <br>    <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>&#125;<br><span class="hljs-keyword">var</span> a = <span class="hljs-keyword">new</span> fn;  <br><span class="hljs-built_in">console</span>.log(a.user); <span class="hljs-comment">//aaaa</span><br></code></pre></td></tr></table></figure><p><strong>如果返回值是一个对象，那么this指向的就是那个返回的对象，如果返回值不是一个对象那么this还是指向函数的实例。</strong></p><h2 id="补充"><a href="#补充" class="headerlink" title="补充"></a>补充</h2><p>在严格模式中默认的this不再时window，而是undefined</p><p>new操作符会改变this的指向问题</p><figure class="hljs highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">fn</span>(<span class="hljs-params"></span>)</span>&#123;<br>    <span class="hljs-keyword">this</span>.user= <span class="hljs-string">"aaa"</span>;<br>&#125;<br><span class="hljs-keyword">var</span> a = <span class="hljs-keyword">new</span> fn();<br><span class="hljs-built_in">console</span>.log(a.user);<span class="hljs-comment">//aaa</span><br></code></pre></td></tr></table></figure><p>为什么this会指向a？首先new关键字会创建一个空的对象，然后会自动调用一个函数（比如apply）方法，将this指向这个空对象，这样的化函数内部的this就会被这个空的对象替代</p><h2 id="Vue中的this"><a href="#Vue中的this" class="headerlink" title="Vue中的this"></a>Vue中的this</h2><p>我们可以看到在vue的组件中，我们调用了某个ui组件，使用的使用都会用到this，并且在获取数据的时候也会用到this</p><p>获取用户列表数据</p><p>使用elementui框架的弹框组件</p><p>Vue中的this指向当前组件的实例</p><p>使用箭头函数没有自己的this，所以指向组件当前的实例</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;this的指向&quot;&gt;&lt;a href=&quot;#this的指向&quot; class=&quot;headerlink&quot; title=&quot;this的指向&quot;&gt;&lt;/a&gt;this的指向&lt;/h2&gt;&lt;p&gt;this的指向在函数的定义的时候是确定不了的，只有函数执行的时候才能确定this到底指向谁，所以this的最终指向的是调用它的对象（理论上）&lt;/p&gt;
&lt;p&gt;第一个例子&lt;/p&gt;
&lt;figure class=&quot;hljs highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;code class=&quot;hljs javascript&quot;&gt;&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;app&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;/span&gt;)&lt;/span&gt;&amp;#123;&lt;br&gt;    &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; user = &lt;span class=&quot;hljs-string&quot;&gt;&quot;bpp&quot;&lt;/span&gt;; &lt;br&gt;    &lt;span class=&quot;hljs-built_in&quot;&gt;console&lt;/span&gt;.log(user);&lt;span class=&quot;hljs-comment&quot;&gt;//undefined&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;hljs-built_in&quot;&gt;console&lt;/span&gt;.log(&lt;span class=&quot;hljs-keyword&quot;&gt;this&lt;/span&gt;);&lt;span class=&quot;hljs-comment&quot;&gt;//window&lt;/span&gt;&lt;br&gt;&amp;#125;&lt;br&gt;app()在全局作用域&lt;span class=&quot;hljs-built_in&quot;&gt;window&lt;/span&gt;中调用app()&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;此时this最终指向的是调用它的对象window，相当于&lt;code&gt;window.app()&lt;/code&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="前端" scheme="http://www.lhjailj.top/categories/%E5%89%8D%E7%AB%AF/"/>
    
      <category term="JavaScript" scheme="http://www.lhjailj.top/categories/%E5%89%8D%E7%AB%AF/JavaScript/"/>
    
    
      <category term="JS" scheme="http://www.lhjailj.top/tags/JS/"/>
    
  </entry>
  
  <entry>
    <title>7-31记</title>
    <link href="http://www.lhjailj.top/2020/07/31/7-31%E8%AE%B0/"/>
    <id>http://www.lhjailj.top/2020/07/31/7-31%E8%AE%B0/</id>
    <published>2020-07-31T15:44:22.000Z</published>
    <updated>2021-03-10T09:40:27.738Z</updated>
    
    <content type="html"><![CDATA[<p>模板字符串</p><p>数据库中返回的是纯数字模式的时间，例如下午四点，数据库中存储的为16，下午六点，数据库中储存的为18，</p><p>要求是我们需要将16展示为16：00-16：59的时间段</p><p>在elementUi的表格中</p><figure class="hljs highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">el-table-column</span> <span class="hljs-attr">label</span>=<span class="hljs-string">"姓名"</span> <span class="hljs-attr">width</span>=<span class="hljs-string">"180"</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">template</span> <span class="hljs-attr">slot-scope</span>=<span class="hljs-string">"&#123;row&#125;"</span>&gt;</span>&#123;&#123; `$(row.hour):00 - $(row.hour):59` &#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span><br> <span class="hljs-tag">&lt;/<span class="hljs-name">el-table-column</span>&gt;</span><br></code></pre></td></tr></table></figure><a id="more"></a><ol><li><p>解构赋值</p><p>对象的解构赋值</p><figure class="hljs highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">let</span> &#123;foo, bar&#125; = &#123;<span class="hljs-attr">foo</span>: <span class="hljs-string">'aaa'</span>, <span class="hljs-attr">bar</span>: <span class="hljs-string">'bbb'</span>&#125;<br>foo <span class="hljs-comment">// 'aaa'</span><br>bar <span class="hljs-comment">// 'bbb'</span><br></code></pre></td></tr></table></figure><p>对像的属性没有次序，变量必须与属性同名，才能正确的值</p><ol start="3"><li>JSON.stringify({x:5,y:6}) //{‘x’:’5’,”y”,’6’}</li><li>JSON.parse(json)//解析json转为js值或对象</li></ol></li></ol>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;模板字符串&lt;/p&gt;
&lt;p&gt;数据库中返回的是纯数字模式的时间，例如下午四点，数据库中存储的为16，下午六点，数据库中储存的为18，&lt;/p&gt;
&lt;p&gt;要求是我们需要将16展示为16：00-16：59的时间段&lt;/p&gt;
&lt;p&gt;在elementUi的表格中&lt;/p&gt;
&lt;figure class=&quot;hljs highlight html&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;code class=&quot;hljs html&quot;&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;el-table-column&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;label&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;姓名&quot;&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;width&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;180&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;template&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;slot-scope&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;&amp;#123;row&amp;#125;&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&amp;#123;&amp;#123; `$(row.hour):00 - $(row.hour):59` &amp;#125;&amp;#125;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;template&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br&gt; &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;el-table-column&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
      <category term="前端" scheme="http://www.lhjailj.top/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="JS" scheme="http://www.lhjailj.top/tags/JS/"/>
    
      <category term="组件库" scheme="http://www.lhjailj.top/tags/%E7%BB%84%E4%BB%B6%E5%BA%93/"/>
    
  </entry>
  
  <entry>
    <title>vue后台管理系统</title>
    <link href="http://www.lhjailj.top/2020/07/16/2019-01-02vue%E5%90%8E%E5%8F%B0%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F/"/>
    <id>http://www.lhjailj.top/2020/07/16/2019-01-02vue%E5%90%8E%E5%8F%B0%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F/</id>
    <published>2020-07-16T14:31:24.000Z</published>
    <updated>2021-03-10T10:07:22.567Z</updated>
    
    <content type="html"><![CDATA[<h2 id="使用VueElementUI-thinkJS搭建后台管理系统"><a href="#使用VueElementUI-thinkJS搭建后台管理系统" class="headerlink" title="使用VueElementUI+thinkJS搭建后台管理系统"></a>使用VueElementUI+thinkJS搭建后台管理系统</h2><p>后台的核心就是提供数据，封装操作数据库的接口提供给前端调用。使用了Vue-element-admin的模板加thinkJS+Mysql快速的搭建起项目,</p><p>主要练习前端登录验证，数据列表，获取用户信息和elementUi组件。</p><a id="more"></a><h3 id="前端的登录过程"><a href="#前端的登录过程" class="headerlink" title="前端的登录过程"></a>前端的登录过程</h3><h4 id="首先在后台创建接口来处理前端的登录的相关请求。"><a href="#首先在后台创建接口来处理前端的登录的相关请求。" class="headerlink" title="首先在后台创建接口来处理前端的登录的相关请求。"></a>首先在后台创建接口来处理前端的登录的相关请求。</h4><p>1、创建登录接口</p><p>2、使用JWT保持用户的登录状态，可以实现跨域的身份验证</p><figure class="hljs highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">//在config中配置jwt的加密和cookie</span><br><span class="hljs-attr">jwt</span>:&#123;<br>    <span class="hljs-attr">secret</span>:<span class="hljs-string">"passwordss"</span>,<br>    <span class="hljs-attr">cookie</span>:<span class="hljs-string">'jwt-token'</span>,<span class="hljs-comment">//cookie中字段的设置</span><br>    <span class="hljs-attr">expire</span>:<span class="hljs-number">3000</span><span class="hljs-comment">//秒，口令的有效时间</span><br>  &#125;,<br></code></pre></td></tr></table></figure><figure class="hljs highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><br>checkAuth()&#123;<br>    <span class="hljs-keyword">let</span> token = <span class="hljs-keyword">this</span>.ctx.headers[<span class="hljs-string">'x-token'</span>];<br>    <span class="hljs-comment">//sercet加密，exipre时间，this.config('jwt')获取config中的jwt配置</span><br>    <span class="hljs-keyword">const</span> &#123;secret,cookie,exipre&#125; = <span class="hljs-keyword">this</span>.config(<span class="hljs-string">'jwt'</span>)<br><br>    <span class="hljs-keyword">try</span> &#123;<br>      <span class="hljs-keyword">var</span> tokenObj = token ? jsonwebtoken.verify(token,secret):&#123;&#125;;<br>      <span class="hljs-keyword">this</span>.ctx.state.username = tokenObj.name;<br>    &#125; <span class="hljs-keyword">catch</span> (error) &#123;<br>      <span class="hljs-keyword">return</span> <span class="hljs-keyword">this</span>.authFail()<br>    &#125;<br><br>    <span class="hljs-keyword">if</span>(!tokenObj.name)&#123;<br>      <span class="hljs-keyword">return</span> <span class="hljs-keyword">this</span>.authFail()<br>    &#125;<br><br>    <span class="hljs-keyword">this</span>.updateAuth(token.name)<br>  &#125;<br><span class="hljs-comment">//更新token</span><br>  updateAuth(userName)&#123;<br>    <span class="hljs-keyword">const</span> userInfo = &#123;<br>      <span class="hljs-attr">name</span>:userName<br>    &#125;;<br>    <span class="hljs-comment">// 获取jwt的配置信息</span><br>    <span class="hljs-keyword">const</span> &#123;secret,cookie,expire&#125; = <span class="hljs-keyword">this</span>.config(<span class="hljs-string">'jwt'</span>)<br>    <span class="hljs-keyword">const</span> token = jsonwebtoken.sign(userInfo,secret,&#123;<span class="hljs-attr">expiresIn</span>:expire&#125;);<br>    <span class="hljs-keyword">this</span>.cookie(cookie,token);<br> <span class="hljs-comment">//客户端收到服务器返回的 JWT，可以储存在 Cookie 里面，也可以储存在 localStorage。</span><br><span class="hljs-comment">//此后，客户端每次与服务器通信，都要带上这个 JWT。你可以把它放在 Cookie 里面自动发送，但是这样不能跨域，所以更好的做法是放在 HTTP 请求的头信息Authorization字段里面。</span><br>    <span class="hljs-keyword">this</span>.header(<span class="hljs-string">'authoriztion'</span>,token);<br>    <span class="hljs-keyword">return</span> token;<br>  &#125;<br>&#125;;<br><span class="hljs-comment">// 失败处理</span><br>  authFail()&#123;<br>    <span class="hljs-keyword">this</span>.json(&#123;<span class="hljs-attr">error</span>:<span class="hljs-string">"JWT校验失败"</span>&#125;);<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>  &#125;<br></code></pre></td></tr></table></figure><p>随后在中间件中引入jwt</p><h5 id="JWT原理"><a href="#JWT原理" class="headerlink" title="JWT原理"></a>JWT原理</h5><p>JWT的原理是，服务器认证以后生成一个JSON对象，发回给用户，</p><figure class="hljs highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs json">&#123;<br>    <span class="hljs-attr">"姓名"</span>: <span class="hljs-string">"小刘"</span>,<br>    <span class="hljs-attr">"角色"</span>: <span class="hljs-string">"管理员"</span>,<br>    <span class="hljs-attr">"到期时间"</span>: <span class="hljs-string">"2020年8月1日0点0分"</span><br>&#125;<br></code></pre></td></tr></table></figure><p>以后，用户与服务端通信的时候，都要发回这个 JSON 对象。服务器完全只靠这个对象认定用户身份。为了防止用户篡改数据，服务器在生成这个对象的时候，会加上签名；</p><p>JWT的三个部分依次如下。</p><p>Header(头部)、Payload(负载)、Signature(签名)</p><p>Header.payload.Signature</p><h5 id="JWT的使用方式"><a href="#JWT的使用方式" class="headerlink" title="JWT的使用方式"></a>JWT的使用方式</h5><p>客户端收到服务器返回的JWT，可以存储在Cookie里面，也可以存储在localStorage。</p><p>此后，客户端每次与服务器通信，都要带上这个 JWT。你可以把它放在 Cookie 里面自动发送，但是这样不能跨域，所以更好的做法是放在 HTTP 请求的头信息<code>Authorization</code>字段里面。</p><figure class="hljs highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs undefined"><span class="hljs-symbol">Authorization:</span>Bearer<span class="hljs-params">&lt;token&gt;</span><br></code></pre></td></tr></table></figure><p>另一种方式是，在跨域的时候，JWT就放在POST请求的数据体里面</p><h4 id="进入前端的登录逻辑"><a href="#进入前端的登录逻辑" class="headerlink" title="进入前端的登录逻辑"></a>进入前端的登录逻辑</h4><p>1、在login.vue中修改路由并在router中修改路由，在根目录时跳转到login页</p><p>2、前端中封装axios请求，同时设置baseurl,并设置跨域</p><figure class="hljs highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs javascript">baseURL: process.env.VUE_APP_BASE_API, <span class="hljs-comment">// url = base url + request url</span><br><span class="hljs-comment">//在.env.development中将base设置</span><br>VUE_APP_BASE_API = <span class="hljs-string">'/api'</span><br><span class="hljs-comment">//在vue.config.js中设置代理服务器</span><br><span class="hljs-attr">proxy</span>:&#123;<br>      <span class="hljs-string">'/api'</span>:&#123;<br>        <span class="hljs-attr">target</span>:<span class="hljs-string">'http://127.0.0.1:8360'</span>,<br>        <span class="hljs-attr">pathRewrite</span>:&#123;<br>          <span class="hljs-string">'^/api'</span>:<span class="hljs-string">""</span><br>        &#125;<br>      &#125;<br>    &#125;<br></code></pre></td></tr></table></figure><p>3、编写登录请求</p><figure class="hljs highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">export</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">login</span>(<span class="hljs-params">data</span>) </span>&#123;<br>  <span class="hljs-keyword">return</span> request(&#123;<br>    <span class="hljs-attr">url</span>: <span class="hljs-string">'/user/login/login'</span>,<br>    <span class="hljs-attr">method</span>: <span class="hljs-string">'post'</span>,<br>    data<br>  &#125;)<br>&#125;<br><span class="hljs-keyword">export</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">getInfo</span>(<span class="hljs-params">token</span>) </span>&#123;<br>  <span class="hljs-keyword">return</span> request(&#123;<br>    <span class="hljs-attr">url</span>: <span class="hljs-string">'/admin/index/userInfo'</span>,<br>    <span class="hljs-attr">method</span>: <span class="hljs-string">'get'</span><br>  &#125;)<br>&#125;<br></code></pre></td></tr></table></figure><p>4、Vuex编写获取用户信息函数在数据库中获取用户名头像等</p><p>5、登出仅需删除token</p><figure class="hljs highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// user logout</span><br>logout(&#123; commit, state &#125;) &#123;<br>  <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-built_in">Promise</span>(<span class="hljs-function">(<span class="hljs-params">resolve, reject</span>) =&gt;</span> &#123;<br><br>      removeToken() <span class="hljs-comment">// must remove  token  first</span><br>      resetRouter()<br>      commit(<span class="hljs-string">'RESET_STATE'</span>)<br>      resolve()<br><br>  &#125;)<br>&#125;,<br></code></pre></td></tr></table></figure><h3 id="用户管理获取用户列表删除修改增加等"><a href="#用户管理获取用户列表删除修改增加等" class="headerlink" title="用户管理获取用户列表删除修改增加等"></a>用户管理获取用户列表删除修改增加等</h3><h4 id="后台创建用户管理接口"><a href="#后台创建用户管理接口" class="headerlink" title="后台创建用户管理接口"></a>后台创建用户管理接口</h4>{% asset_img 2.png %}<p>编写从数据库获取用户列表和删除列表等接口</p><h4 id="前端用户列表增删改查"><a href="#前端用户列表增删改查" class="headerlink" title="前端用户列表增删改查"></a>前端用户列表增删改查</h4><p>用户列表使用table组件，模板中匹配对应数据，在点击增加用户时设置跳转路由，跳转到对应增加信息的页面。</p><h4 id="列表分页操作"><a href="#列表分页操作" class="headerlink" title="列表分页操作"></a>列表分页操作</h4><figure class="hljs highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs javascript">&lt;el-pagination<br>      background<br>      layout="prev, pager, next"<br>      :total="total" @current-change="getPageUsers"&gt;<br>    &lt;/el-pagination&gt;<br>//total总条数从后端获取<br>//下一页<br>getPageUsers(page) &#123;<br>        console.log(page);<br>        userlist(&#123;page&#125;).then(response =&gt; &#123;<br>          this.list = response.userlist;<br>          this.total = response.total;<br>          console.log(this.list)<br>          this.listLoading = false<br>        &#125;)<br>      &#125;,<br></code></pre></td></tr></table></figure><h4 id="在删除时通过弹框提示"><a href="#在删除时通过弹框提示" class="headerlink" title="在删除时通过弹框提示"></a>在删除时通过弹框提示</h4><figure class="hljs highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">async</span> del(id) &#123;<br>        <span class="hljs-comment">//弹框</span><br>        <span class="hljs-keyword">this</span>.$confirm(<span class="hljs-string">'是否需要删除$&#123;id&#125;的用户?, 确认删除'</span>, <span class="hljs-string">'提示'</span>, &#123;<br>          <span class="hljs-attr">confirmButtonText</span>: <span class="hljs-string">'确定'</span>,<br>          <span class="hljs-attr">cancelButtonText</span>: <span class="hljs-string">'取消'</span>,<br>          <span class="hljs-attr">type</span>: <span class="hljs-string">'warning'</span><br>        &#125;).then(<span class="hljs-keyword">async</span> () =&gt; &#123;<br>          <span class="hljs-keyword">this</span>.listLoading = <span class="hljs-literal">true</span>;<br>          <span class="hljs-keyword">let</span> res = <span class="hljs-keyword">await</span> deluser(&#123;id&#125;);<br>          <span class="hljs-keyword">this</span>.listLoading = <span class="hljs-literal">false</span>;<br>          <span class="hljs-keyword">this</span>.fetchData()<br>          &#125;);<br>      &#125;<br></code></pre></td></tr></table></figure><h4 id="添加权限操作"><a href="#添加权限操作" class="headerlink" title="添加权限操作"></a>添加权限操作</h4><p>后台编写添加权限接口</p>{% asset_img 3.png %}<p>前台导出调用后台接口的请求给页面调用</p><figure class="hljs highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">export</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">addrule</span>(<span class="hljs-params">data</span>) </span>&#123;<br>  <span class="hljs-keyword">return</span> request(&#123;<br>    <span class="hljs-attr">url</span>:<span class="hljs-string">'/admin/rule/addrule'</span>,<br>    <span class="hljs-attr">method</span>:<span class="hljs-string">'post'</span>,<br>    <span class="hljs-attr">data</span>:data<br>  &#125;)<br>&#125;<br></code></pre></td></tr></table></figure><p>addrule页面中调用方法，当提交表单时</p><figure class="hljs highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs javascript">methods: &#123;<br>      onSubmit() &#123;<br>        <span class="hljs-keyword">this</span>.$message(<span class="hljs-string">'submit!'</span>)<br>        addrule(<span class="hljs-keyword">this</span>.form)<br>        <span class="hljs-keyword">this</span>.$router.push(<span class="hljs-string">'/user/rulelist'</span>)<br>      &#125;,<br>      onCancel() &#123;<br>        <span class="hljs-keyword">this</span>.$message(&#123;<br>          <span class="hljs-attr">message</span>: <span class="hljs-string">'cancel!'</span>,<br>          <span class="hljs-attr">type</span>: <span class="hljs-string">'warning'</span><br>        &#125;)<br>      &#125;<br>    &#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;使用VueElementUI-thinkJS搭建后台管理系统&quot;&gt;&lt;a href=&quot;#使用VueElementUI-thinkJS搭建后台管理系统&quot; class=&quot;headerlink&quot; title=&quot;使用VueElementUI+thinkJS搭建后台管理系统&quot;&gt;&lt;/a&gt;使用VueElementUI+thinkJS搭建后台管理系统&lt;/h2&gt;&lt;p&gt;后台的核心就是提供数据，封装操作数据库的接口提供给前端调用。使用了Vue-element-admin的模板加thinkJS+Mysql快速的搭建起项目,&lt;/p&gt;
&lt;p&gt;主要练习前端登录验证，数据列表，获取用户信息和elementUi组件。&lt;/p&gt;
    
    </summary>
    
    
      <category term="前端" scheme="http://www.lhjailj.top/categories/%E5%89%8D%E7%AB%AF/"/>
    
      <category term="Vue" scheme="http://www.lhjailj.top/categories/%E5%89%8D%E7%AB%AF/Vue/"/>
    
    
      <category term="thinkJS" scheme="http://www.lhjailj.top/tags/thinkJS/"/>
    
      <category term="框架" scheme="http://www.lhjailj.top/tags/%E6%A1%86%E6%9E%B6/"/>
    
  </entry>
  
  <entry>
    <title>深入解析CSS层叠、优先级、继承</title>
    <link href="http://www.lhjailj.top/2020/07/02/2020-07-02-CSS%E7%BB%A7%E6%89%BF%E4%B8%8E%E4%BC%98%E5%85%88%E7%BA%A7%E7%AD%89/"/>
    <id>http://www.lhjailj.top/2020/07/02/2020-07-02-CSS%E7%BB%A7%E6%89%BF%E4%B8%8E%E4%BC%98%E5%85%88%E7%BA%A7%E7%AD%89/</id>
    <published>2020-07-02T01:22:55.000Z</published>
    <updated>2021-03-10T09:47:05.903Z</updated>
    
    <content type="html"><![CDATA[<h2 id="层叠"><a href="#层叠" class="headerlink" title="层叠"></a>层叠</h2><p>对统一元素应用多个规则（样式）时，可能会包含冲突的声明，类似我们通过标签选择器，id选择器，类选择器分别为h1，指定不同字体，那么这个h1最终会采用哪种字体呢。</p><p>层叠就这一系列的规则，它决定了当不同选择器为元素设置样式时如何解决冲突。</p><a id="more"></a><p>层叠会依据三种条件来解决冲突，</p><ol><li>样式表的来源：样式是从哪里来的，包含我们自己写的样式和浏览器的样式等。</li><li>选择器的优先级：在多种选择器中，哪种选择器更重要。</li><li>源码的顺序：样式在样式表中出现的顺序。</li></ol><p>浏览器的默认样式被称作用户代理样式，也就是说让我们不设置样式时，浏览器会自动给元素添加一些样式，它的优先级很低，当我们设置样式时，会覆盖掉浏览器样式。</p><h3 id="同时浏览器将优先级分为两部分：HTML的行内样式和选择器样式。"><a href="#同时浏览器将优先级分为两部分：HTML的行内样式和选择器样式。" class="headerlink" title="同时浏览器将优先级分为两部分：HTML的行内样式和选择器样式。"></a>同时浏览器将优先级分为两部分：<strong>HTML的行内样式和选择器样式</strong>。</h3><p>如果使用HTML的style属性写样式，会覆盖掉任何来自样式表的样式</p><p>选择器的优先级</p><ul><li>id选择器的优先级要大于类选择器，那么当我们使用id选择器为h1设置颜色为红色，类选择器设置为黑色，浏览器就会将h1设置为红色，因为id选择器的优先级要高</li><li>如果选择器的id选择器更多，比如h1设置了三个id选择器，那么使用两个id选择器的样式会胜出</li><li>如果id选择器的数量一致，那么拥有更多类选择器的样式会胜出。</li></ul><p><strong>如果我们在CSS中写了一个声明，但是没有生效，一般就是被更高的优先级规则覆盖了，所以在大型项目中，通常让优先级尽可能低，这样当我们需要覆盖一些样式时才有更多的选择空间</strong></p><p><strong>浏览器遵循三个步骤,即来源、优先级、源码顺序来解析网页上每个元素和每个属性</strong></p><p>处理层叠的一些经验</p><ol><li>尽量不使用ID选择器，就算只使用一个ID也会大幅提高有心计，当需要覆盖这个优先级时，通常找不到另一个有意义的ID</li><li>尽量不适用！imporant，它比ID更难覆盖。</li></ol><h2 id="继承"><a href="#继承" class="headerlink" title="继承"></a>继承</h2><p>将CSS的样式声明叫做层叠值，那么当一个元素没有层叠值时，则可能继承某个祖先元素的值，比如通常给<body>加上一个<code>font-family</code>,那么页面中的<code>祖先元素</code>，都会继承这个字体，就不必给页面的每个元素明确指定字体了。</body></p><p>不是所有属性都会继承，通常使一些我们希望被继承的属性，它们主要都是与文本相关的属性<code>color</code>、<code>font</code>、<code>font-family</code>、<code>font-size</code>、<code>font-weight</code>、<code>font-variant、font-style、line-height、letter-spacing、text-align、text-indent</code>、<code>text-transform</code>、<code>white-space</code>以及<code>word-spacing</code>。</p><p>使用浏览器开发者工具追踪元素样式信息</p><h2 id="特殊值inherit"><a href="#特殊值inherit" class="headerlink" title="特殊值inherit"></a>特殊值inherit</h2><p>当想要用继承替代一个层叠值便可以使用inherit</p><p>当body中设置了a链接的全局颜色时，footer的背景颜色为灰色，我们想要footer中链接的颜色继承自footer那么便可使用inherit</p><figure class="hljs highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs css">body a&#123;<br>  color: blue;<br>&#125;<br>footer: &#123;<br>  color: #666;<br>&#125;<br>footer a&#123;<br>  color: inherit; //#666<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;层叠&quot;&gt;&lt;a href=&quot;#层叠&quot; class=&quot;headerlink&quot; title=&quot;层叠&quot;&gt;&lt;/a&gt;层叠&lt;/h2&gt;&lt;p&gt;对统一元素应用多个规则（样式）时，可能会包含冲突的声明，类似我们通过标签选择器，id选择器，类选择器分别为h1，指定不同字体，那么这个h1最终会采用哪种字体呢。&lt;/p&gt;
&lt;p&gt;层叠就这一系列的规则，它决定了当不同选择器为元素设置样式时如何解决冲突。&lt;/p&gt;
    
    </summary>
    
    
      <category term="前端" scheme="http://www.lhjailj.top/categories/%E5%89%8D%E7%AB%AF/"/>
    
      <category term="CSS" scheme="http://www.lhjailj.top/categories/%E5%89%8D%E7%AB%AF/CSS/"/>
    
    
      <category term="层叠" scheme="http://www.lhjailj.top/tags/%E5%B1%82%E5%8F%A0/"/>
    
      <category term="继承" scheme="http://www.lhjailj.top/tags/%E7%BB%A7%E6%89%BF/"/>
    
  </entry>
  
  <entry>
    <title>6-19CSS相关问题</title>
    <link href="http://www.lhjailj.top/2020/06/19/2020-06-19-CSS%E5%B0%8F%E9%97%AE%E9%A2%98/"/>
    <id>http://www.lhjailj.top/2020/06/19/2020-06-19-CSS%E5%B0%8F%E9%97%AE%E9%A2%98/</id>
    <published>2020-06-19T02:42:30.000Z</published>
    <updated>2021-03-10T09:47:51.478Z</updated>
    
    <content type="html"><![CDATA[<ul><li><p>text-indent:-999px;当做一个a链接的图片按钮时，可以用于在添加完图片时将原本的字隐藏，只显示图片作为链接按钮</p><a id="more"></a></li><li><p>content用于在元素的::before和::after伪元素中插入内容。例如在自定义复选框样式时，</p><p>使用label覆盖input，设置label的样式通过content设置在点击状态时显示背景图片</p></li><li><p>label标签表示用户界面中某个元素的说明。将一个 <code>&lt;label&gt;</code> 和一个 <a href="https://developer.mozilla.org/zh-CN/docs/Web/HTML/Element/input" target="_blank" rel="noopener">``</a> 元素相关联主要有这些优点：</p><ul><li>标签文本不仅与其相应的文本输入元素在视觉上相关联，程序中也是如此。 这意味着，当用户聚焦到这个表单输入元素时，屏幕阅读器可以读出标签，让使用辅助技术的用户更容易理解应输入什么数据。</li><li>你可以点击关联的标签来聚焦或者激活这个输入元素，就像直接点击输入元素一样。这扩大了元素的可点击区域，让包括使用触屏设备在内的用户更容易激活这个元素。</li></ul><p>将一个 <code>&lt;label&gt;</code> 和一个 <code>&lt;input&gt;</code> 元素匹配在一起，你需要给 <code>&lt;input&gt;</code> 一个 <code>id</code> 属性。而 <code>&lt;label&gt;</code> 需要一个 <code>for</code> 属性，其值和  <code>&lt;input&gt;</code> 的 <code>id</code> 一样。</p><p>另外，你也可以将 <code>&lt;input&gt;</code> 直接放在 <code>&lt;label&gt;</code> 里，此时则不需要 <code>for</code> 和 <code>id</code> 属性，因为关联已隐含存在</p></li><li><p>给父元素overflow：hidden；zoom：1；清除浮动。</p></li><li><p>移动端布局</p><ol><li>做移动端的两种方式，一个项目分为PC端适配和移动端布局，判断设备进行切换</li><li>一种PC移动端同时适配的响应式页面，适应pc页面和移动端页面，@media</li><li>@media screen and(max-width:300px)当页面宽度小于300像素时，使用此内容中的样式</li><li>宽度设为100%，盒子自动继承父盒子宽度</li></ol><p>轮播图</p><figure class="hljs highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs css">&lt;div class="btnList"&gt;<br>            &lt;div class="btn pre"&gt;&lt;&lt;/div&gt;<br>            &lt;div class="btn next"&gt;&gt;&lt;/div&gt;<br>        &lt;/div&gt;<br>.swiper .btn.pre&#123;width: 100px;height: 60px;line-height: 60px;text-align: center;background-color: rgba(0,0, 0, 0.6);color: #ffffff;position: absolute;top: calc(50% - 30px);font-size: 35px;&#125;<br><br>.swiper .btn.next&#123;width: 100px;height: 60px;line-height: 60px;text-align: center;background-color: rgba(0,0, 0, 0.6);color: #ffffff;position: absolute;right: 0;;top: calc(50% - 30px);font-size: 35px;&#125;<br></code></pre></td></tr></table></figure><figure class="hljs highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> preBtn = <span class="hljs-built_in">document</span>.querySelector(<span class="hljs-string">".swiper .pre"</span>);<br>        <span class="hljs-keyword">var</span> nextBtn = <span class="hljs-built_in">document</span>.querySelector(<span class="hljs-string">".swiper .next"</span>);<br>        <span class="hljs-keyword">var</span> imgListDivs = <span class="hljs-built_in">document</span>.querySelectorAll(<span class="hljs-string">".swiper .imgItems"</span>);<br>        <span class="hljs-comment">// 图片数组的索引</span><br>        <span class="hljs-keyword">var</span> currentImg = <span class="hljs-number">0</span>;<br>        <span class="hljs-comment">// 点击事件</span><br>        nextBtn.onclick=<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;<br>            currentImg = currentImg + <span class="hljs-number">1</span>;<br>            <span class="hljs-comment">// 点击到最后一张图片，回到起点</span><br>            <span class="hljs-keyword">if</span>(currentImg&gt;=imgListDivs.length)&#123;<br>                currentImg= <span class="hljs-number">0</span>;<br>            &#125;<br>            <span class="hljs-comment">// 初始化，将所有的img列表的active去掉</span><br>            imgListDivs.forEach(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">item,i</span>)</span>&#123;<br>                item.classList.remove(<span class="hljs-string">"active"</span>)<br>            &#125;)<br>            <span class="hljs-comment">// 点击后索引加1，active移动到下一个元素显示下一张图片</span><br>            imgListDivs[currentImg].classList.add(<span class="hljs-string">"active"</span>)<br>            <br>        &#125;<br>        preBtn.onclick=<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;<br>            currentImg = currentImg - <span class="hljs-number">1</span>;<br>            <span class="hljs-keyword">if</span>(currentImg&lt;<span class="hljs-number">0</span>)&#123;<br>                currentImg= imgListDivs.length<span class="hljs-number">-1</span>;<br>            &#125;<br>            <span class="hljs-comment">// 初始化，将所有的img列表的active去掉</span><br>            imgListDivs.forEach(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">item,i</span>)</span>&#123;<br>                item.classList.remove(<span class="hljs-string">"active"</span>)<br>            &#125;)<br>            imgListDivs[currentImg].classList.add(<span class="hljs-string">"active"</span>)<br>            <br>        &#125;<br></code></pre></td></tr></table></figure></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;ul&gt;
&lt;li&gt;&lt;p&gt;text-indent:-999px;当做一个a链接的图片按钮时，可以用于在添加完图片时将原本的字隐藏，只显示图片作为链接按钮&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;
    
    </summary>
    
    
      <category term="前端" scheme="http://www.lhjailj.top/categories/%E5%89%8D%E7%AB%AF/"/>
    
      <category term="CSS" scheme="http://www.lhjailj.top/categories/%E5%89%8D%E7%AB%AF/CSS/"/>
    
    
      <category term="CSS3" scheme="http://www.lhjailj.top/tags/CSS3/"/>
    
  </entry>
  
  <entry>
    <title>Vue组件</title>
    <link href="http://www.lhjailj.top/2020/05/14/2021-3-10vue%E7%BB%84%E4%BB%B6%E6%B5%85%E8%B0%88/"/>
    <id>http://www.lhjailj.top/2020/05/14/2021-3-10vue%E7%BB%84%E4%BB%B6%E6%B5%85%E8%B0%88/</id>
    <published>2020-05-14T07:42:03.000Z</published>
    <updated>2021-03-10T10:14:39.717Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Vue组件"><a href="#Vue组件" class="headerlink" title="Vue组件"></a>Vue组件</h2><figure class="hljs highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs javascript">&lt;!DOCTYPE html&gt;<br>&lt;html lang="en"&gt;<br>&lt;head&gt;<br>  &lt;meta charset="UTF-8"&gt;<br>  &lt;meta name="viewport" content="width=device-width, initial-scale=1.0"&gt;<br>  &lt;title&gt;Document&lt;/title&gt;<br>  &lt;script src="https://unpkg.com/vue@next"&gt;&lt;/script&gt;<br>&lt;/head&gt;<br>&lt;body&gt;<br>  &lt;div id="root"&gt;&lt;/div&gt;<br>  <br>  &lt;script&gt;<br>    const app = Vue.createApp(&#123;<br>      data() &#123;<br>        return &#123;<br>          message: 'hello',<br>        &#125;<br>      &#125;,<br>      template: `<br>      &lt;div&gt;<br>        &#123;&#123;message&#125;&#125;  <br>        &lt;counter /&gt;<br>      &lt;/div&gt;      <br>      `<br>    &#125;)<br>    <br>    app.component('counter', &#123;<br>      template: `counter全局组件`<br>    &#125;)<br><br>    const vm = app.mount('#root')<br>  &lt;/script&gt;<br>&lt;/body&gt;<br>&lt;/html&gt;<br></code></pre></td></tr></table></figure><a id="more"></a><p>使用实例app调用compenent方法，注册全局组件，可以在父组件任意调用，因为他注册在全局环境中，但是不管我们引不引用，它都占用内存空间，有时会对系统性能有影响。</p><figure class="hljs highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> app = Vue.createApp(&#123;<br>   <span class="hljs-attr">components</span>: &#123;Dell&#125;,<br>   data() &#123;<br>     <span class="hljs-keyword">return</span> &#123;<br>       <span class="hljs-attr">message</span>: <span class="hljs-string">'hello'</span>,<br>     &#125;<br>   &#125;,<br>   <span class="hljs-attr">template</span>: <span class="hljs-string">`<br>   &lt;div&gt;<br>     &#123;&#123;message&#125;&#125;  <br>     &lt;dell /&gt;<br>   &lt;/div&gt;      <br>   `</span><br> &#125;)<br> <span class="hljs-keyword">const</span> Dell = &#123;<br>   <span class="hljs-attr">template</span>: <span class="hljs-string">`<br>     &lt;div&gt;局部组件&lt;/div&gt;<br>   `</span><br> &#125;<br></code></pre></td></tr></table></figure><p>使用局部组件要注册之后才能使用，性能发挥上较高</p><h2 id="组件传值"><a href="#组件传值" class="headerlink" title="组件传值"></a>组件传值</h2><p>父组件通过props传值给子组件</p><figure class="hljs highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> app = Vue.createApp(&#123;<br>      <span class="hljs-attr">template</span>: <span class="hljs-string">`<br>      &lt;div&gt;<br>        &lt;test content="123" /&gt;<br>      &lt;/div&gt;      <br>      `</span><br>    &#125;)<br><br>    app.component(<span class="hljs-string">'test'</span>, &#123;<br>      <span class="hljs-attr">props</span>: [<span class="hljs-string">'content'</span>],<br>      <span class="hljs-comment">// 使用typeof发现答应在屏幕上的仍然是一个字符串变量</span><br>      <span class="hljs-attr">template</span>: <span class="hljs-string">`&lt;div&gt;&#123;&#123; typeof content&#125;&#125;&lt;/div&gt;`</span><br>    &#125;)<br>    <span class="hljs-keyword">const</span> vm = app.mount(<span class="hljs-string">'#root'</span>)<br>    <span class="hljs-comment">/*<br>    * 通过data定义变量，我们动态的传值，此时content需要加上v-bind或者简写`*`,<br>    动态的意思是他是定义为一个变量，根据变量的改变而改变，而不是直接写死的字符串<br>    */</span><br>    <span class="hljs-keyword">const</span> app = Vue.createApp(&#123;<br>      data() &#123;<br>        <span class="hljs-keyword">return</span> &#123;<br>          <span class="hljs-attr">num</span>: <span class="hljs-number">123</span><br>        &#125;<br>      &#125;,<br>      <span class="hljs-attr">template</span>: <span class="hljs-string">`<br>      &lt;div&gt;<br>        &lt;test :content="num" /&gt;<br>      &lt;/div&gt;      <br>      `</span><br>    &#125;)<br><br>    app.component(<span class="hljs-string">'test'</span>, &#123;<br>      <span class="hljs-attr">props</span>: [<span class="hljs-string">'content'</span>],<br>      <span class="hljs-comment">//当我们需要判定组件传过来的值的类型，那么我可以不使用数组</span><br>      props： &#123;<br>      <span class="hljs-attr">content</span>: <span class="hljs-built_in">String</span><br>    &#125;<br>      <span class="hljs-attr">template</span>: <span class="hljs-string">`&lt;div&gt;&#123;&#123; typeof content&#125;&#125;&lt;/div&gt;`</span><br>    &#125;)<br>    <br><br>    <span class="hljs-keyword">const</span> vm = app.mount(<span class="hljs-string">'#root'</span>)<br>    <span class="hljs-comment">// 传递一个函数，同时我们还可以添加required：true,表示必须传这个props，不传的话将会有警告，default：表示默认值，如果父组件不传的话，将会使用这个默认值</span><br>    <span class="hljs-keyword">const</span> app = Vue.createApp(&#123;<br>      data() &#123;<br>        <span class="hljs-keyword">return</span> &#123;<br>          <span class="hljs-attr">num</span>: <span class="hljs-function"><span class="hljs-params">()</span> =&gt;</span> &#123;<br>            alert(<span class="hljs-number">123</span>)<br>          &#125;<br>        &#125;<br>      &#125;,<br>      <span class="hljs-attr">template</span>: <span class="hljs-string">`<br>      &lt;div&gt;<br>        &lt;test :content="num" /&gt;<br>      &lt;/div&gt;      <br>      `</span><br>    &#125;)<br><br>    app.component(<span class="hljs-string">'test'</span>, &#123;<br>      <span class="hljs-attr">props</span>: &#123;<br>        <span class="hljs-attr">content</span>: <span class="hljs-built_in">Function</span><br>      &#125;,<br>      <span class="hljs-attr">methods</span>: &#123;<br>        handle() &#123;<br>          <span class="hljs-keyword">this</span>.content()<br>        &#125;<br>      &#125;,<br>      <span class="hljs-attr">template</span>: <span class="hljs-string">`&lt;div @click="this.handle"&gt;&#123;&#123; typeof content&#125;&#125;&lt;/div&gt;`</span><br>    &#125;)<br>    <br>    <span class="hljs-keyword">const</span> vm = app.mount(<span class="hljs-string">'#root'</span>)<br></code></pre></td></tr></table></figure><h3 id="props的小注意"><a href="#props的小注意" class="headerlink" title="props的小注意"></a>props的小注意</h3><figure class="hljs highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> app = Vue.createApp(&#123;<br>      data() &#123;<br>        <span class="hljs-keyword">return</span> &#123;<br>          <span class="hljs-attr">a</span>:<span class="hljs-number">1</span>,<br>          <span class="hljs-attr">b</span>:<span class="hljs-number">2</span>,<br>          <span class="hljs-attr">c</span>:<span class="hljs-number">3</span><br>        &#125;<br>      &#125;,<br>      <span class="hljs-attr">template</span>: <span class="hljs-string">`<br>      &lt;div&gt;<br>        &lt;test :a="a" :b="b" :c="c" /&gt;<br>      &lt;/div&gt;      <br>      `</span><br>    &#125;)<br>    app.component(<span class="hljs-string">'test'</span>, &#123;<br>      <span class="hljs-attr">props</span>: [<span class="hljs-string">'a'</span>, <span class="hljs-string">'b'</span>,<span class="hljs-string">'c'</span>],<br>      <span class="hljs-attr">template</span>: <span class="hljs-string">`&lt;div&gt;&#123;&#123;a&#125;&#125;&#123;&#123;b&#125;&#125;&#123;&#123;c&#125;&#125;&lt;/div&gt;`</span><br>    &#125;)<br><br><span class="hljs-comment">// 优化</span><br><span class="hljs-keyword">const</span> app = Vue.createApp(&#123;<br>      data() &#123;<br>        <span class="hljs-keyword">return</span> &#123;<br>          <span class="hljs-attr">params</span>: &#123;<br>            <span class="hljs-attr">a</span>:<span class="hljs-number">1</span>,<br>            <span class="hljs-attr">b</span>:<span class="hljs-number">2</span>,<br>            <span class="hljs-attr">c</span>:<span class="hljs-number">3</span><br>          &#125;<br>        &#125;<br>      &#125;,<br>      <span class="hljs-attr">template</span>: <span class="hljs-string">`<br>      &lt;div&gt;<br>        &lt;test :content="params" /&gt;<br>      &lt;/div&gt;      <br>      `</span><br>    &#125;)<br><br>    app.component(<span class="hljs-string">'test'</span>, &#123;<br>      <span class="hljs-attr">props</span>: [<span class="hljs-string">'content'</span>],<br>      <span class="hljs-attr">template</span>: <span class="hljs-string">`&lt;div&gt;&#123;&#123;content.a&#125;&#125;&#123;&#123;content.b&#125;&#125;&#123;&#123;content.c&#125;&#125;&lt;/div&gt;`</span><br>    &#125;)<br></code></pre></td></tr></table></figure><p><strong>1.当父组件要向子组件传递很多props时，一个一个传很麻烦，可以将props放到一个对象中，通过对象.属性的方式访问</strong></p><p><strong>2.如果模版中使用content-abc这种方式命名，那么在调用的时候要使用驼峰命名法</strong></p><p><strong>3. vue遵循单向数据流，也就是说我们不能在子组件内更改父组件传来的props，当我们修改时，vue会给我们警告[Vue warn]: Attempting to mutate prop “content”. Props are readonly，告诉我们prop是只读的不可修改，我们可以将，props的值赋值给data中的变量，再去修改data中的变量，以达到渲染props的目的</strong></p><figure class="hljs highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> app = Vue.createApp(&#123;<br>      data() &#123;<br>        <span class="hljs-keyword">return</span> &#123;<br>          <span class="hljs-attr">num</span>: <span class="hljs-number">1</span><br>        &#125;<br>      &#125;,<br>      <span class="hljs-attr">template</span>: <span class="hljs-string">`<br>      &lt;div&gt;<br>        &lt;test :content="num" /&gt;<br>      &lt;/div&gt;      <br>      `</span><br>    &#125;)<br><br>    app.component(<span class="hljs-string">'test'</span>, &#123;<br>      <span class="hljs-attr">props</span>: [<span class="hljs-string">'content'</span>],<br>      <span class="hljs-attr">methods</span>: &#123;<br>        handleClick() &#123;<br>          <span class="hljs-keyword">this</span>.content +=<span class="hljs-number">1</span><br>        &#125;<br>      &#125;,<br>      <span class="hljs-attr">template</span>: <span class="hljs-string">`&lt;div @click="this.handleClick"&gt;&#123;&#123;content&#125;&#125;&lt;/div&gt;`</span><br>    &#125;)<br></code></pre></td></tr></table></figure><p><strong>4. 子组件向父组件传递一个事件，来修改父组件中的数据</strong></p><figure class="hljs highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> app = Vue.createApp(&#123;<br>      data() &#123;<br>        <span class="hljs-keyword">return</span> &#123;<br>          <span class="hljs-attr">num</span>: <span class="hljs-number">1</span><br>        &#125;<br>      &#125;,<br>      <span class="hljs-attr">methods</span>: &#123;<br>        addNum() &#123;<br>          <span class="hljs-keyword">this</span>.num +=<span class="hljs-number">1</span><br>        &#125;<br>      &#125;,<br>      <span class="hljs-attr">template</span>: <span class="hljs-string">`<br>      &lt;div&gt;<br>        &lt;test :content="num" @add-num="addNum" /&gt;<br>      &lt;/div&gt;      <br>      `</span><br>    &#125;)<br><br>    app.component(<span class="hljs-string">'test'</span>, &#123;<br>      <span class="hljs-attr">props</span>: [<span class="hljs-string">'content'</span>],<br>      <span class="hljs-attr">emits</span>: [<span class="hljs-string">'addNum'</span>]<br>      <span class="hljs-attr">methods</span>: &#123;<br>        handleClick() &#123;<br>          <span class="hljs-keyword">this</span>.$emit(<span class="hljs-string">'addNum'</span>)<br>        &#125;<br>      &#125;,<br>      <span class="hljs-attr">template</span>: <span class="hljs-string">`&lt;div @click="this.handleClick"&gt;&#123;&#123;content&#125;&#125;&lt;/div&gt;`</span><br>    &#125;)<br></code></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Vue组件&quot;&gt;&lt;a href=&quot;#Vue组件&quot; class=&quot;headerlink&quot; title=&quot;Vue组件&quot;&gt;&lt;/a&gt;Vue组件&lt;/h2&gt;&lt;figure class=&quot;hljs highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;34&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;code class=&quot;hljs javascript&quot;&gt;&amp;lt;!DOCTYPE html&amp;gt;&lt;br&gt;&amp;lt;html lang=&quot;en&quot;&amp;gt;&lt;br&gt;&amp;lt;head&amp;gt;&lt;br&gt;  &amp;lt;meta charset=&quot;UTF-8&quot;&amp;gt;&lt;br&gt;  &amp;lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&amp;gt;&lt;br&gt;  &amp;lt;title&amp;gt;Document&amp;lt;/title&amp;gt;&lt;br&gt;  &amp;lt;script src=&quot;https://unpkg.com/vue@next&quot;&amp;gt;&amp;lt;/script&amp;gt;&lt;br&gt;&amp;lt;/head&amp;gt;&lt;br&gt;&amp;lt;body&amp;gt;&lt;br&gt;  &amp;lt;div id=&quot;root&quot;&amp;gt;&amp;lt;/div&amp;gt;&lt;br&gt;  &lt;br&gt;  &amp;lt;script&amp;gt;&lt;br&gt;    const app = Vue.createApp(&amp;#123;&lt;br&gt;      data() &amp;#123;&lt;br&gt;        return &amp;#123;&lt;br&gt;          message: &#39;hello&#39;,&lt;br&gt;        &amp;#125;&lt;br&gt;      &amp;#125;,&lt;br&gt;      template: `&lt;br&gt;      &amp;lt;div&amp;gt;&lt;br&gt;        &amp;#123;&amp;#123;message&amp;#125;&amp;#125;  &lt;br&gt;        &amp;lt;counter /&amp;gt;&lt;br&gt;      &amp;lt;/div&amp;gt;      &lt;br&gt;      `&lt;br&gt;    &amp;#125;)&lt;br&gt;    &lt;br&gt;    app.component(&#39;counter&#39;, &amp;#123;&lt;br&gt;      template: `counter全局组件`&lt;br&gt;    &amp;#125;)&lt;br&gt;&lt;br&gt;    const vm = app.mount(&#39;#root&#39;)&lt;br&gt;  &amp;lt;/script&amp;gt;&lt;br&gt;&amp;lt;/body&amp;gt;&lt;br&gt;&amp;lt;/html&amp;gt;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
      <category term="前端" scheme="http://www.lhjailj.top/categories/%E5%89%8D%E7%AB%AF/"/>
    
      <category term="Vue" scheme="http://www.lhjailj.top/categories/%E5%89%8D%E7%AB%AF/Vue/"/>
    
    
      <category term="框架" scheme="http://www.lhjailj.top/tags/%E6%A1%86%E6%9E%B6/"/>
    
      <category term="javaScript" scheme="http://www.lhjailj.top/tags/javaScript/"/>
    
      <category term="组件" scheme="http://www.lhjailj.top/tags/%E7%BB%84%E4%BB%B6/"/>
    
  </entry>
  
  <entry>
    <title>20-03-09vuex</title>
    <link href="http://www.lhjailj.top/2020/03/09/2020-03-09-%E4%BA%86%E8%A7%A3vuex/"/>
    <id>http://www.lhjailj.top/2020/03/09/2020-03-09-%E4%BA%86%E8%A7%A3vuex/</id>
    <published>2020-03-09T11:57:02.000Z</published>
    <updated>2021-03-10T09:39:20.451Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Vuex是什么？"><a href="#Vuex是什么？" class="headerlink" title="Vuex是什么？"></a>Vuex是什么？</h2><p>根据官网解释是一个专门为Vue.js应用程序开发的状态管理模式。（个人理解为数据管理，一个程序在刚开发阶段组件比较少，组件之间的传值解决也很方便，但是当程序越来越大，组件越来越多的时候数据越来越多的时候，组件传值变得复杂难以管理）。Vuex就是将多个组件都会用到的数据进行集中管理，哪个组件需要这些数据就在Vuex的存储库中提取，使数据的调用变得简单直接。</p><a id="more"></a><h3 id="Vuex的状态管理包含三个部分："><a href="#Vuex的状态管理包含三个部分：" class="headerlink" title="Vuex的状态管理包含三个部分："></a>Vuex的状态管理包含三个部分：</h3><ol><li>state，驱动应用的数据源；</li><li>view，以声明的方式将state映射到视图；</li><li>actions，响应在view上的用户输入导致的状态变化。</li></ol><p>这是一个单项数据流。</p><p>state中的数据渲染到view视图，用户通过actions交互事件更改state数据，数据再次渲染，形成一个单项数据流。</p><h2 id="正常情况下的数据管理"><a href="#正常情况下的数据管理" class="headerlink" title="正常情况下的数据管理"></a>正常情况下的数据管理</h2><p>通过官方文档实现一个计数器</p><figure class="hljs highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs javascript">&lt;template&gt;<br>&lt;h1&gt;点击数：&#123;&#123; count &#125;&#125;&lt;/h1&gt;<br>&lt;input type="button" value="点击增加" @click="addEvent" /&gt;<br>&lt;/template&gt;<br>export default &#123;<br>  name: "Store",<br>  data() &#123;<br>    return &#123;<br>      count: 0<br>    &#125;;<br>  &#125;,<br>  methods: &#123;<br>    addEvent:function()&#123;<br>        this.count++<br>    &#125;<br></code></pre></td></tr></table></figure>{% asset_img 2.jpg %}<p>那么Vuex的方式是</p><figure class="hljs highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs javascript">&lt;!-- Vuex方式 --&gt;<br>    <span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>点击数：&#123;&#123; $store.state.num &#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span></span><br>    <span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"button"</span> <span class="hljs-attr">value</span>=<span class="hljs-string">"点击增加"</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">"emitAction"</span> /&gt;</span></span><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> &#123;<br>  <span class="hljs-attr">name</span>: <span class="hljs-string">"Store"</span>,<br>  <span class="hljs-attr">methods</span>: &#123;<br>  <span class="hljs-comment">//vuex中的mutation不能直接调用，我们需要调用store.commit方法</span><br>    <span class="hljs-attr">emitAction</span>:<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;<br>        <span class="hljs-keyword">this</span>.$store.commit(<span class="hljs-string">'addEvent2'</span>)<br>    &#125;<br>    &#125;<br></code></pre></td></tr></table></figure><p>当勾选了Vuex后，会自动创建一个store实例，在state中存储数据，mutations中 定义方法</p><p>Vuex中的state：</p><p>state可以称作Vuex存储数据的仓库，在组件中调用数据时我们发现在组件中的模板语法是这样的，$state.store.num,较为繁琐，我们可以这样写</p><p>这个时候发现下面也很繁琐所以Vuex提供了<code>mapState</code>辅助函数帮助我们生成计算属性</p><figure class="hljs highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">//第一种方式</span><br><span class="hljs-attr">computed</span>:mapSate([<span class="hljs-string">'age'</span>,<span class="hljs-string">'gender'</span>,<span class="hljs-string">'num'</span>]);<br><span class="hljs-comment">//第二种</span><br>computed:mapState(&#123;<br>    <span class="hljs-attr">age</span>: <span class="hljs-string">'age'</span>,<br>    <span class="hljs-comment">//或者箭头函数方式</span><br>    <span class="hljs-attr">gender</span>:<span class="hljs-function">(<span class="hljs-params">state</span>) =&gt;</span>state.gender,<br>    <span class="hljs-attr">num</span>:<span class="hljs-function">(<span class="hljs-params">state</span>) =&gt;</span> state.num<br>&#125;)<br><span class="hljs-attr">computed</span>: &#123;<br>    ...mapState([<span class="hljs-string">"username"</span>, <span class="hljs-string">"age"</span>, <span class="hljs-string">"list"</span>]),<br>    ...mapGetters([<span class="hljs-string">'xuAge'</span>])<br>  &#125;,<br>  <span class="hljs-attr">methods</span>: &#123;<br>    <span class="hljs-comment">// addAge: function() &#123;</span><br>    <span class="hljs-comment">//   this.$store.commit("addAge");</span><br>    <span class="hljs-comment">// &#125;,</span><br>    ...mapMutations([<span class="hljs-string">'addAge'</span>,<span class="hljs-string">'getList'</span>]),<br>    ...mapActions([<span class="hljs-string">'getJoke'</span>])<br></code></pre></td></tr></table></figure><p>Vuex中的Getter：</p><p>刚开始想组件中有计算属性，那么为什么要使用getter，组件中的计算属性只能在该组件中使用而：</p><p>Getter相当于全局的computed(计算属性)</p><figure class="hljs highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs javascript">getters:&#123;<br><span class="hljs-attr">reverseMSg</span>:<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">state</span>)</span>&#123;<br><span class="hljs-comment">//返回它的颠倒值</span><br>  <span class="hljs-keyword">return</span> state.msg.split(<span class="hljs-string">''</span>).reverse().join(<span class="hljs-string">''</span>)<br>   &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>VueX中的mutations相当于组件中的methods</p><figure class="hljs highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">//修改数据/状态的方法--methods</span><br>  <span class="hljs-attr">mutations</span>: &#123;<br>    addAge(state,payload)&#123;<br>      <span class="hljs-comment">// console.log(state)</span><br>      state.age += payload<br>    &#125;,<br>    getList(state,payload)&#123;<br>      state.list = payload<br>    &#125;<br>  &#125;,<br></code></pre></td></tr></table></figure><p>VueX中的actions则是异步的修改数据</p><figure class="hljs highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs javascript">actions: &#123;<br>    getJoke(context)&#123;<br>      <span class="hljs-keyword">let</span> httpUrl = <span class="hljs-string">'https://api.apiopen.top/getJoke?page=1&amp;count10&amp;type=text'</span><br>      fetch(httpUrl).then(<span class="hljs-function">(<span class="hljs-params">res</span>)=&gt;</span>&#123;<br>        <span class="hljs-keyword">return</span> res.json()<br>      &#125;).then(<span class="hljs-function">(<span class="hljs-params">res</span>)=&gt;</span>&#123;<br>        <span class="hljs-built_in">console</span>.log(res)<br>        context.commit(<span class="hljs-string">'getList'</span>,res.result)<br>      &#125;)<br>    &#125;<br>  &#125;<br>      <span class="hljs-comment">//将异步请求到的数据渲染到列表中</span><br>      &lt;ul&gt;<br>      <span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">li</span> <span class="hljs-attr">v-for</span>=<span class="hljs-string">"(item, i) in $store.state.list"</span> <span class="hljs-attr">:key</span>=<span class="hljs-string">"i"</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">h3</span>&gt;</span>&#123;&#123; item.name &#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">h3</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>&#123;&#123; item.text &#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>      <span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span></span><br>    &lt;<span class="hljs-regexp">/ul&gt;</span><br></code></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Vuex是什么？&quot;&gt;&lt;a href=&quot;#Vuex是什么？&quot; class=&quot;headerlink&quot; title=&quot;Vuex是什么？&quot;&gt;&lt;/a&gt;Vuex是什么？&lt;/h2&gt;&lt;p&gt;根据官网解释是一个专门为Vue.js应用程序开发的状态管理模式。（个人理解为数据管理，一个程序在刚开发阶段组件比较少，组件之间的传值解决也很方便，但是当程序越来越大，组件越来越多的时候数据越来越多的时候，组件传值变得复杂难以管理）。Vuex就是将多个组件都会用到的数据进行集中管理，哪个组件需要这些数据就在Vuex的存储库中提取，使数据的调用变得简单直接。&lt;/p&gt;
    
    </summary>
    
    
      <category term="前端" scheme="http://www.lhjailj.top/categories/%E5%89%8D%E7%AB%AF/"/>
    
      <category term="Vue" scheme="http://www.lhjailj.top/categories/%E5%89%8D%E7%AB%AF/Vue/"/>
    
    
      <category term="Vuex" scheme="http://www.lhjailj.top/tags/Vuex/"/>
    
  </entry>
  
  <entry>
    <title>http的地基</title>
    <link href="http://www.lhjailj.top/2020/02/27/2020-02-27-HTTP%E5%90%84%E4%B8%AA%E4%BC%A0%E8%BE%93%E5%B1%82/"/>
    <id>http://www.lhjailj.top/2020/02/27/2020-02-27-HTTP%E5%90%84%E4%B8%AA%E4%BC%A0%E8%BE%93%E5%B1%82/</id>
    <published>2020-02-27T06:14:53.000Z</published>
    <updated>2021-03-10T09:31:21.576Z</updated>
    
    <content type="html"><![CDATA[<p>TCP/IP协议 族各层的作用</p><ul><li><p>应用层：决定了用户提供应用服务时 通信的活动，比如FTP(文件传输协议)，DNS(域名系统)，HTTP</p></li><li><p>传输层：传输层对应上层应用层，提供处于网络连接中两台计算机之间的数据传输，传输层有两个性质不同的协议，TCP(传输控制协议)，UDP(用户数据报协议)</p></li><li><p>网络层：用来处理网络上流动的数据包，数据包是网络传输的最小数据单位。该层规定了通过怎样的路径到达对方计算机，并把数据传给对方。</p></li><li><p>链路层：用来 处理连接网络的硬件部分，包括操作系统，网卡，硬件的设备驱动等</p><a id="more"></a><p>各层由下到上，越接近底层就越接近硬件，越靠近上层越靠近用户</p></li></ul><h2 id="第一层"><a href="#第一层" class="headerlink" title="第一层"></a>第一层</h2><ol><li><p>是将电脑连接起来的<strong>物理手段</strong>，（通过光缆、电缆、双绞线、无线电波）等方式，它主要规定了网络的一些电气特性，作用是负责传送0和1的电信号。链路层还确定了传送0和1的电信号的分组方式</p><p><strong>以太网协议</strong>：最初各家公司的电信号分组方式各不相同，由此以太网协议开始流行起来，并逐渐占据了主导地位，以太网规定：一组电信号构成一个数据包，叫做帧，每一帧分为两个部分，标头和数据</p><p>“标头”：包含数据包的一些说明项，比如发送者、接受者、数据类型等；”数据“则是数据包的具体内容</p><p>标头的长度，固定为18字节，“数据的长度”，最短为46字节，最长为1500字节，因此。整个帧最短为64字节，最长为1518字节，如果数据很长，就必须分割成多个帧发送。</p></li><li><p>MAC地址</p><p>虽然以太网的标头包含了发送者和接受者的信息，但是发送者和接受者又如何来区分和标示呢？</p><p>以太网规定所有连入网络的设备都必须具有网卡接口，数据包则是又一块网卡发送到另一块网卡，MAC地址就是<strong>网卡地址</strong></p><p>​                                MAC Address</p><p>​                                00-B0-D0-86-BB-F7</p><p>在同一个子网络内数据通过广播的方式像本网络内所有的计算机发送，让每台计算机自己判断是否为接收方</p></li></ol><h2 id="网络层"><a href="#网络层" class="headerlink" title="网络层"></a>网络层</h2><p>仅仅依靠MAC地址和在子网络内的广播效率低下，并且我们不能让所有国家的计算机都处在同一个子网络，所以需要判断：处于子网络内的计算机通过广播的方式传递数据，否则采用路由的方式，这样就产生了网络层，他的作用是引进一套新的地址，使得我们能够区分计算机是否处在同一个子网络，这套地址叫做“网络地址”，网络地址的协议叫做 <strong>IP协议</strong>。</p><p>”MAC地址“绑定在网卡上，“网络地址”由管理员分配，网络地址帮助确定计算机所处子网络（是不是在一个子网络），MAC地址则将数据包发送到该子网络的目标网卡，所以逻辑上先处理网络地址，后处理MAC地址。</p><p>规定网络地址的协议叫做“IP协议”，他所定的地址就叫做<strong>IP地址</strong></p><p>那么什么是IP地址：它长这样</p><p>习惯上，我们用四段十进制表示IP地址从0.0.0.0到255.255.255.255</p><p>互联网上每个计算机都会分配一个IP地址，前部分代表网络，后一部分代表主机，通过子网掩码可以判断两个IP地址是够处在同一个子网络。</p><p>所以总结来说IP地址的协议主要有两个，一个是为每台计算机分配IP地址，另一个是确定哪些地址处在同一个子网络</p><h3 id="IP数据包"><a href="#IP数据包" class="headerlink" title="IP数据包"></a>IP数据包</h3><p>前面所得以太网数据包包含标头和数据体两部分，只包含MAC地址，所以我门可以将IP数据包直接放进以太网数据包的数据部分，在前面在添加一个标头，那么到达网络层时数据包括以太网标头+IP标头+数据体（IP数据包在以太网数据包内部）</p><h2 id="传输层"><a href="#传输层" class="headerlink" title="传输层"></a>传输层</h2><p>有了MAC地址和IP协议我们已经可以通过互联网在任意两台主机上建立通信，发送数据。</p><p>但是现在我们的电脑一开机便同时运行着多个应用程序，比如你现在一边浏览着网页，一边听着歌，还在微信随时加入群聊。那么这么多程序，我们的数据包到底应该给哪个程序供给数据，这时候我们还需要一个参数，<strong>端口号（port）</strong>，每个数据包发送到主机特定的端口，不同的程序通过不同的端口取到自己所需的数据。</p><p>端口号时0到65535之间的一个整数，正好是一个16个二进制位，0到1023端口被系统占用。<strong>传输层的作用就是建立端口到端口的通信，相比之下，网络层的功能是建立主机到主机的通信，主要确定主机和端口，我们就能实现程序之间的交流</strong></p><h3 id="UDP协议"><a href="#UDP协议" class="headerlink" title="UDP协议"></a>UDP协议</h3><p>在数据包中加入端口信息我门就用到了UDP协议，他的格式就是在数据前面加上端口号，这一段数据的连接我们在加上UDP协议，如法炮制，我们将UDP的数据包放入以太网的数据包中的IP数据包中，那么形式看起来变成了：</p><p>以太网标头+IP标头+UDP标头+数据体（以太网-&gt;IP-&gt;UDP）</p><h2 id="应用层"><a href="#应用层" class="headerlink" title="应用层"></a>应用层</h2><p>应用程序收到传输层的数据。重要的就是<strong>要进行解读</strong>，由于互联网时开放架构，数据来源五花八门，必须事先规定好格式，否则根本无法解读。</p><p><strong>应用层的作用就是规定应用程序的数据格式。接下来便是了解应用层</strong>http**</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;TCP/IP协议 族各层的作用&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;应用层：决定了用户提供应用服务时 通信的活动，比如FTP(文件传输协议)，DNS(域名系统)，HTTP&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;传输层：传输层对应上层应用层，提供处于网络连接中两台计算机之间的数据传输，传输层有两个性质不同的协议，TCP(传输控制协议)，UDP(用户数据报协议)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;网络层：用来处理网络上流动的数据包，数据包是网络传输的最小数据单位。该层规定了通过怎样的路径到达对方计算机，并把数据传给对方。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;链路层：用来 处理连接网络的硬件部分，包括操作系统，网卡，硬件的设备驱动等&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;
    
    </summary>
    
    
      <category term="网络" scheme="http://www.lhjailj.top/categories/%E7%BD%91%E7%BB%9C/"/>
    
    
      <category term="TCP" scheme="http://www.lhjailj.top/tags/TCP/"/>
    
      <category term="IP" scheme="http://www.lhjailj.top/tags/IP/"/>
    
      <category term="MAC" scheme="http://www.lhjailj.top/tags/MAC/"/>
    
  </entry>
  
</feed>
